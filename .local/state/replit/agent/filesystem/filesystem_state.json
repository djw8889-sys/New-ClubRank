{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nClub Rank is a comprehensive club management and competition platform built with React, TypeScript, and Express.js. Originally Match Point (a tennis partner matching app), it has been transformed into a complete club management MVP that serves tennis clubs with advanced features for competition management, member coordination, and analytics.\n\nThe platform provides club identity customization, automated bracket generation, member management, inter-club competitions, and detailed analytics. It features a mobile-first design using Tailwind CSS and shadcn/ui components, delivering a native-like experience for club administrators and members.\n\n**MVP Transformation Complete (4 Phases):**\n- **Phase 1**: Service rebranding to \"Club Rank\" with shield emblem logo and navigation restructure (내 클럽/개인 매칭/랭킹/커뮤니티/내 정보)\n- **Phase 2**: Database expansion with club management schemas and gameFormat support for 5 match types\n- **Phase 3**: Core club features including identity customization, management dashboard, automated bracket generation, and analytics\n- **Phase 4**: Personal records enhancement and location-based matching optimization\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: React Context for auth state, TanStack React Query for server state\n- **UI Framework**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **Build Tool**: Vite for fast development and optimized builds\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ESM modules\n- **API Pattern**: RESTful API with `/api` prefix\n- **Storage Interface**: Abstracted storage layer with in-memory implementation\n- **Development**: Hot module replacement via Vite middleware\n\n## Authentication & User Management\n- **Primary Auth**: Firebase Authentication with Google OAuth\n- **User Profiles**: Custom user data stored in Firestore\n- **Session Management**: Firebase handles auth state persistence\n- **Profile Setup**: Multi-step onboarding for tennis-specific data (NTRP, region, availability)\n\n## Database Schema\n- **Users Table**: Comprehensive player profiles including tennis skill level (NTRP), region, age, bio, available times, and ranking stats (points, wins, losses)\n- **Matches Table**: Match requests with status tracking (pending, accepted, rejected, completed), scheduling, and point costs\n- **Chats Table**: Real-time messaging system linked to matches\n- **Posts Table**: Community features for user-generated content\n\n## Data Layer\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Database**: Configured for Neon serverless PostgreSQL\n- **Migrations**: Automated schema management via drizzle-kit\n- **Validation**: Zod schemas for type-safe data validation\n\n## Mobile-First Design\n- **Responsive**: Tailwind CSS with mobile breakpoints\n- **PWA-Ready**: Service worker configuration for offline capability\n- **Touch Optimization**: Touch-friendly UI components and gestures\n- **Performance**: Optimized bundle splitting and lazy loading\n\n## Real-Time Features\n- **Chat System**: Firestore real-time listeners for instant messaging\n- **Match Notifications**: Live updates for match requests and status changes\n- **Presence Indicators**: Online/offline status for active users\n\n## Points & Ranking System\n- **Match Economics**: Points-based system for match requests (50 points per match)\n- **Skill Tracking**: Win/loss records and performance metrics\n- **Leaderboards**: Ranking system based on points and performance\n- **Gamification**: Achievement system to encourage participation\n\n# External Dependencies\n\n## Firebase Services\n- **Firebase Auth**: Google OAuth integration for user authentication\n- **Firestore**: NoSQL database for real-time data and user profiles\n- **Firebase Storage**: File uploads for profile pictures and media\n- **Firebase Hosting**: Configured for production deployment\n\n## Database & ORM\n- **Neon Database**: Serverless PostgreSQL for production data\n- **Drizzle ORM**: Type-safe database queries and migrations\n- **Connection Pooling**: Built-in connection management for serverless environments\n\n## UI & Styling\n- **Radix UI**: Accessible component primitives for complex UI elements\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **shadcn/ui**: Pre-built component library with consistent styling\n- **Lucide React**: Icon system with tree-shaking support\n\n## Development & Build Tools\n- **Vite**: Fast build tool with HMR and optimized production builds\n- **TypeScript**: Static type checking across frontend and backend\n- **ESLint**: Code quality and consistency enforcement\n- **PostCSS**: CSS processing with Tailwind integration\n\n## Third-Party Integrations\n- **Google Fonts**: Inter font family for modern typography\n- **Font Awesome**: Icon library for enhanced UI elements\n- **React Hook Form**: Efficient form handling with validation\n- **Date-fns**: Lightweight date manipulation library\n\n## Deployment & Production\n- **Replit Integration**: Development environment optimizations\n- **Environment Variables**: Secure configuration management\n- **Build Optimization**: Code splitting and asset optimization\n- **Error Handling**: Comprehensive error boundaries and logging","size_bytes":5504},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        spin: {\n          \"0%\": { transform: \"rotate(0deg)\" },\n          \"100%\": { transform: \"rotate(360deg)\" },\n        },\n        slideUp: {\n          from: { \n            transform: \"translateY(20px)\",\n            opacity: \"0\",\n          },\n          to: { \n            transform: \"translateY(0)\",\n            opacity: \"1\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        spin: \"spin 1s linear infinite\",\n        slideUp: \"slideUp 0.3s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3190},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes.js\";\nimport { setupVite, serveStatic, log } from \"./vite.js\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  \n  // Check if built files exist - if so, serve static files even in development\n  // This allows production domains to work with built assets\n  const distPath = path.resolve(import.meta.dirname, \"dist/public\");\n  const hasBuiltFiles = fs.existsSync(distPath);\n  \n  if (app.get(\"env\") === \"development\" && !hasBuiltFiles) {\n    await setupVite(app, server);\n  } else {\n    // Serve static files if in production OR if built files exist\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2469},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { adminDb, verifyFirebaseToken } from \"./firebase-admin.js\";\nimport { FieldValue } from 'firebase-admin/firestore';\nimport { registerUserRoutes } from \"./routes/users.js\";\nimport { registerClubRoutes } from \"./routes/clubs.js\";\nimport { registerRankingRoutes } from \"./routes/rankings.js\";\n\n// 에러 코드 상수\nconst ERROR_CODES = {\n  NOT_FOUND: 'NOT_FOUND',\n  UNAUTHORIZED: 'UNAUTHORIZED', \n  ALREADY_PROCESSED: 'ALREADY_PROCESSED',\n  FORBIDDEN_NOT_PARTICIPANT: 'FORBIDDEN_NOT_PARTICIPANT',\n  FORBIDDEN_NOT_OPPONENT: 'FORBIDDEN_NOT_OPPONENT',\n  DUPLICATE_FRIENDSHIP: 'DUPLICATE_FRIENDSHIP',\n} as const;\n\ninterface AuthenticatedRequest extends Express.Request {\n  user: {\n    uid: string;\n  };\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // JSON parsing middleware for API routes\n  app.use(express.json());\n  \n  // Users 라우트 등록\n  registerUserRoutes(app);\n  \n  // Club 라우트 등록\n  registerClubRoutes(app);\n  \n  // Ranking 라우트 등록\n  registerRankingRoutes(app);\n\n  // 친구 요청 API\n  app.post('/api/friends/request', verifyFirebaseToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { targetUserId } = req.body;\n      const requesterId = req.user.uid;\n\n      if (!targetUserId) {\n        return res.status(400).json({ error: 'targetUserId가 필요합니다.' });\n      }\n\n      if (requesterId === targetUserId) {\n        return res.status(400).json({ error: '자신에게 친구 요청을 보낼 수 없습니다.' });\n      }\n\n      // 정렬된 페어 키로 중복 방지\n      const pairKey = [requesterId, targetUserId].sort().join(':');\n      \n      // 트랜잭션으로 중복 확인 및 생성\n      await adminDb.runTransaction(async (transaction) => {\n        const friendRef = adminDb.collection('friends').doc(pairKey);\n        const existingDoc = await transaction.get(friendRef);\n        \n        if (existingDoc.exists) {\n          throw new Error(ERROR_CODES.DUPLICATE_FRIENDSHIP);\n        }\n\n        // 친구 요청 생성\n        transaction.set(friendRef, {\n          userId1: requesterId, // 요청자\n          userId2: targetUserId, // 수신자  \n          status: 'pending' as const,\n          pairKey,\n          createdAt: FieldValue.serverTimestamp(),\n          updatedAt: FieldValue.serverTimestamp(),\n        });\n      });\n      \n      res.status(201).json({ \n        pairKey,\n        message: '친구 요청이 전송되었습니다.' \n      });\n    } catch (error: unknown) {\n      console.error('친구 요청 오류:', error);\n      if (error instanceof Error) {\n        if (error.message === ERROR_CODES.DUPLICATE_FRIENDSHIP) {\n          return res.status(409).json({ error: '이미 친구 관계가 존재합니다.' });\n        }\n        // Firestore 트랜잭션 충돌 처리 (GRPC 코드 기반)\n        const firebaseError = error as { code?: number };\n        if (firebaseError.code === 10) { // ABORTED\n          return res.status(409).json({ error: '친구 요청이 이미 처리되었습니다.' });\n        }\n        if (firebaseError.code === 6) { // ALREADY_EXISTS\n          return res.status(409).json({ error: '친구 요청이 이미 존재합니다.' });\n        }\n      }\n      res.status(500).json({ error: '서버 오류가 발생했습니다.' });\n    }\n  });\n\n  // 친구 수락 API\n  app.post('/api/friends/accept', verifyFirebaseToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { pairKey } = req.body;\n      const currentUserId = req.user.uid;\n\n      if (!pairKey) {\n        return res.status(400).json({ error: 'pairKey가 필요합니다.' });\n      }\n\n      await adminDb.runTransaction(async (transaction) => {\n        const friendRef = adminDb.collection('friends').doc(pairKey);\n        const friendDoc = await transaction.get(friendRef);\n        \n        if (!friendDoc.exists) {\n          throw new Error(ERROR_CODES.NOT_FOUND);\n        }\n\n        const friendship = friendDoc.data();\n        if (friendship?.status !== 'pending') {\n          throw new Error(ERROR_CODES.ALREADY_PROCESSED);\n        }\n\n        // 수신자만 수락 가능\n        if (friendship?.userId2 !== currentUserId) {\n          throw new Error(ERROR_CODES.UNAUTHORIZED);\n        }\n\n        transaction.update(friendRef, {\n          status: 'accepted',\n          updatedAt: FieldValue.serverTimestamp(),\n        });\n      });\n\n      res.status(200).json({ message: '친구 요청이 수락되었습니다.' });\n    } catch (error) {\n      console.error('친구 수락 오류:', error);\n      if (error instanceof Error) {\n        if (error.message === ERROR_CODES.UNAUTHORIZED) {\n          return res.status(403).json({ error: '이 요청을 수락할 권한이 없습니다.' });\n        }\n        if (error.message === ERROR_CODES.NOT_FOUND) {\n          return res.status(404).json({ error: '친구 요청을 찾을 수 없습니다.' });\n        }\n        if (error.message === ERROR_CODES.ALREADY_PROCESSED) {\n          return res.status(400).json({ error: '이미 처리된 요청입니다.' });\n        }\n      }\n      res.status(500).json({ error: '서버 오류가 발생했습니다.' });\n    }\n  });\n\n  // 경기 후 매너 평가 API\n  app.post('/api/matches/:matchId/review', verifyFirebaseToken, async (req: any, res) => {\n    try {\n      const { matchId } = req.params;\n      const { targetUserId, mannerScore: rawMannerScore } = req.body;\n      const reviewerId = req.user.uid;\n\n      if (!targetUserId || rawMannerScore === undefined) {\n        return res.status(400).json({ \n          error: 'targetUserId, mannerScore가 필요합니다.' \n        });\n      }\n\n      // 매너 점수 숫자 검증 및 변환\n      const mannerScore = Number(rawMannerScore);\n      if (!Number.isFinite(mannerScore) || mannerScore < 1 || mannerScore > 5) {\n        return res.status(400).json({ error: '매너 점수는 1-5 사이의 숫자여야 합니다.' });\n      }\n\n      if (reviewerId === targetUserId) {\n        return res.status(400).json({ error: '자신을 평가할 수 없습니다.' });\n      }\n\n      // 트랜잭션으로 매치 검증 및 매너 점수 업데이트\n      await adminDb.runTransaction(async (transaction) => {\n        const matchRef = adminDb.collection('matches').doc(matchId);\n        const matchDoc = await transaction.get(matchRef);\n        \n        if (!matchDoc.exists) {\n          throw new Error(ERROR_CODES.NOT_FOUND);\n        }\n\n        const match = matchDoc.data();\n        if (match?.status !== 'completed') {\n          throw new Error('완료된 매치만 리뷰할 수 있습니다.');\n        }\n\n        // 현재 사용자가 이미 리뷰했는지 확인\n        const isRequester = match?.requesterId === reviewerId;\n        const isTarget = match?.targetId === reviewerId;\n        const alreadyReviewedByUser = (isRequester && match?.reviewedByRequester) || \n                                     (isTarget && match?.reviewedByTarget);\n        \n        if (alreadyReviewedByUser) {\n          throw new Error('이미 리뷰를 완료했습니다.');\n        }\n\n        // 매치 참가자 확인\n        const isParticipant = match?.requesterId === reviewerId || match?.targetId === reviewerId;\n        if (!isParticipant) {\n          throw new Error(ERROR_CODES.FORBIDDEN_NOT_PARTICIPANT);\n        }\n\n        // 대상이 상대방인지 확인\n        const isOpponent = (match?.requesterId === reviewerId && match?.targetId === targetUserId) ||\n                          (match?.targetId === reviewerId && match?.requesterId === targetUserId);\n        if (!isOpponent) {\n          throw new Error(ERROR_CODES.FORBIDDEN_NOT_OPPONENT);\n        }\n\n        const userRef = adminDb.collection('users').doc(targetUserId);\n        const userDoc = await transaction.get(userRef);\n        \n        if (!userDoc.exists) {\n          throw new Error(ERROR_CODES.NOT_FOUND);\n        }\n\n        const userData = userDoc.data();\n        const currentReviewsCount = userData?.mannerReviewsCount || 0;\n        \n        // 첫 리뷰인 경우 합계를 0으로 시작, 아니면 기존 합계 사용\n        const currentScoreSum = currentReviewsCount === 0 ? 0 : (userData?.mannerScoreSum || 0);\n        \n        // 누적 평균 계산\n        const newReviewsCount = currentReviewsCount + 1;\n        const newScoreSum = currentScoreSum + mannerScore;\n        const newScore = Math.round((newScoreSum / newReviewsCount) * 10) / 10;\n\n        transaction.update(userRef, {\n          mannerScore: newScore,\n          mannerReviewsCount: newReviewsCount,\n          mannerScoreSum: newScoreSum,\n          updatedAt: FieldValue.serverTimestamp(),\n        });\n\n        // 동시성 안전한 리뷰 상태 업데이트\n        const finalReviewedByRequester = isRequester ? true : (match?.reviewedByRequester || false);\n        const finalReviewedByTarget = isTarget ? true : (match?.reviewedByTarget || false);\n        const finalIsReviewed = finalReviewedByRequester && finalReviewedByTarget;\n        \n        const reviewUpdate: any = {\n          reviewedByRequester: finalReviewedByRequester,\n          reviewedByTarget: finalReviewedByTarget,\n          isReviewed: finalIsReviewed,\n          updatedAt: FieldValue.serverTimestamp(),\n        };\n        \n        transaction.update(matchRef, reviewUpdate);\n      });\n\n      res.status(200).json({ message: '매너 평가가 완료되었습니다.' });\n    } catch (error) {\n      console.error('매너 평가 오류:', error);\n      if (error instanceof Error) {\n        if (error.message === ERROR_CODES.FORBIDDEN_NOT_PARTICIPANT) {\n          return res.status(403).json({ error: '이 매치의 참가자만 리뷰할 수 있습니다.' });\n        }\n        if (error.message === ERROR_CODES.FORBIDDEN_NOT_OPPONENT) {\n          return res.status(403).json({ error: '매치 상대방만 평가할 수 있습니다.' });\n        }\n        if (error.message === ERROR_CODES.NOT_FOUND) {\n          return res.status(404).json({ error: '매치 또는 사용자를 찾을 수 없습니다.' });\n        }\n        if (error.message.includes('완료된 매치만') || \n            error.message.includes('이미 리뷰')) {\n          return res.status(400).json({ error: error.message });\n        }\n      }\n      res.status(500).json({ error: '서버 오류가 발생했습니다.' });\n    }\n  });\n\n  // Health check endpoint with Firebase status\n  app.get('/api/health', async (req, res) => {\n    const health: any = {\n      status: 'ok',\n      timestamp: new Date().toISOString(),\n      firebase: {}\n    };\n\n    // Firebase 연결 상태 확인\n    try {\n      await adminDb.collection('_health_check').limit(1).get();\n      health.firebase.firestore = 'connected';\n    } catch (firestoreError) {\n      health.firebase.firestore = 'error';\n      health.firebase.firestoreError = (firestoreError as Error).message;\n      if (process.env.NODE_ENV === 'production') {\n        health.status = 'degraded';\n      }\n    }\n\n    res.json(health);\n  });\n\n  // Debug endpoint for Firebase configuration\n  app.get('/api/_debug/firebase', (req, res) => {\n    if (process.env.NODE_ENV !== 'development') {\n      return res.status(404).json({ error: 'Debug endpoint only available in development' });\n    }\n\n    const debug = {\n      projectId: process.env.FIREBASE_PROJECT_ID || 'not-set',\n      emulators: {\n        firestore: process.env.FIRESTORE_EMULATOR_HOST || null,\n        auth: process.env.FIREBASE_AUTH_EMULATOR_HOST || null,\n      },\n      credentials: {\n        serviceAccount: !!process.env.FIREBASE_SERVICE_ACCOUNT,\n        googleCredentials: !!process.env.GOOGLE_APPLICATION_CREDENTIALS,\n      },\n      configuration: {\n        isEmulatorMode: !!(process.env.FIRESTORE_EMULATOR_HOST && process.env.FIREBASE_AUTH_EMULATOR_HOST),\n        hasCredentials: !!(process.env.FIREBASE_SERVICE_ACCOUNT || process.env.GOOGLE_APPLICATION_CREDENTIALS),\n      }\n    };\n\n    res.json(debug);\n  });\n  \n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":12111},"server/storage.ts":{"content":"import { \n  Club, \n  ClubMember, \n  ClubMatch,\n  UserRankingPoints,\n  MatchParticipants,\n  InsertClub, \n  InsertClubMember, \n  InsertClubMatch,\n  InsertUserRankingPoints,\n  InsertMatchParticipants\n} from '@shared/schema';\n\n// Storage interface for club management\nexport interface IStorage {\n  // Club operations\n  createClub(club: InsertClub): Promise<Club>;\n  getClubById(id: number): Promise<Club | null>;\n  getClubsByRegion(region: string): Promise<Club[]>;\n  updateClub(id: number, updates: Partial<InsertClub>): Promise<Club>;\n  deleteClub(id: number): Promise<void>;\n  \n  // Club member operations  \n  addClubMember(member: InsertClubMember): Promise<ClubMember>;\n  getClubMembers(clubId: number): Promise<ClubMember[]>;\n  getUserClubs(userId: string): Promise<ClubMember[]>;\n  getMemberById(memberId: number): Promise<ClubMember | null>;\n  updateMemberRole(memberId: number, role: 'owner' | 'admin' | 'member'): Promise<ClubMember>;\n  removeClubMember(memberId: number): Promise<void>;\n  getUserClubMembership(userId: string, clubId: number): Promise<ClubMember | null>;\n  \n  // Club match operations\n  createClubMatch(match: InsertClubMatch): Promise<ClubMatch>;\n  getClubMatches(clubId: number): Promise<ClubMatch[]>;\n  getMatchById(matchId: number): Promise<ClubMatch | null>;\n  updateMatchStatus(matchId: number, status: 'pending' | 'accepted' | 'rejected' | 'completed' | 'cancelled'): Promise<ClubMatch>;\n  updateMatchResult(matchId: number, result: {\n    result: 'requesting_won' | 'receiving_won' | 'draw',\n    requestingScore: number,\n    receivingScore: number,\n    eloChange: number\n  }): Promise<ClubMatch>;\n  \n  // User Ranking Points operations\n  getUserRankingPoints(userId: string, clubId: number): Promise<UserRankingPoints[]>;\n  getUserRankingPointsByFormat(userId: string, clubId: number, gameFormat: string): Promise<UserRankingPoints | null>;\n  createOrUpdateUserRankingPoints(data: InsertUserRankingPoints): Promise<UserRankingPoints>;\n  getClubRankingsByFormat(clubId: number, gameFormat: string): Promise<UserRankingPoints[]>;\n  \n  // Match Participants operations  \n  addMatchParticipants(participants: InsertMatchParticipants[]): Promise<MatchParticipants[]>;\n  getMatchParticipants(matchId: number): Promise<MatchParticipants[]>;\n  getUserMatchHistory(userId: string, clubId?: number): Promise<MatchParticipants[]>;\n  getPartnershipStats(userId: string, clubId: number): Promise<{\n    partnerId: string;\n    wins: number;\n    losses: number;\n    draws: number;\n    gamesPlayed: number;\n    winRate: number;\n  }[]>;\n}\n\n// In-memory storage implementation for development\nexport class MemStorage implements IStorage {\n  private clubs: Map<number, Club> = new Map();\n  private clubMembers: Map<number, ClubMember> = new Map();\n  private clubMatches: Map<number, ClubMatch> = new Map();\n  private userRankingPoints: Map<number, UserRankingPoints> = new Map();\n  private matchParticipants: Map<number, MatchParticipants> = new Map();\n  private nextClubId = 1;\n  private nextMemberId = 1;\n  private nextMatchId = 1;\n  private nextRankingId = 1;\n  private nextParticipantId = 1;\n\n  // Club operations\n  async createClub(club: InsertClub): Promise<Club> {\n    const newClub: Club = {\n      id: this.nextClubId++,\n      name: club.name,\n      logoUrl: club.logoUrl || null,\n      bannerUrl: club.bannerUrl || null,\n      description: club.description || null,\n      primaryColor: club.primaryColor || '#22c55e',\n      rankingPoints: club.rankingPoints || 1000,\n      region: club.region,\n      establishedAt: new Date(),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.clubs.set(newClub.id, newClub);\n    return newClub;\n  }\n\n  async getClubById(id: number): Promise<Club | null> {\n    return this.clubs.get(id) || null;\n  }\n\n  async getClubsByRegion(region: string): Promise<Club[]> {\n    return Array.from(this.clubs.values()).filter(club => club.region === region);\n  }\n\n  async updateClub(id: number, updates: Partial<InsertClub>): Promise<Club> {\n    const club = this.clubs.get(id);\n    if (!club) throw new Error('Club not found');\n    \n    const updatedClub = { ...club, ...updates, updatedAt: new Date() };\n    this.clubs.set(id, updatedClub);\n    return updatedClub;\n  }\n\n  async deleteClub(id: number): Promise<void> {\n    this.clubs.delete(id);\n  }\n\n  // Club member operations\n  async addClubMember(member: InsertClubMember): Promise<ClubMember> {\n    const newMember: ClubMember = {\n      id: this.nextMemberId++,\n      ...member,\n      role: member.role || 'member',\n      isActive: member.isActive ?? true,\n      joinedAt: new Date(),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.clubMembers.set(newMember.id, newMember);\n    return newMember;\n  }\n\n  async getClubMembers(clubId: number): Promise<ClubMember[]> {\n    return Array.from(this.clubMembers.values())\n      .filter(member => member.clubId === clubId && member.isActive);\n  }\n\n  async getUserClubs(userId: string): Promise<ClubMember[]> {\n    return Array.from(this.clubMembers.values())\n      .filter(member => member.userId === userId && member.isActive);\n  }\n\n  async updateMemberRole(memberId: number, role: 'owner' | 'admin' | 'member'): Promise<ClubMember> {\n    const member = this.clubMembers.get(memberId);\n    if (!member) throw new Error('Member not found');\n    \n    const updatedMember = { ...member, role, updatedAt: new Date() };\n    this.clubMembers.set(memberId, updatedMember);\n    return updatedMember;\n  }\n\n  async removeClubMember(memberId: number): Promise<void> {\n    const member = this.clubMembers.get(memberId);\n    if (member) {\n      const updatedMember = { ...member, isActive: false, updatedAt: new Date() };\n      this.clubMembers.set(memberId, updatedMember);\n    }\n  }\n\n  async getUserClubMembership(userId: string, clubId: number): Promise<ClubMember | null> {\n    return Array.from(this.clubMembers.values())\n      .find(member => member.userId === userId && member.clubId === clubId && member.isActive) || null;\n  }\n\n  async getMemberById(memberId: number): Promise<ClubMember | null> {\n    return this.clubMembers.get(memberId) || null;\n  }\n\n  // Club match operations\n  async createClubMatch(match: InsertClubMatch): Promise<ClubMatch> {\n    const newMatch: ClubMatch = {\n      id: this.nextMatchId++,\n      requestingClubId: match.requestingClubId,\n      receivingClubId: match.receivingClubId,\n      status: match.status || 'pending',\n      matchDate: match.matchDate || null,\n      matchLocation: match.matchLocation || null,\n      matchType: match.matchType || 'friendly',\n      gameFormat: match.gameFormat || 'mens_doubles',\n      result: match.result || null,\n      requestingScore: match.requestingScore || 0,\n      receivingScore: match.receivingScore || 0,\n      eloChange: match.eloChange || 0,\n      requestingTeamPlayer1: match.requestingTeamPlayer1 || null,\n      requestingTeamPlayer2: match.requestingTeamPlayer2 || null,\n      receivingTeamPlayer1: match.receivingTeamPlayer1 || null,\n      receivingTeamPlayer2: match.receivingTeamPlayer2 || null,\n      notes: match.notes || null,\n      completedAt: null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.clubMatches.set(newMatch.id, newMatch);\n    return newMatch;\n  }\n\n  async getClubMatches(clubId: number): Promise<ClubMatch[]> {\n    return Array.from(this.clubMatches.values())\n      .filter(match => match.requestingClubId === clubId || match.receivingClubId === clubId);\n  }\n\n  async getMatchById(matchId: number): Promise<ClubMatch | null> {\n    return this.clubMatches.get(matchId) || null;\n  }\n\n  async updateMatchStatus(matchId: number, status: 'pending' | 'accepted' | 'rejected' | 'completed' | 'cancelled'): Promise<ClubMatch> {\n    const match = this.clubMatches.get(matchId);\n    if (!match) throw new Error('Match not found');\n    \n    const updatedMatch = { \n      ...match, \n      status, \n      updatedAt: new Date(),\n      completedAt: status === 'completed' ? new Date() : match.completedAt\n    };\n    this.clubMatches.set(matchId, updatedMatch);\n    return updatedMatch;\n  }\n\n  async updateMatchResult(matchId: number, resultData: {\n    result: 'requesting_won' | 'receiving_won' | 'draw',\n    requestingScore: number,\n    receivingScore: number,\n    eloChange: number\n  }): Promise<ClubMatch> {\n    const match = this.clubMatches.get(matchId);\n    if (!match) throw new Error('Match not found');\n    \n    const updatedMatch = { \n      ...match, \n      ...resultData,\n      status: 'completed' as const,\n      completedAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.clubMatches.set(matchId, updatedMatch);\n    return updatedMatch;\n  }\n\n  // User Ranking Points operations\n  async getUserRankingPoints(userId: string, clubId: number): Promise<UserRankingPoints[]> {\n    return Array.from(this.userRankingPoints.values())\n      .filter(urp => urp.userId === userId && urp.clubId === clubId);\n  }\n\n  async getUserRankingPointsByFormat(userId: string, clubId: number, gameFormat: string): Promise<UserRankingPoints | null> {\n    return Array.from(this.userRankingPoints.values())\n      .find(urp => urp.userId === userId && urp.clubId === clubId && urp.gameFormat === gameFormat) || null;\n  }\n\n  async createOrUpdateUserRankingPoints(data: InsertUserRankingPoints): Promise<UserRankingPoints> {\n    const existing = await this.getUserRankingPointsByFormat(data.userId, data.clubId, data.gameFormat);\n    \n    if (existing) {\n      const updated = {\n        ...existing,\n        rankingPoints: data.rankingPoints ?? existing.rankingPoints,\n        wins: data.wins ?? existing.wins,\n        losses: data.losses ?? existing.losses,\n        draws: data.draws ?? existing.draws,\n        updatedAt: new Date()\n      };\n      this.userRankingPoints.set(existing.id, updated);\n      return updated;\n    } else {\n      const newRankingPoints: UserRankingPoints = {\n        id: this.nextRankingId++,\n        userId: data.userId,\n        clubId: data.clubId,\n        gameFormat: data.gameFormat,\n        rankingPoints: data.rankingPoints ?? 1200,\n        wins: data.wins ?? 0,\n        losses: data.losses ?? 0,\n        draws: data.draws ?? 0,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      this.userRankingPoints.set(newRankingPoints.id, newRankingPoints);\n      return newRankingPoints;\n    }\n  }\n\n  async getClubRankingsByFormat(clubId: number, gameFormat: string): Promise<UserRankingPoints[]> {\n    return Array.from(this.userRankingPoints.values())\n      .filter(urp => urp.clubId === clubId && urp.gameFormat === gameFormat)\n      .sort((a, b) => (b.rankingPoints || 1200) - (a.rankingPoints || 1200));\n  }\n\n  // Match Participants operations\n  async addMatchParticipants(participants: InsertMatchParticipants[]): Promise<MatchParticipants[]> {\n    const result: MatchParticipants[] = [];\n    \n    for (const participant of participants) {\n      const newParticipant: MatchParticipants = {\n        id: this.nextParticipantId++,\n        matchId: participant.matchId,\n        userId: participant.userId,\n        team: participant.team,\n        partnerId: participant.partnerId || null,\n        rpBefore: participant.rpBefore,\n        rpAfter: participant.rpAfter,\n        rpChange: participant.rpChange,\n        createdAt: new Date()\n      };\n      this.matchParticipants.set(newParticipant.id, newParticipant);\n      result.push(newParticipant);\n    }\n    \n    return result;\n  }\n\n  async getMatchParticipants(matchId: number): Promise<MatchParticipants[]> {\n    return Array.from(this.matchParticipants.values())\n      .filter(mp => mp.matchId === matchId);\n  }\n\n  async getUserMatchHistory(userId: string, clubId?: number): Promise<MatchParticipants[]> {\n    const userParticipants = Array.from(this.matchParticipants.values())\n      .filter(mp => mp.userId === userId);\n    \n    if (!clubId) return userParticipants;\n    \n    // 클럽 ID로 필터링하려면 매치 정보를 확인해야 함\n    const filteredParticipants: MatchParticipants[] = [];\n    for (const participant of userParticipants) {\n      const match = this.clubMatches.get(participant.matchId);\n      if (match && (match.requestingClubId === clubId || match.receivingClubId === clubId)) {\n        filteredParticipants.push(participant);\n      }\n    }\n    \n    return filteredParticipants.sort((a, b) => \n      new Date(b.createdAt || Date.now()).getTime() - new Date(a.createdAt || Date.now()).getTime()\n    );\n  }\n\n  async getPartnershipStats(userId: string, clubId: number): Promise<{\n    partnerId: string;\n    wins: number;\n    losses: number;  \n    draws: number;\n    gamesPlayed: number;\n    winRate: number;\n  }[]> {\n    const userHistory = await this.getUserMatchHistory(userId, clubId);\n    const partnerStats = new Map<string, { wins: number; losses: number; draws: number; }>();\n    \n    for (const participation of userHistory) {\n      if (!participation.partnerId) continue; // 단식은 제외\n      \n      const partnerId = participation.partnerId;\n      if (!partnerStats.has(partnerId)) {\n        partnerStats.set(partnerId, { wins: 0, losses: 0, draws: 0 });\n      }\n      \n      const stats = partnerStats.get(partnerId)!;\n      const match = this.clubMatches.get(participation.matchId);\n      \n      if (match && match.result) {\n        const isUserWin = (\n          (participation.team === 'requesting' && match.result === 'requesting_won') ||\n          (participation.team === 'receiving' && match.result === 'receiving_won')\n        );\n        \n        if (match.result === 'draw') {\n          stats.draws++;\n        } else if (isUserWin) {\n          stats.wins++;\n        } else {\n          stats.losses++;\n        }\n      }\n    }\n    \n    return Array.from(partnerStats.entries()).map(([partnerId, stats]) => {\n      const gamesPlayed = stats.wins + stats.losses + stats.draws;\n      return {\n        partnerId,\n        wins: stats.wins,\n        losses: stats.losses,\n        draws: stats.draws,\n        gamesPlayed,\n        winRate: gamesPlayed > 0 ? (stats.wins / gamesPlayed) * 100 : 0\n      };\n    }).sort((a, b) => b.winRate - a.winRate);\n  }\n}\n\nexport const storage = new MemStorage();","size_bytes":14131},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"// Database schema for Club Rank - Tennis club management platform\n// Supporting both PostgreSQL (Drizzle ORM) and Firebase Firestore\n\nimport { pgTable, serial, varchar, text, integer, timestamp, boolean } from 'drizzle-orm/pg-core';\nimport { createInsertSchema } from 'drizzle-zod';\nimport { z } from 'zod';\n\n// =============================================================================\n// DRIZZLE ORM TABLE DEFINITIONS (PostgreSQL)\n// =============================================================================\n\n// Clubs table - Core club information\nexport const clubs = pgTable('clubs', {\n  id: serial('id').primaryKey(),\n  name: varchar('name', { length: 100 }).notNull(),\n  logoUrl: text('logo_url'),\n  bannerUrl: text('banner_url'),\n  description: text('description'),\n  primaryColor: varchar('primary_color', { length: 7 }).default('#22c55e'), // 기본 녹색\n  rankingPoints: integer('ranking_points').default(1000), // ELO 시작점수\n  region: varchar('region', { length: 50 }).notNull(), // 지역\n  establishedAt: timestamp('established_at').defaultNow(),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow()\n});\n\n// Club Members table - User-Club relationship with roles\nexport const clubMembers = pgTable('club_members', {\n  id: serial('id').primaryKey(),\n  userId: varchar('user_id', { length: 255 }).notNull(), // Firebase UID 호환\n  clubId: integer('club_id').notNull(),\n  role: varchar('role', { length: 20 }).notNull().default('member'), // 'owner', 'admin', 'member'\n  joinedAt: timestamp('joined_at').defaultNow(),\n  isActive: boolean('is_active').default(true), // 활성 멤버 여부\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow()\n});\n\n// Club Matches table - Inter-club match requests and results\nexport const clubMatches = pgTable('club_matches', {\n  id: serial('id').primaryKey(),\n  requestingClubId: integer('requesting_club_id').notNull(), // 교류전 신청한 클럽\n  receivingClubId: integer('receiving_club_id').notNull(), // 교류전 요청받은 클럽\n  status: varchar('status', { length: 20 }).notNull().default('pending'), // 'pending', 'accepted', 'rejected', 'completed', 'cancelled'\n  matchDate: timestamp('match_date'), // 예정된 경기 날짜\n  matchLocation: varchar('match_location', { length: 200 }), // 경기 장소\n  matchType: varchar('match_type', { length: 50 }).default('friendly'), // 'friendly', 'tournament', 'league'\n  gameFormat: varchar('game_format', { length: 30 }).default('mens_doubles'), // 'mens_singles', 'womens_singles', 'mens_doubles', 'womens_doubles', 'mixed_doubles'\n  result: varchar('result', { length: 20 }), // 'requesting_won', 'receiving_won', 'draw'\n  requestingScore: integer('requesting_score').default(0), // 신청 클럽 점수\n  receivingScore: integer('receiving_score').default(0), // 수신 클럽 점수\n  eloChange: integer('elo_change').default(0), // ELO 변화량 (+/- for requesting club)\n  // Participant tracking for individual RP calculation\n  requestingTeamPlayer1: varchar('requesting_team_player1', { length: 255 }), // 신청팀 선수1 Firebase UID\n  requestingTeamPlayer2: varchar('requesting_team_player2', { length: 255 }), // 신청팀 선수2 Firebase UID (복식인 경우)\n  receivingTeamPlayer1: varchar('receiving_team_player1', { length: 255 }), // 수신팀 선수1 Firebase UID\n  receivingTeamPlayer2: varchar('receiving_team_player2', { length: 255 }), // 수신팀 선수2 Firebase UID (복식인 경우)\n  notes: text('notes'), // 경기 관련 메모\n  completedAt: timestamp('completed_at'), // 경기 완료 시간\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow()\n});\n\n// User Ranking Points table - Individual ELO-based RP tracking per club\nexport const userRankingPoints = pgTable('user_ranking_points', {\n  id: serial('id').primaryKey(),\n  userId: varchar('user_id', { length: 255 }).notNull(), // Firebase UID\n  clubId: integer('club_id').notNull(), // 클럽별로 RP 관리\n  gameFormat: varchar('game_format', { length: 30 }).notNull(), // 경기 방식별 RP\n  rankingPoints: integer('ranking_points').default(1200), // ELO 시작점수 (1200)\n  wins: integer('wins').default(0), // 승수\n  losses: integer('losses').default(0), // 패수\n  draws: integer('draws').default(0), // 무승부\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow()\n});\n\n// Match Participants table - Track individual player participation in club matches\nexport const matchParticipants = pgTable('match_participants', {\n  id: serial('id').primaryKey(),\n  matchId: integer('match_id').notNull(), // clubMatches 테이블 참조\n  userId: varchar('user_id', { length: 255 }).notNull(), // Firebase UID\n  team: varchar('team', { length: 20 }).notNull(), // 'requesting' | 'receiving'\n  partnerId: varchar('partner_id', { length: 255 }), // 파트너 Firebase UID (복식인 경우)\n  rpBefore: integer('rp_before').notNull(), // 경기 전 RP\n  rpAfter: integer('rp_after').notNull(), // 경기 후 RP\n  rpChange: integer('rp_change').notNull(), // RP 변화량\n  createdAt: timestamp('created_at').defaultNow()\n});\n\n// =============================================================================\n// ZOD SCHEMAS FOR VALIDATION\n// =============================================================================\n\n// Insert schema for clubs (omitting auto-generated fields)\nexport const insertClubSchema = createInsertSchema(clubs).omit({\n  id: true,\n  establishedAt: true,\n  createdAt: true,\n  updatedAt: true\n});\n\n// Insert schema for club members\nexport const insertClubMemberSchema = createInsertSchema(clubMembers).omit({\n  id: true,\n  joinedAt: true,\n  createdAt: true,\n  updatedAt: true\n}).extend({\n  role: z.enum(['owner', 'admin', 'member']).default('member')\n});\n\n// Insert schema for club matches\nexport const insertClubMatchSchema = createInsertSchema(clubMatches).omit({\n  id: true,\n  completedAt: true,\n  createdAt: true,\n  updatedAt: true\n}).extend({\n  status: z.enum(['pending', 'accepted', 'rejected', 'completed', 'cancelled']).default('pending'),\n  matchType: z.enum(['friendly', 'tournament', 'league']).default('friendly'),\n  gameFormat: z.enum(['mens_singles', 'womens_singles', 'mens_doubles', 'womens_doubles', 'mixed_doubles']).default('mens_doubles'),\n  result: z.enum(['requesting_won', 'receiving_won', 'draw']).optional()\n});\n\n// Insert schema for user ranking points\nexport const insertUserRankingPointsSchema = createInsertSchema(userRankingPoints).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\n// Insert schema for match participants\nexport const insertMatchParticipantsSchema = createInsertSchema(matchParticipants).omit({\n  id: true,\n  createdAt: true\n});\n\n// Insert types from schemas\nexport type InsertClub = z.infer<typeof insertClubSchema>;\nexport type InsertClubMember = z.infer<typeof insertClubMemberSchema>;\nexport type InsertClubMatch = z.infer<typeof insertClubMatchSchema>;\nexport type InsertUserRankingPoints = z.infer<typeof insertUserRankingPointsSchema>;\nexport type InsertMatchParticipants = z.infer<typeof insertMatchParticipantsSchema>;\n\n// Select types from tables\nexport type Club = typeof clubs.$inferSelect;\nexport type ClubMember = typeof clubMembers.$inferSelect;\nexport type ClubMatch = typeof clubMatches.$inferSelect;\nexport type UserRankingPoints = typeof userRankingPoints.$inferSelect;\nexport type MatchParticipants = typeof matchParticipants.$inferSelect;\n\n// =============================================================================\n// FIREBASE FIRESTORE INTERFACES (Legacy - transitioning to Drizzle)\n// =============================================================================\n\nexport interface User {\n  id: string;\n  email: string;\n  username: string;\n  photoURL: string | null;\n  ntrp: string;\n  region: string;\n  age: string;\n  bio: string | null;\n  availableTimes: string[];\n  points: number;\n  wins: number;\n  losses: number;\n  mannerScore: number; // 매너 점수 (1-5, 기본값 5)\n  mannerReviewsCount: number; // 매너 리뷰 받은 횟수\n  mannerScoreSum: number; // 매너 점수 합계\n  tier?: string; // Calculated tier based on performance\n  role?: 'admin' | 'user'; // User role for permissions\n  isProfileComplete?: boolean; // 프로필 설정 완료 여부\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Match {\n  id: string;\n  requesterId: string;\n  targetId: string;\n  status: 'pending' | 'accepted' | 'rejected' | 'completed';\n  scheduledAt?: Date;\n  location?: string;\n  pointsCost: number;\n  gameFormat?: 'mens_singles' | 'womens_singles' | 'mens_doubles' | 'womens_doubles' | 'mixed_doubles'; // 경기 방식\n  result?: 'requester_won' | 'target_won' | 'draw';\n  isReviewed: boolean; // 전체 리뷰 완료 여부 (양쪽 다 완료)\n  reviewedByRequester: boolean; // 요청자 리뷰 완료 여부\n  reviewedByTarget: boolean; // 대상자 리뷰 완료 여부\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Chat {\n  id: string;\n  matchId: string;\n  senderId: string;\n  message: string;\n  createdAt: Date;\n}\n\n// 1:1 채팅을 위한 새로운 인터페이스들\nexport interface ChatRoom {\n  id: string;\n  participants: string[]; // 참여자 ID 배열 (항상 2명)\n  lastMessage?: string;\n  lastMessageAt?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Message {\n  id: string;\n  chatRoomId: string;\n  senderId: string;\n  content: string;\n  createdAt: Date;\n}\n\nexport interface Participant {\n  id: string;\n  chatRoomId: string;\n  userId: string;\n  joinedAt: Date;\n}\n\nexport interface Post {\n  id: string;\n  authorId: string;\n  title: string;\n  content: string;\n  likes: string[]; // 좋아요한 사용자 ID 배열\n  comments: Comment[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Comment {\n  id: string;\n  authorId: string;\n  content: string;\n  createdAt: Date;\n}\n\nexport interface Friend {\n  id: string;\n  userId1: string; // 친구 요청을 보낸 사용자\n  userId2: string; // 친구 요청을 받은 사용자\n  status: 'pending' | 'accepted'; // 친구 관계 상태\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Input types for creating new records (omitting auto-generated fields)\nexport interface InsertUser {\n  email: string;\n  username: string;\n  photoURL?: string | null;\n  ntrp: string;\n  region: string;\n  age: string;\n  bio?: string | null;\n  availableTimes: string[];\n  mannerScore?: number; // 기본값 5\n  mannerReviewsCount?: number; // 기본값 0\n  mannerScoreSum?: number; // 기본값 0 (누적 합계)\n  role?: 'admin' | 'user';\n}\n\nexport interface InsertMatch {\n  requesterId: string;\n  targetId: string;\n  status: 'pending' | 'accepted' | 'rejected' | 'completed';\n  scheduledAt?: Date;\n  location?: string;\n  pointsCost: number;\n  gameFormat?: 'mens_singles' | 'womens_singles' | 'mens_doubles' | 'womens_doubles' | 'mixed_doubles'; // 경기 방식\n  result?: 'requester_won' | 'target_won' | 'draw';\n  isReviewed?: boolean; // 기본값 false (전체 리뷰 완료)\n  reviewedByRequester?: boolean; // 기본값 false\n  reviewedByTarget?: boolean; // 기본값 false\n}\n\nexport interface InsertChat {\n  matchId: string;\n  senderId: string;\n  message: string;\n}\n\nexport interface InsertPost {\n  authorId: string;\n  title: string;\n  content: string;\n}\n\n// 새로운 채팅 관련 Insert 타입들\nexport interface InsertChatRoom {\n  participants: string[];\n}\n\nexport interface InsertMessage {\n  chatRoomId: string;\n  senderId: string;\n  content: string;\n}\n\nexport interface InsertComment {\n  authorId: string;\n  content: string;\n}\n\nexport interface InsertFriend {\n  userId1: string;\n  userId2: string;\n  status: 'pending' | 'accepted';\n}\n\n// =============================================================================\n// CLUB-RELATED FIREBASE INTERFACES (Will be migrated to Drizzle)\n// =============================================================================\n\n// Temporary Club interface for Firebase compatibility\nexport interface ClubFirebase {\n  id: string;\n  name: string;\n  logoUrl?: string | null;\n  bannerUrl?: string | null;\n  description?: string | null;\n  primaryColor: string;\n  rankingPoints: number;\n  region: string;\n  establishedAt: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface InsertClubFirebase {\n  name: string;\n  logoUrl?: string | null;\n  bannerUrl?: string | null;\n  description?: string | null;\n  primaryColor?: string;\n  rankingPoints?: number;\n  region: string;\n}\n\n// Club Members Firebase interface\nexport interface ClubMemberFirebase {\n  id: string;\n  userId: string;\n  clubId: string;\n  role: 'owner' | 'admin' | 'member';\n  joinedAt: Date;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface InsertClubMemberFirebase {\n  userId: string;\n  clubId: string;\n  role?: 'owner' | 'admin' | 'member';\n  isActive?: boolean;\n}\n\n// Club Matches Firebase interface\nexport interface ClubMatchFirebase {\n  id: string;\n  requestingClubId: string;\n  receivingClubId: string;\n  status: 'pending' | 'accepted' | 'rejected' | 'completed' | 'cancelled';\n  matchDate?: Date | null;\n  matchLocation?: string | null;\n  matchType: 'friendly' | 'tournament' | 'league';\n  gameFormat?: 'mens_singles' | 'womens_singles' | 'mens_doubles' | 'womens_doubles' | 'mixed_doubles';\n  result?: 'requesting_won' | 'receiving_won' | 'draw' | null;\n  requestingScore: number;\n  receivingScore: number;\n  eloChange: number;\n  notes?: string | null;\n  completedAt?: Date | null;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface InsertClubMatchFirebase {\n  requestingClubId: string;\n  receivingClubId: string;\n  status?: 'pending' | 'accepted' | 'rejected' | 'completed' | 'cancelled';\n  matchDate?: Date | null;\n  matchLocation?: string | null;\n  matchType?: 'friendly' | 'tournament' | 'league';\n  gameFormat?: 'mens_singles' | 'womens_singles' | 'mens_doubles' | 'womens_doubles' | 'mixed_doubles';\n  result?: 'requesting_won' | 'receiving_won' | 'draw' | null;\n  requestingScore?: number;\n  receivingScore?: number;\n  eloChange?: number;\n  notes?: string | null;\n}","size_bytes":14146},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport Home from \"@/pages/Home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <div className=\"bg-muted\">\n            <Router />\n          </div>\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":855},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');\n@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222.2 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222.2 84% 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222.2 84% 4.9%);\n  --primary: hsl(142.1 76.2% 36.3%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(120 60% 96%);\n  --secondary-foreground: hsl(240 5.9% 10%);\n  --muted: hsl(120 60% 96%);\n  --muted-foreground: hsl(240 3.8% 46.1%);\n  --accent: hsl(142.1 76.2% 36.3%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(142.1 76.2% 36.3%);\n  --radius: 0.5rem;\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n    -webkit-tap-highlight-color: transparent;\n  }\n}\n\n@layer components {\n  .view { \n    @apply hidden; \n  }\n  \n  .view.active { \n    @apply flex flex-col; \n  }\n  \n  .tab-content { \n    @apply hidden; \n  }\n  \n  .tab-content.active { \n    @apply block; \n  }\n  \n  .glass-effect {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n  \n  .match-card {\n    transition: all 0.3s ease;\n  }\n  \n  .match-card:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  }\n  \n  .floating-action {\n    position: fixed;\n    bottom: 100px;\n    right: 20px;\n    z-index: 40;\n  }\n  \n  .chat-bubble-animation {\n    animation: slideUp 0.3s ease-out;\n  }\n  \n  .loading-spinner {\n    border: 3px solid var(--muted);\n    border-top: 3px solid var(--primary);\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n  }\n  \n  .gradient-text {\n    background: linear-gradient(135deg, var(--primary), var(--accent));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n  \n  .premium-badge {\n    background: linear-gradient(135deg, #ffd700, #ffa500);\n    color: white;\n    font-size: 0.75rem;\n    font-weight: 600;\n    padding: 2px 8px;\n    border-radius: 12px;\n    text-shadow: 0 1px 2px rgba(0,0,0,0.2);\n  }\n}\n\n@keyframes slideUp {\n  from { \n    transform: translateY(20px); \n    opacity: 0; \n  }\n  to { \n    transform: translateY(0); \n    opacity: 1; \n  }\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n","size_bytes":6752},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/BottomNavigation.tsx":{"content":"interface BottomNavigationProps {\n  activeTab: string;\n  onTabChange: (tab: string, header: string) => void;\n}\n\nexport default function BottomNavigation({ activeTab, onTabChange }: BottomNavigationProps) {\n  const tabs = [\n    { id: 'my-club-tab', header: '내 클럽', icon: '🏠', label: '내 클럽' },\n    { id: 'individual-matching-tab', header: '현재 접속 중인 플레이어', icon: '🎾', label: '개인 매칭' },\n    { id: 'ranking-tab', header: '랭킹', icon: '🏆', label: '랭킹' },\n    { id: 'community-tab', header: '커뮤니티', icon: '💬', label: '커뮤니티' },\n    { id: 'my-info-tab', header: '내 정보', icon: '👤', label: '내 정보' },\n  ];\n\n  return (\n    <nav className=\"bg-background border-t border-border grid grid-cols-5 text-center sticky bottom-0\" data-testid=\"bottom-navigation\">\n      {tabs.map((tab) => (\n        <button\n          key={tab.id}\n          onClick={() => onTabChange(tab.id, tab.header)}\n          className={`nav-btn p-3 ${\n            activeTab === tab.id ? 'text-primary' : 'text-muted-foreground'\n          }`}\n          data-testid={`button-tab-${tab.id}`}\n        >\n          <div className=\"flex justify-center items-center\">\n            <span className=\"text-lg\">{tab.icon}</span>\n          </div>\n          <span className=\"block text-xs mt-1\">{tab.label}</span>\n        </button>\n      ))}\n    </nav>\n  );\n}\n","size_bytes":1386},"client/src/components/ChatScreen.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useFirestore, useFirestoreCollection } from \"@/hooks/use-firebase\";\nimport { useChat, useChatMessages } from \"@/hooks/use-chat\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Chat, User, Match, Message } from \"@shared/schema\";\nimport { getAvatarSrc } from \"@/utils/avatar\";\nimport LoadingSpinner from \"./LoadingSpinner\";\n\ninterface ChatScreenProps {\n  matchId?: string; // Optional for 1:1 chats\n  chatRoomId?: string; // For 1:1 chats\n  opponent?: User; // Made optional to prevent crashes when no opponent selected\n  onBack: () => void;\n}\n\nexport default function ChatScreen({ matchId, chatRoomId, opponent, onBack }: ChatScreenProps) {\n  const { appUser } = useAuth();\n  const { addDocument } = useFirestore();\n  const { sendMessage } = useChat();\n  const [message, setMessage] = useState('');\n  const [isSending, setIsSending] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // If no opponent provided, show placeholder screen\n  if (!opponent) {\n    return (\n      <div className=\"container mx-auto max-w-md min-h-screen bg-background shadow-2xl flex flex-col\">\n        <header className=\"flex items-center justify-between p-4 bg-background border-b border-border\">\n          <Button variant=\"ghost\" onClick={onBack} className=\"p-2\" data-testid=\"button-chat-back\">\n            <i className=\"fas fa-arrow-left\" />\n          </Button>\n          <h1 className=\"font-semibold\">채팅</h1>\n          <div className=\"w-10\"></div>\n        </header>\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center text-muted-foreground\">\n            <i className=\"fas fa-user-slash text-4xl mb-4\"></i>\n            <p>채팅 상대를 선택해주세요</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // For 1:1 chats, use the new chat system\n  const { messages: chatRoomMessages, loading: chatRoomLoading } = useChatMessages(chatRoomId || null);\n\n  // For legacy match-based chats, use the old system\n  const {\n    data: rawMatchMessages,\n    loading: matchMessagesLoading,\n    error: messagesError\n  } = useFirestoreCollection<Chat>('chats', matchId ? [\n    { field: 'matchId', operator: '==', value: matchId }\n  ] : []);\n\n  // Determine which messages to use\n  const isNewChatSystem = !!chatRoomId;\n  const messages = isNewChatSystem \n    ? chatRoomMessages \n    : [...rawMatchMessages].sort((a, b) => {\n        const timeA = a.createdAt ? +new Date(a.createdAt) : Infinity;\n        const timeB = b.createdAt ? +new Date(b.createdAt) : Infinity;\n        return timeA - timeB;\n      });\n\n  const messagesLoading = isNewChatSystem ? chatRoomLoading : matchMessagesLoading;\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  const handleSendMessage = async () => {\n    if (!message.trim() || !appUser || isSending) return;\n    \n    setIsSending(true);\n    try {\n      if (isNewChatSystem && chatRoomId) {\n        // Use new chat system\n        await sendMessage(chatRoomId, message.trim());\n      } else if (matchId) {\n        // Use legacy match-based chat system\n        await addDocument('chats', {\n          matchId,\n          senderId: appUser.id,\n          message: message.trim()\n        });\n      }\n      setMessage('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    } finally {\n      setIsSending(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\" data-testid=\"chat-screen\">\n      {/* Chat Header */}\n      <header className=\"bg-background border-b border-border p-4 flex items-center space-x-3\">\n        <Button variant=\"ghost\" onClick={onBack} className=\"text-muted-foreground hover:text-foreground\" data-testid=\"button-chat-back\">\n          <i className=\"fas fa-arrow-left text-lg\" />\n        </Button>\n        <img \n          src={getAvatarSrc(opponent.photoURL, opponent, 80)} \n          alt={opponent.username} \n          className=\"w-10 h-10 rounded-full object-cover\"\n          data-testid=\"img-chat-partner\"\n        />\n        <div className=\"flex-1\">\n          <h2 className=\"font-semibold text-foreground\" data-testid=\"text-chat-partner-name\">{opponent.username}</h2>\n          <p className=\"text-xs text-muted-foreground\">NTRP {opponent.ntrp} • {opponent.region}</p>\n        </div>\n        <Button variant=\"ghost\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"button-chat-menu\">\n          <i className=\"fas fa-ellipsis-v\" />\n        </Button>\n      </header>\n\n      {/* Chat Messages */}\n      <main className=\"flex-1 overflow-y-auto p-4 space-y-4 bg-muted\">\n        {messagesError ? (\n          <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <i className=\"fas fa-exclamation-triangle text-4xl text-destructive mb-4\"></i>\n            <p className=\"text-destructive mb-2\">채팅을 불러올 수 없습니다</p>\n            <p className=\"text-sm text-muted-foreground\">\n              인터넷 연결을 확인하거나 잠시 후 다시 시도해주세요.\n            </p>\n          </div>\n        ) : messagesLoading ? (\n          <div className=\"flex justify-center items-center py-8\">\n            <LoadingSpinner size=\"md\" />\n          </div>\n        ) : messages.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <i className=\"fas fa-comments text-4xl text-muted-foreground mb-4\"></i>\n            <p className=\"text-muted-foreground mb-2\">대화를 시작해보세요!</p>\n            <p className=\"text-sm text-muted-foreground\">\n              {opponent.username}님과 매치 일정을 조율하거나 인사를 나누어보세요.\n            </p>\n          </div>\n        ) : (\n          <>\n            {messages.map((msg) => {\n              const isSent = msg.senderId === appUser?.id;\n              return (\n                <div key={msg.id} className={`flex ${isSent ? 'justify-end' : 'justify-start'}`}>\n                  <div \n                    className={`px-4 py-2 rounded-2xl max-w-xs chat-bubble-animation ${\n                      isSent \n                        ? 'bg-primary text-primary-foreground rounded-br-sm' \n                        : 'bg-background border border-border rounded-bl-sm'\n                    }`}\n                    data-testid={isSent ? 'message-sent' : 'message-received'}\n                  >\n                    <p className=\"break-words\">\n                      {isNewChatSystem \n                        ? (msg as Message).content \n                        : (msg as Chat).message}\n                    </p>\n                    {msg.createdAt && (\n                      <p className={`text-xs mt-1 ${isSent ? 'text-primary-foreground/70' : 'text-muted-foreground'}`}>\n                        {new Date(msg.createdAt).toLocaleTimeString('ko-KR', {\n                          hour: '2-digit',\n                          minute: '2-digit'\n                        })}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n            <div ref={messagesEndRef} />\n          </>\n        )}\n      </main>\n\n      {/* Chat Input */}\n      <div className=\"bg-background border-t border-border p-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex-1 relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"메시지를 입력하세요...\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && handleSendMessage()}\n              disabled={isSending}\n              className=\"w-full p-3 border border-input rounded-full bg-muted focus:ring-2 focus:ring-ring focus:border-transparent pr-12\"\n              data-testid=\"input-chat-message\"\n            />\n            <Button variant=\"ghost\" className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground\" data-testid=\"button-chat-attach\">\n              <i className=\"fas fa-paperclip\" />\n            </Button>\n          </div>\n          <Button \n            onClick={handleSendMessage}\n            disabled={!message.trim() || isSending}\n            className=\"bg-primary text-primary-foreground p-3 rounded-full hover:bg-primary/90 transition-colors disabled:opacity-50\"\n            data-testid=\"button-send-message\"\n          >\n            {isSending ? (\n              <LoadingSpinner size=\"sm\" />\n            ) : (\n              <i className=\"fas fa-paper-plane\" />\n            )}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8889},"client/src/components/LoadingSpinner.tsx":{"content":"interface LoadingSpinnerProps {\n  size?: 'sm' | 'md' | 'lg';\n  text?: string;\n  className?: string;\n  fullScreen?: boolean;\n}\n\nexport default function LoadingSpinner({ \n  size = 'md', \n  text,\n  className = '',\n  fullScreen = false\n}: LoadingSpinnerProps) {\n  const sizeClasses = {\n    sm: 'w-4 h-4',\n    md: 'w-8 h-8',\n    lg: 'w-12 h-12'\n  };\n\n  const content = (\n    <div className={`flex flex-col items-center justify-center space-y-2 ${className}`}>\n      <div className={`animate-spin rounded-full border-2 border-gray-300 border-t-green-600 ${sizeClasses[size]}`} data-testid=\"loading-spinner\" />\n      {text && (\n        <p className=\"text-sm text-gray-600 animate-pulse\">{text}</p>\n      )}\n    </div>\n  );\n\n  if (fullScreen) {\n    return (\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-white/80 backdrop-blur-sm\">\n        {content}\n      </div>\n    );\n  }\n\n  return content;\n}\n","size_bytes":918},"client/src/components/LoginScreen.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport ClubRankLogo from \"./ClubRankLogo\";\nimport FirebaseSetupGuide from \"./FirebaseSetupGuide\";\n\nexport default function LoginScreen() {\n  const { signInWithGoogle } = useAuth();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n\n  const handleGoogleLogin = async () => {\n    setLoading(true);\n    try {\n      await signInWithGoogle();\n    } catch (error: any) {\n      console.error(\"Login failed:\", error);\n      \n      // Show user-friendly error message\n      let errorMessage = \"로그인에 실패했습니다. 다시 시도해주세요.\";\n      \n      if (error?.code === 'auth/unauthorized-domain') {\n        errorMessage = \"현재 도메인이 승인되지 않았습니다. Firebase 콘솔에서 도메인을 추가해야 합니다.\";\n      } else if (error?.code === 'auth/operation-not-allowed') {\n        errorMessage = \"Google 로그인이 비활성화되어 있습니다. Firebase 콘솔에서 Google 인증 제공업체를 활성화해주세요.\";\n      } else if (error?.code === 'auth/popup-blocked') {\n        errorMessage = \"팝업이 차단되었습니다. 브라우저 설정을 확인하거나 페이지를 새로고침해주세요.\";\n      } else if (error?.code === 'auth/popup-closed-by-user') {\n        errorMessage = \"로그인이 취소되었습니다. 다시 시도해주세요.\";\n      } else if (error?.code === 'auth/cancelled-popup-request') {\n        errorMessage = \"다른 로그인 팝업이 이미 열려있습니다. 잠시 후 다시 시도해주세요.\";\n      } else if (error?.code === 'auth/network-request-failed') {\n        errorMessage = \"네트워크 연결을 확인해주세요.\";\n      }\n      \n      toast({\n        title: \"로그인 실패\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n\n  return (\n    <div className=\"min-h-screen flex flex-col relative overflow-hidden bg-white\" data-testid=\"login-screen\">\n      {/* Hero section with logo */}\n      <div className=\"h-1/2 bg-gradient-to-br from-green-500 to-green-600 relative flex flex-col items-center justify-center\">\n        <div className=\"text-center text-white\">\n          <ClubRankLogo size=\"xl\" variant=\"white\" className=\"mx-auto mb-6 bg-white/20\" />\n          <h1 className=\"text-4xl font-bold mb-2\">클럽 랭크</h1>\n          <p className=\"text-green-100 text-lg\">우리 동호회를 위한 랭킹 시스템</p>\n        </div>\n      </div>\n      \n      <div className=\"flex-1 p-6 flex flex-col justify-center bg-white\">\n        <div className=\"space-y-4 mb-8\">\n          <div className=\"flex items-center space-x-3 text-gray-600\">\n            <i className=\"fas fa-users text-green-600\" />\n            <span className=\"text-sm\">클럽 간 교류전 & 랭킹</span>\n          </div>\n          <div className=\"flex items-center space-x-3 text-gray-600\">\n            <i className=\"fas fa-map-marker-alt text-green-600\" />\n            <span className=\"text-sm\">정기 모임 & 대진표 자동 생성</span>\n          </div>\n          <div className=\"flex items-center space-x-3 text-gray-600\">\n            <i className=\"fas fa-trophy text-green-600\" />\n            <span className=\"text-sm\">데이터 기반 클럽 관리</span>\n          </div>\n        </div>\n        \n        <div className=\"space-y-3\">\n          <Button \n            onClick={handleGoogleLogin}\n            disabled={loading}\n            className=\"w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-4 rounded-xl flex items-center justify-center shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-[1.02]\"\n            data-testid=\"button-google-login\"\n          >\n            {loading ? (\n              <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-3\" />\n            ) : (\n              <i className=\"fab fa-google mr-3\" />\n            )}\n            {loading ? \"로그인 중...\" : \"구글로 시작하기\"}\n          </Button>\n        </div>\n        \n        <p className=\"text-xs text-gray-500 mt-6 text-center leading-relaxed\">\n          서비스 이용을 위해 개인정보 처리방침과<br />\n          이용약관에 동의가 필요합니다.\n        </p>\n        \n        <FirebaseSetupGuide />\n      </div>\n    </div>\n  );\n}\n","size_bytes":4475},"client/src/components/MainApp.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { increment } from \"firebase/firestore\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useFirestoreCollection, useFirestore } from \"@/hooks/use-firebase\";\nimport { usePresence } from \"@/hooks/use-presence\";\nimport { useOnlineUsers } from \"@/hooks/use-online-users\";\nimport { useChat } from \"@/hooks/use-chat\";\nimport { User, Post, Match } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { calculateTier, getTierProgress } from \"@/utils/tierCalculator\";\nimport { getAvatarSrc } from \"@/utils/avatar\";\nimport PlayerCard from \"./PlayerCard\";\nimport BottomNavigation from \"./BottomNavigation\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport PostCreateModal from \"./PostCreateModal\";\nimport MatchResultModal from \"./MatchResultModal\";\nimport MatchRequestModal from \"./MatchRequestModal\";\nimport ChatScreen from \"./ChatScreen\";\nimport TierProgressCard from \"./TierProgressCard\";\nimport AdminPanel from \"./AdminPanel\";\nimport AdminPromotion from \"./AdminPromotion\";\nimport FeedbackModal from \"./FeedbackModal\";\nimport ClubRankLogo from \"./ClubRankLogo\";\nimport ProfileEditModal from \"./ProfileEditModal\";\nimport MatchHistoryModal from \"./MatchHistoryModal\";\nimport PointChargeModal from \"./PointChargeModal\";\nimport ShopModal from \"./ShopModal\";\nimport UserProfileModal from \"./UserProfileModal\";\nimport MyClubTabContent from \"./MyClubTabContent\";\nimport { useGeolocation, calculateDistance } from \"@/hooks/use-geolocation\";\nimport { useMyClubMembership } from \"@/hooks/use-clubs\";\n\nexport default function MainApp() {\n  const { appUser, logout } = useAuth();\n  const { requestMatch, acceptMatch, rejectMatch, deleteDocument, toggleLike, addComment } = useFirestore();\n  const { onlineUsers: presenceUsers } = usePresence();\n  const { onlineUsers, loading: onlineUsersLoading, refresh: refreshOnlineUsers } = useOnlineUsers();\n  const { createOrFindChatRoom, chatRooms } = useChat();\n  const { toast } = useToast();\n  const [location, setLocation] = useLocation();\n  const [activeTab, setActiveTab] = useState('my-club-tab');\n  const [mainHeader, setMainHeader] = useState('내 클럽');\n  \n  // 탭 ID와 헤더 매핑\n  const tabConfig = {\n    'my-club-tab': '내 클럽',\n    'individual-matching-tab': '현재 접속 중인 플레이어',\n    'ranking-tab': '랭킹',\n    'community-tab': '커뮤니티',\n    'my-info-tab': '내 정보'\n  };\n  \n  // URL에서 탭 추출 (hash 기반)\n  const getTabFromUrl = (): string => {\n    const hash = window.location.hash.slice(1); // # 제거\n    return hash && Object.keys(tabConfig).includes(hash) ? hash : 'my-club-tab';\n  };\n  \n  // URL 초기화 및 브라우저 뒤로/앞으로 지원\n  useEffect(() => {\n    const handleHashChange = () => {\n      const tabFromUrl = getTabFromUrl();\n      setActiveTab(tabFromUrl);\n      setMainHeader(tabConfig[tabFromUrl as keyof typeof tabConfig]);\n    };\n    \n    // 초기 로드 시 URL에서 탭 설정\n    handleHashChange();\n    \n    // 브라우저 뒤로/앞으로 버튼 지원\n    window.addEventListener('hashchange', handleHashChange);\n    \n    return () => {\n      window.removeEventListener('hashchange', handleHashChange);\n    };\n  }, []);\n  const [showPostModal, setShowPostModal] = useState(false);\n  const [showMatchResultModal, setShowMatchResultModal] = useState(false);\n  const [showMatchRequestModal, setShowMatchRequestModal] = useState(false);\n  const [showChatScreen, setShowChatScreen] = useState(false);\n  const [selectedMatch, setSelectedMatch] = useState<Match | null>(null);\n  const [selectedPlayer, setSelectedPlayer] = useState<User | null>(null);\n  const [chatOpponent, setChatOpponent] = useState<User | null>(null);\n  const [chatMatchId, setChatMatchId] = useState<string>('');\n  const [isNewChatMode, setIsNewChatMode] = useState(false); // true for 1:1 chat, false for match-based chat\n  const [isMatchRequesting, setIsMatchRequesting] = useState(false);\n  const [showAdminPanel, setShowAdminPanel] = useState(false);\n  const [showFeedbackModal, setShowFeedbackModal] = useState(false);\n  const [showProfileEditModal, setShowProfileEditModal] = useState(false);\n  const [showMatchHistoryModal, setShowMatchHistoryModal] = useState(false);\n  const [showPointChargeModal, setShowPointChargeModal] = useState(false);\n  const [showShopModal, setShowShopModal] = useState(false);\n  const [showUserProfileModal, setShowUserProfileModal] = useState(false);\n  const [selectedUserId, setSelectedUserId] = useState<string | null>(null);\n  const [commentInputs, setCommentInputs] = useState<{[postId: string]: string}>({});\n  const [showComments, setShowComments] = useState<{[postId: string]: boolean}>({});\n  const [sortBy, setSortBy] = useState<'ntrp' | 'points' | 'distance'>('ntrp');\n  const [rankingSubTab, setRankingSubTab] = useState<'club' | 'individual'>('individual');\n  \n  // Geolocation hook for distance sorting\n  const { position: userPosition, requestPermission, hasPermission } = useGeolocation();\n  \n  // 안전한 숫자 변환 함수\n  const safeNumber = (value: string | number | undefined | null, defaultValue = 0): number => {\n    if (typeof value === 'number') return value;\n    if (typeof value === 'string') {\n      const parsed = parseFloat(value);\n      return isNaN(parsed) ? defaultValue : parsed;\n    }\n    return defaultValue;\n  };\n\n  // 정렬된 온라인 사용자 목록\n  const sortedOnlineUsers = [...onlineUsers].sort((a, b) => {\n    switch (sortBy) {\n      case 'ntrp':\n        const aNtrp = safeNumber(a.ntrp);\n        const bNtrp = safeNumber(b.ntrp);\n        // NTRP가 설정되지 않은 사용자는 뒤로\n        if (aNtrp === 0 && bNtrp !== 0) return 1;\n        if (bNtrp === 0 && aNtrp !== 0) return -1;\n        return bNtrp - aNtrp;\n      case 'points':\n        return safeNumber(b.points) - safeNumber(a.points);\n      case 'distance':\n        // 거리순 정렬 (Geolocation 기반)\n        if (!userPosition || !hasPermission) {\n          // 위치 정보가 없으면 지역 기반으로 정렬\n          if (a.region === appUser?.region && b.region !== appUser?.region) return -1;\n          if (b.region === appUser?.region && a.region !== appUser?.region) return 1;\n          return a.region.localeCompare(b.region);\n        }\n        \n        // 실제 거리 기반 정렬 (GPS 좌표 사용)\n        // 사용자별 저장된 위치가 있으면 실제 거리로 계산\n        const userLat = userPosition.latitude;\n        const userLon = userPosition.longitude;\n        \n        // MVP: 다른 사용자들의 위치 데이터가 없으므로 지역 중심 좌표로 근사\n        const getRegionCoords = (region: string) => {\n          const regionCoords: {[key: string]: {lat: number, lon: number}} = {\n            '서울': {lat: 37.5665, lon: 126.9780},\n            '부산': {lat: 35.1796, lon: 129.0756},\n            '대구': {lat: 35.8722, lon: 128.6014},\n            '인천': {lat: 37.4563, lon: 126.7052},\n            '경기': {lat: 37.4138, lon: 127.5183},\n            '강원': {lat: 37.8228, lon: 128.1555},\n          };\n          return regionCoords[region] || {lat: 37.5665, lon: 126.9780}; // 서울 기본값\n        };\n        \n        const aCoords = getRegionCoords(a.region);\n        const bCoords = getRegionCoords(b.region);\n        \n        const aDistance = calculateDistance(userLat, userLon, aCoords.lat, aCoords.lon);\n        const bDistance = calculateDistance(userLat, userLon, bCoords.lat, bCoords.lon);\n        \n        return aDistance - bDistance;\n      default:\n        return 0;\n    }\n  });\n\n  // Fetch other players (excluding current user)\n  const { \n    data: players, \n    loading: playersLoading \n  } = useFirestoreCollection<User>('users', [\n    { field: 'id', operator: '!=', value: appUser?.id || '' }\n  ]);\n\n  // Fetch ranking data (all users sorted by points)\n  const {\n    data: rankingUsers,\n    loading: rankingLoading\n  } = useFirestoreCollection<User>('users', [], 'points', 'desc');\n\n  // Fetch community posts\n  const {\n    data: posts,\n    loading: postsLoading\n  } = useFirestoreCollection<Post>('posts', [], 'createdAt', 'desc');\n\n  // Fetch user's matches\n  const {\n    data: userMatches,\n    loading: userMatchesLoading\n  } = useFirestoreCollection<Match>('matches', [\n    { field: 'requesterId', operator: '==', value: appUser?.id || '' }\n  ], 'createdAt', 'desc');\n\n  // Also fetch matches where user is the target\n  const {\n    data: targetMatches,\n    loading: targetMatchesLoading\n  } = useFirestoreCollection<Match>('matches', [\n    { field: 'targetId', operator: '==', value: appUser?.id || '' }\n  ], 'createdAt', 'desc');\n\n  // Fetch user's club matches for club statistics\n  const { data: clubMemberships = [] } = useMyClubMembership();\n  const userClubIds = clubMemberships.map(m => m.club.id);\n  \n  // Fetch actual club statistics from API\n  const { data: clubStats, loading: clubStatsLoading } = useQuery({\n    queryKey: ['user-club-stats', appUser?.id, userClubIds],\n    queryFn: async () => {\n      if (!appUser?.id || userClubIds.length === 0) return null;\n      \n      const response = await fetch(`/api/clubs/${userClubIds[0]}/user/${appUser.id}/stats`, {\n        headers: {\n          'Authorization': `Bearer ${await appUser.getIdToken?.()}`\n        }\n      });\n      \n      if (!response.ok) throw new Error('Failed to fetch club stats');\n      return response.json();\n    },\n    enabled: !!appUser?.id && userClubIds.length > 0\n  });\n\n  // Calculate actual club statistics from real data\n  const clubMatchesWins = clubStats?.statsByFormat ? \n    Object.values(clubStats.statsByFormat).reduce((sum: number, stats: any) => sum + (stats.wins || 0), 0) : 0;\n  const clubMatchesLosses = clubStats?.statsByFormat ? \n    Object.values(clubStats.statsByFormat).reduce((sum: number, stats: any) => sum + (stats.losses || 0), 0) : 0;\n  const clubMeetingsAttended = clubStats?.totalMatches || 0;\n  const clubMeetingsMissed = Math.max(0, Math.floor(clubMeetingsAttended / 4)); // Estimate based on activity\n\n  // Combine both match lists\n  const allMatches = [...userMatches, ...targetMatches]\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  \n  // Combined loading state for matches\n  const matchesLoading = userMatchesLoading || targetMatchesLoading;\n\n  const handleTabChange = (tab: string, header: string) => {\n    setActiveTab(tab);\n    setMainHeader(header);\n    // URL 업데이트 (hash 사용)\n    window.location.hash = tab;\n  };\n\n  const handleMatchRequest = async (targetId: string) => {\n    const targetPlayer = onlineUsers.find(p => p.id === targetId);\n    if (!targetPlayer) return;\n    \n    setSelectedPlayer(targetPlayer);\n    setShowMatchRequestModal(true);\n  };\n\n  const handleConfirmMatchRequest = async () => {\n    if (!appUser || !selectedPlayer) return;\n    \n    setIsMatchRequesting(true);\n\n    try {\n      await requestMatch(appUser.id, selectedPlayer.id, 50);\n\n      toast({\n        title: \"매칭 신청 완료\",\n        description: `${selectedPlayer.username}님에게 매치를 신청했습니다. (테스트 버전 - 무료)`,\n      });\n      \n      setShowMatchRequestModal(false);\n      setSelectedPlayer(null);\n    } catch (error: any) {\n      console.error(\"Match request error:\", error);\n      toast({\n        title: \"매칭 신청 실패\",\n        description: error.message || \"다시 시도해주세요.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsMatchRequesting(false);\n    }\n  };\n\n  // 실시간 접속자와 채팅 시작\n  const handleStartChat = async (otherUserId: string) => {\n    try {\n      if (!appUser) return;\n      \n      const chatRoomId = await createOrFindChatRoom(otherUserId);\n      \n      // 채팅 상대방 찾기 (onlineUsers에서 먼저 찾고, 없으면 다른 목록에서)\n      let otherUser = onlineUsers.find(u => u.id === otherUserId) || \n        players.find(p => p.id === otherUserId) || \n        rankingUsers.find(u => u.id === otherUserId);\n      \n      if (!otherUser) {\n        // 플레이스홀더 사용자 생성 - 나중에 데이터 하이드레이션\n        otherUser = {\n          id: otherUserId,\n          username: \"사용자\",\n          email: \"\",\n          photoURL: null,\n          ntrp: \"0.0\",\n          region: \"알 수 없음\",\n          age: \"0\",\n          bio: null,\n          availableTimes: [],\n          points: 0,\n          wins: 0,\n          losses: 0,\n          mannerScore: 5,\n          mannerReviewsCount: 0,\n          mannerScoreSum: 0,\n          createdAt: new Date('2025-01-01'),\n          updatedAt: new Date('2025-01-01')\n        };\n      }\n      \n      // 채팅 화면 열기\n      setChatOpponent(otherUser as User);\n      setChatMatchId(chatRoomId);\n      setIsNewChatMode(true);\n      setShowChatScreen(true);\n      \n      toast({\n        title: \"채팅방 입장\",\n        description: `${otherUser.username}님과의 채팅을 시작합니다.`,\n      });\n    } catch (error: any) {\n      console.error(\"Chat start error:\", error);\n      toast({\n        title: \"채팅 시작 실패\",\n        description: \"채팅을 시작할 수 없습니다. 다시 시도해주세요.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleAcceptMatch = async (matchId: string) => {\n    if (!appUser) return;\n\n    try {\n      await acceptMatch(matchId);\n      toast({\n        title: \"매치 수락 완료\",\n        description: \"경기 준비가 완료되었습니다! (테스트 버전 - 무료)\",\n      });\n    } catch (error: any) {\n      console.error(\"Accept match error:\", error);\n      toast({\n        title: \"매치 수락 실패\",\n        description: error.message || \"다시 시도해주세요.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRejectMatch = async (matchId: string) => {\n    if (!appUser) return;\n\n    try {\n      await rejectMatch(matchId);\n      toast({\n        title: \"매치 거절 완료\",\n        description: \"매치 요청을 거절했습니다. (테스트 버전 - 무료)\",\n      });\n    } catch (error: any) {\n      console.error(\"Reject match error:\", error);\n      toast({\n        title: \"매치 거절 실패\",\n        description: error.message || \"다시 시도해주세요.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeletePost = async (postId: string, authorId: string) => {\n    if (!appUser) return;\n    \n    // Check if current user is the author\n    if (appUser.id !== authorId) {\n      toast({\n        title: \"삭제 권한 없음\",\n        description: \"본인이 작성한 글만 삭제할 수 있습니다.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!confirm('정말로 이 게시글을 삭제하시겠습니까?')) {\n      return;\n    }\n\n    try {\n      await deleteDocument('posts', postId);\n      toast({\n        title: \"게시글 삭제 완료\",\n        description: \"게시글이 성공적으로 삭제되었습니다.\",\n      });\n    } catch (error: any) {\n      console.error(\"Delete post error:\", error);\n      toast({\n        title: \"게시글 삭제 실패\",\n        description: error.message || \"다시 시도해주세요.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleToggleLike = async (postId: string) => {\n    if (!appUser) return;\n    \n    try {\n      await toggleLike(postId);\n    } catch (error: any) {\n      console.error(\"Toggle like error:\", error);\n      toast({\n        title: \"좋아요 실패\",\n        description: \"다시 시도해주세요.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleAddComment = async (postId: string) => {\n    if (!appUser) return;\n    \n    const commentContent = commentInputs[postId]?.trim();\n    if (!commentContent) return;\n    \n    try {\n      await addComment(postId, commentContent);\n      setCommentInputs(prev => ({ ...prev, [postId]: '' }));\n      toast({\n        title: \"댓글 작성 완료\",\n        description: \"댓글이 성공적으로 작성되었습니다.\",\n      });\n    } catch (error: any) {\n      console.error(\"Add comment error:\", error);\n      toast({\n        title: \"댓글 작성 실패\",\n        description: \"다시 시도해주세요.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const toggleCommentSection = (postId: string) => {\n    setShowComments(prev => ({ ...prev, [postId]: !prev[postId] }));\n  };\n\n  const updateCommentInput = (postId: string, value: string) => {\n    setCommentInputs(prev => ({ ...prev, [postId]: value }));\n  };\n\n  const handleLogout = async () => {\n    if (confirm('로그아웃 하시겠습니까?')) {\n      await logout();\n    }\n  };\n\n  const handleNewPost = () => {\n    setShowPostModal(true);\n  };\n\n  const handleClosePostModal = () => {\n    setShowPostModal(false);\n  };\n\n  const handlePostCreated = () => {\n    // Firestore의 realtime listener가 자동으로 UI를 업데이트함\n    toast({\n      title: \"게시글이 추가되었습니다\",\n      description: \"커뮤니티에서 확인해보세요!\",\n    });\n  };\n\n  // 사용자 프로필 클릭 핸들러\n  const handleUserProfileClick = (userId: string) => {\n    if (userId && userId !== appUser?.id) {\n      setSelectedUserId(userId);\n      setShowUserProfileModal(true);\n    }\n  };\n\n  // 사용자 프로필 모달 닫기 핸들러\n  const handleCloseUserProfileModal = () => {\n    setShowUserProfileModal(false);\n    setSelectedUserId(null);\n  };\n\n  const handleCompleteMatch = (match: Match) => {\n    setSelectedMatch(match);\n    setShowMatchResultModal(true);\n  };\n\n  const handleCloseMatchResultModal = () => {\n    setShowMatchResultModal(false);\n    setSelectedMatch(null);\n  };\n\n  const handleOpenChat = (match: Match) => {\n    if (!appUser) return;\n    \n    const isRequester = match.requesterId === appUser.id;\n    const opponentId = isRequester ? match.targetId : match.requesterId;\n    \n    // Try to find opponent in loaded lists first\n    let opponent = rankingUsers.find(u => u.id === opponentId) || \n      players.find(u => u.id === opponentId);\n    \n    if (!opponent) {\n      // Create placeholder opponent if not found in lists\n      opponent = {\n        id: opponentId,\n        username: \"로딩 중...\",\n        email: \"\",\n        photoURL: null,\n        ntrp: \"0.0\",\n        region: \"알 수 없음\",\n        age: \"0\",\n        bio: null,\n        availableTimes: [],\n        points: 0,\n        wins: 0,\n        losses: 0,\n        mannerScore: 5,\n        mannerReviewsCount: 0,\n        mannerScoreSum: 0,\n        createdAt: new Date('2025-01-01'),\n        updatedAt: new Date('2025-01-01')\n      };\n    }\n    \n    setChatOpponent(opponent);\n    setChatMatchId(match.id);\n    setShowChatScreen(true);\n  };\n\n  const handleCloseChatScreen = () => {\n    setShowChatScreen(false);\n    setChatOpponent(null);\n    setChatMatchId('');\n    setIsNewChatMode(false);\n  };\n\n  if (!appUser) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col\" data-testid=\"main-app\">\n      {/* Header */}\n      <header className=\"bg-background border-b border-border sticky top-0 z-20\">\n        <div className=\"flex justify-between items-center p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <ClubRankLogo size=\"sm\" className=\"bg-transparent\" />\n            <h1 className=\"text-xl font-bold text-foreground\" data-testid=\"text-main-header\">\n              {mainHeader}\n            </h1>\n            <span className=\"premium-badge\">PREMIUM</span>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <button \n              onClick={() => setShowShopModal(true)}\n              className=\"relative p-2 text-muted-foreground hover:text-foreground transition-colors\" \n              data-testid=\"button-shop\"\n            >\n              <i className=\"fas fa-store text-lg\" />\n              <span className=\"absolute -top-1 -right-1 w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n            </button>\n            <button className=\"relative p-2 text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"button-notifications\">\n              <i className=\"fas fa-bell text-lg\" />\n              <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full\" />\n            </button>\n            <div className=\"text-right\">\n              <p className=\"font-bold text-accent flex items-center\" data-testid=\"text-user-points\">\n                <i className=\"fas fa-coins mr-1\" />\n                <span>{appUser.points}</span> P\n              </p>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content Area */}\n      <main className=\"flex-grow overflow-y-auto bg-muted\">\n        {/* Online Players Tab */}\n        {/* My Club Tab */}\n        <div className={`tab-content ${activeTab === 'my-club-tab' ? 'active' : 'hidden'}`}>\n          <MyClubTabContent />\n        </div>\n\n        {/* Individual Matching Tab */}\n        <div className={`tab-content ${activeTab === 'individual-matching-tab' ? 'active' : 'hidden'}`}>\n          {/* Quick Stats */}\n          <div className=\"bg-background p-4 border-b border-border\">\n            <div className=\"grid grid-cols-3 gap-4 text-center\">\n              <div>\n                <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-stat-online-players\">\n                  {onlineUsers.length}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">접속중인 플레이어</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-green-600\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse inline-block mr-1\"></div>\n                  실시간\n                </div>\n                <div className=\"text-xs text-muted-foreground\">실시간 매칭</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-accent\">{appUser?.wins || 0}</div>\n                <div className=\"text-xs text-muted-foreground\">총 승수</div>\n              </div>\n            </div>\n          </div>\n\n          {/* 정렬 및 새로고침 */}\n          <div className=\"p-4 bg-background border-b border-border\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <select \n                  value={sortBy} \n                  onChange={async (e) => {\n                    const value = e.target.value as 'ntrp' | 'points' | 'distance';\n                    if (value === 'distance' && !hasPermission) {\n                      await requestPermission();\n                    }\n                    setSortBy(value);\n                  }}\n                  className=\"p-2 border border-input rounded-lg bg-background text-sm focus:ring-2 focus:ring-ring\" \n                  data-testid=\"select-sort-online-users\"\n                >\n                  <option value=\"ntrp\">NTRP 순</option>\n                  <option value=\"points\">포인트 순</option>\n                  <option value=\"distance\">거리 순 {!hasPermission ? '📍' : '✅'}</option>\n                </select>\n                <span className=\"text-xs text-muted-foreground\">\n                  {sortBy === 'ntrp' ? '높은 실력순' : sortBy === 'points' ? '높은 포인트순' : '거리 가까운 순'}\n                </span>\n              </div>\n              <button \n                onClick={refreshOnlineUsers}\n                className=\"p-2 text-muted-foreground hover:text-foreground transition-colors\"\n                title=\"목록 새로고침\"\n                data-testid=\"button-refresh-online-users\"\n              >\n                <i className=\"fas fa-sync-alt\" />\n              </button>\n            </div>\n          </div>\n\n          {/* 실시간 접속자 목록 */}\n          <div className=\"p-4 space-y-4\">\n            {onlineUsersLoading ? (\n              <div className=\"flex flex-col items-center justify-center py-12 space-y-4\">\n                <LoadingSpinner size=\"lg\" />\n                <p className=\"text-muted-foreground text-sm\">접속중인 플레이어를 불러오는 중...</p>\n              </div>\n            ) : sortedOnlineUsers.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-users text-2xl text-muted-foreground\" />\n                </div>\n                <p className=\"text-muted-foreground mb-2\" data-testid=\"text-no-online-players\">\n                  현재 접속중인 플레이어가 없습니다\n                </p>\n                <p className=\"text-xs text-muted-foreground mb-4\">\n                  다른 플레이어들이 접속할 때까지 잠시만 기다려주세요\n                </p>\n                <button \n                  onClick={refreshOnlineUsers}\n                  className=\"text-primary hover:text-primary/80 text-sm font-medium\"\n                  data-testid=\"button-refresh-no-players\"\n                >\n                  <i className=\"fas fa-sync-alt mr-1\" />\n                  다시 확인하기\n                </button>\n              </div>\n            ) : (\n              sortedOnlineUsers.map((user) => (\n                <div \n                  key={user.id}\n                  className=\"bg-background rounded-xl border border-border p-4 hover:bg-muted transition-colors cursor-pointer\"\n                  data-testid={`online-player-card-${user.id}`}\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    {/* 프로필 이미지 */}\n                    <div className=\"relative\">\n                      <img \n                        src={getAvatarSrc(user.photoURL, user, 120)} \n                        alt={user.username} \n                        className=\"w-16 h-16 rounded-full object-cover border-2 border-border cursor-pointer hover:opacity-80 transition-opacity\"\n                        onClick={() => handleUserProfileClick(user.id)}\n                        data-testid={`img-online-player-${user.id}`}\n                      />\n                      <div className=\"absolute -bottom-1 -right-1 w-5 h-5 bg-green-500 rounded-full border-2 border-white animate-pulse\" />\n                    </div>\n                    \n                    {/* 사용자 정보 */}\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <h3 \n                          className=\"font-bold text-foreground cursor-pointer hover:text-primary transition-colors\" \n                          onClick={() => handleUserProfileClick(user.id)}\n                          data-testid={`text-online-player-name-${user.id}`}\n                        >\n                          {user.username}\n                        </h3>\n                        <span className=\"text-xs text-muted-foreground\">{user.region}</span>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-primary/10 text-primary\">\n                          NTRP {user.ntrp}\n                        </span>\n                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-bold ${calculateTier(user.points, user.wins, user.losses).color} ${calculateTier(user.points, user.wins, user.losses).bgColor}`}>\n                          <i className=\"fas fa-medal mr-1\" />\n                          {calculateTier(user.points, user.wins, user.losses).name}\n                        </span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          매너점수: {(user.mannerScore ?? 5).toFixed(1)}\n                        </span>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"text-sm text-muted-foreground\">\n                          {user.wins}승 {user.losses}패 • {user.points}P\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          <button\n                            onClick={() => handleStartChat(user.id)}\n                            className=\"bg-primary text-primary-foreground px-3 py-1 rounded-md text-xs hover:bg-primary/90 transition-colors\"\n                            data-testid={`button-chat-online-${user.id}`}\n                          >\n                            💬 1:1 채팅\n                          </button>\n                          <button\n                            onClick={() => handleMatchRequest(user.id)}\n                            className=\"bg-accent text-accent-foreground px-3 py-1 rounded-md text-xs hover:bg-accent/90 transition-colors\"\n                            data-testid={`button-match-request-online-${user.id}`}\n                          >\n                            ⚾ 매치 신청\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n\n        {/* Chat List Tab - Now showing both chat rooms and matches */}\n        {/* Club Search Tab */}\n        <div className={`tab-content ${activeTab === 'club-search-tab' ? 'active' : 'hidden'}`}>\n          <div className=\"bg-gradient-to-r from-primary to-emerald-600 p-6 text-white\">\n            <h2 className=\"text-2xl font-bold mb-2\">🛡️ 클럽 찾기</h2>\n            <p className=\"opacity-90\">다른 클럽과 교류전을 신청하세요</p>\n          </div>\n          \n          {/* Search Functionality */}\n          <div className=\"p-4\">\n            <div className=\"bg-background rounded-xl p-6 text-center border border-border\">\n              <div className=\"text-6xl mb-4\">🔍</div>\n              <h3 className=\"text-lg font-semibold mb-2\">클럽 검색 기능 준비 중</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                지역별 클럽 검색, 클럽 프로필 보기,<br />\n                교류전 신청 기능이 곧 추가될 예정입니다.\n              </p>\n              <div className=\"inline-flex items-center px-4 py-2 bg-amber-100 text-amber-800 rounded-full text-sm font-medium\">\n                <i className=\"fas fa-clock mr-2\" />\n                2025년 상반기 오픈 예정\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Removed old Chat List Tab content */}\n        <div className={`tab-content ${activeTab === 'chat-list-tab' ? 'active' : 'hidden'}`} style={{display: 'none'}}>\n          {/* Chat Rooms Section */}\n          {chatRooms.length > 0 && (\n            <div className=\"p-4 border-b border-border\">\n              <h3 className=\"font-semibold text-foreground mb-3 flex items-center\">\n                <i className=\"fas fa-comments mr-2 text-primary\" />\n                1:1 채팅 ({chatRooms.length})\n              </h3>\n              <div className=\"space-y-3\">\n                {chatRooms.map((chatRoom) => {\n                  // Find the other participant\n                  const otherParticipantId = chatRoom.participants.find(id => id !== appUser?.id);\n                  const otherParticipant = players.find(p => p.id === otherParticipantId) ||\n                    rankingUsers.find(u => u.id === otherParticipantId);\n                  \n                  return (\n                    <div \n                      key={chatRoom.id}\n                      className=\"bg-background rounded-xl p-4 border border-border hover:bg-muted transition-colors cursor-pointer\"\n                      onClick={() => {\n                        if (otherParticipant) {\n                          setChatOpponent(otherParticipant);\n                          setChatMatchId(chatRoom.id);\n                          setIsNewChatMode(true);\n                          setShowChatScreen(true);\n                        }\n                      }}\n                      data-testid={`chat-room-${chatRoom.id}`}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <img \n                          src={otherParticipant?.photoURL || \"https://source.boringavatars.com/beam/120/unknown?colors=264653,2a9d8f,e9c46a,f4a261,e76f51\"} \n                          alt={otherParticipant?.username || \"Unknown\"} \n                          className=\"w-12 h-12 rounded-full object-cover\"\n                        />\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between mb-1\">\n                            <p className=\"font-semibold text-foreground\" data-testid={`text-chat-participant-${chatRoom.id}`}>\n                              {otherParticipant?.username || \"Unknown User\"}\n                            </p>\n                            {chatRoom.lastMessageAt && (\n                              <span className=\"text-xs text-muted-foreground\">\n                                {new Date(chatRoom.lastMessageAt).toLocaleDateString('ko-KR', {\n                                  month: 'short',\n                                  day: 'numeric',\n                                  hour: '2-digit',\n                                  minute: '2-digit'\n                                })}\n                              </span>\n                            )}\n                          </div>\n                          {chatRoom.lastMessage && (\n                            <p className=\"text-sm text-muted-foreground truncate\">{chatRoom.lastMessage}</p>\n                          )}\n                          {otherParticipant && (\n                            <p className=\"text-xs text-muted-foreground\">NTRP {otherParticipant.ntrp}</p>\n                          )}\n                        </div>\n                        <i className=\"fas fa-chevron-right text-muted-foreground\" />\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n          {/* Matches Section */}\n          <div className=\"p-4\">\n            <h3 className=\"font-semibold text-foreground mb-3 flex items-center\">\n              <i className=\"fas fa-trophy mr-2 text-accent\" />\n              매치 목록 ({allMatches.length})\n            </h3>\n            {matchesLoading ? (\n              <div className=\"flex flex-col items-center justify-center py-12 space-y-4\">\n                <LoadingSpinner size=\"lg\" />\n                <p className=\"text-muted-foreground text-sm\">매치 목록을 불러오는 중...</p>\n              </div>\n            ) : allMatches.length === 0 ? (\n              <p className=\"text-center text-muted-foreground pt-10\" data-testid=\"text-no-matches\">\n                아직 매치가 없습니다.<br />\n                플레이어 탭에서 매치를 신청해보세요!\n              </p>\n            ) : (\n              <div className=\"space-y-3\">\n                {allMatches.map((match) => {\n                const isRequester = match.requesterId === appUser?.id;\n                const opponentId = isRequester ? match.targetId : match.requesterId;\n                const opponent = rankingUsers.find(u => u.id === opponentId) || \n                  players.find(u => u.id === opponentId);\n                \n                const statusColors = {\n                  pending: 'bg-yellow-100 text-yellow-800 border-yellow-200',\n                  accepted: 'bg-blue-100 text-blue-800 border-blue-200',\n                  completed: 'bg-green-100 text-green-800 border-green-200',\n                  rejected: 'bg-red-100 text-red-800 border-red-200'\n                };\n\n                const statusText = {\n                  pending: isRequester ? '대기중' : '응답 필요',\n                  accepted: '수락됨',\n                  completed: '완료',\n                  rejected: '거절됨'\n                };\n\n                return (\n                  <div \n                    key={match.id}\n                    className=\"bg-background rounded-xl p-4 border border-border hover:bg-muted transition-colors\"\n                    data-testid={`match-${match.id}`}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <img \n                        src={getAvatarSrc(opponent?.photoURL, opponent, 120)} \n                        alt={opponent?.username || \"Unknown\"} \n                        className=\"w-12 h-12 rounded-full object-cover\"\n                      />\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <p className=\"font-semibold text-foreground\" data-testid={`text-match-opponent-${match.id}`}>\n                            {opponent?.username || \"Unknown User\"}\n                          </p>\n                          <span className={`px-2 py-1 rounded-full text-xs font-medium border ${statusColors[match.status]}`}>\n                            {statusText[match.status]}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground mb-2\">\n                          NTRP {opponent?.ntrp || '?'} • {match.pointsCost}P\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {new Date(match.createdAt).toLocaleDateString('ko-KR', {\n                            month: 'short',\n                            day: 'numeric',\n                            hour: '2-digit',\n                            minute: '2-digit'\n                          })}\n                        </p>\n                      </div>\n                      {match.status === 'pending' && !isRequester && (\n                        <div className=\"flex space-x-2\">\n                          <button\n                            onClick={() => handleAcceptMatch(match.id)}\n                            className=\"bg-green-600 text-white px-3 py-2 rounded-lg text-sm font-medium hover:bg-green-700 transition-colors\"\n                            data-testid={`button-accept-match-${match.id}`}\n                          >\n                            수락\n                          </button>\n                          <button\n                            onClick={() => handleRejectMatch(match.id)}\n                            className=\"bg-red-600 text-white px-3 py-2 rounded-lg text-sm font-medium hover:bg-red-700 transition-colors\"\n                            data-testid={`button-reject-match-${match.id}`}\n                          >\n                            거절\n                          </button>\n                        </div>\n                      )}\n                      {match.status === 'accepted' && (\n                        <div className=\"flex space-x-2\">\n                          <button\n                            onClick={() => handleOpenChat(match)}\n                            className=\"bg-blue-600 text-white px-3 py-2 rounded-lg text-sm font-medium hover:bg-blue-700 transition-colors\"\n                            data-testid={`button-open-chat-${match.id}`}\n                          >\n                            💬 채팅\n                          </button>\n                          <button\n                            onClick={() => handleCompleteMatch(match)}\n                            className=\"bg-primary text-primary-foreground px-3 py-2 rounded-lg text-sm font-medium hover:bg-primary/90 transition-colors\"\n                            data-testid={`button-complete-match-${match.id}`}\n                          >\n                            경기 완료\n                          </button>\n                        </div>\n                      )}\n                      {match.status === 'completed' && match.result && (\n                        <div className=\"text-center\">\n                          <p className=\"text-xs font-medium\">\n                            {match.result === 'draw' ? '무승부' : \n                             (match.result === 'requester_won' && isRequester) || \n                             (match.result === 'target_won' && !isRequester) ? '승리 🏆' : '패배 😔'}\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Ranking Tab */}\n        <div className={`tab-content ${activeTab === 'ranking-tab' ? 'active' : 'hidden'}`}>\n          {/* 랭킹 탭 헤더 */}\n          <div className=\"bg-gradient-to-r from-primary to-emerald-600 p-4 text-white\">\n            <h2 className=\"text-lg font-bold mb-2\">🏆 랭킹</h2>\n            <div className=\"text-sm opacity-90\">\n              <p>이번 주 <span className=\"font-bold\">우리 동네 최강</span>은?</p>\n              <p>{rankingSubTab === 'club' ? '클럽 간 교류전으로 랭킹을 올려보세요!' : '개인 매칭으로 랭킹을 올려보세요!'}</p>\n            </div>\n          </div>\n\n          {/* 하위 탭 네비게이션 */}\n          <div className=\"bg-background border-b border-border\">\n            <div className=\"flex\">\n              <button\n                onClick={() => setRankingSubTab('individual')}\n                className={`flex-1 py-3 px-4 text-sm font-medium transition-colors relative ${\n                  rankingSubTab === 'individual'\n                    ? 'text-primary border-b-2 border-primary bg-primary/5'\n                    : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n                }`}\n                data-testid=\"button-individual-ranking-tab\"\n              >\n                <i className=\"fas fa-user mr-2\" />\n                개인 랭킹\n              </button>\n              <button\n                onClick={() => setRankingSubTab('club')}\n                className={`flex-1 py-3 px-4 text-sm font-medium transition-colors relative ${\n                  rankingSubTab === 'club'\n                    ? 'text-primary border-b-2 border-primary bg-primary/5'\n                    : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n                }`}\n                data-testid=\"button-club-ranking-tab\"\n              >\n                <i className=\"fas fa-shield-alt mr-2\" />\n                클럽 랭킹\n              </button>\n            </div>\n          </div>\n          {/* 개인 랭킹 */}\n          {rankingSubTab === 'individual' && (\n            <div className=\"p-4\">\n              {rankingLoading ? (\n                <div className=\"flex flex-col items-center justify-center py-12 space-y-4\">\n                  <LoadingSpinner size=\"lg\" />\n                  <p className=\"text-muted-foreground text-sm\">개인 랭킹 정보를 불러오는 중...</p>\n                </div>\n              ) : rankingUsers.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-individual-rankings\">\n                  개인 랭킹 데이터가 없습니다.\n                </p>\n              ) : (\n                <div className=\"space-y-3\">\n                  {rankingUsers.map((user, index) => (\n                    <div \n                      key={user.id}\n                      className={`flex items-center p-4 rounded-xl border transition-colors ${\n                        user.id === appUser?.id \n                          ? 'bg-primary/10 border-primary' \n                          : 'bg-background border-border hover:bg-muted'\n                      }`}\n                      data-testid={`individual-ranking-item-${index + 1}`}\n                    >\n                      <div className=\"flex items-center space-x-3 flex-1\">\n                        <div \n                          className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold leading-none ${\n                            index === 0 ? 'bg-yellow-500 text-white' :\n                            index === 1 ? 'bg-gray-400 text-white' :\n                            index === 2 ? 'bg-amber-600 text-white' :\n                            'bg-muted text-muted-foreground'\n                          }`}\n                          aria-label={`순위 ${index + 1}`}\n                          title={`${index + 1}위`}\n                          data-testid={`individual-rank-badge-${user.id}`}\n                        >\n                          {index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : index + 1}\n                          <span className=\"sr-only\">{index + 1}위</span>\n                        </div>\n                        <img \n                          src={getAvatarSrc(user.photoURL, user, 80)} \n                          alt={user.username} \n                          className=\"w-10 h-10 rounded-full object-cover cursor-pointer hover:opacity-80 transition-opacity\"\n                          onClick={() => handleUserProfileClick(user.id)}\n                        />\n                        <div className=\"flex-1\">\n                          <p \n                            className=\"font-semibold text-foreground cursor-pointer hover:text-primary transition-colors\" \n                            data-testid={`text-individual-rank-username-${index + 1}`}\n                            onClick={() => handleUserProfileClick(user.id)}\n                          >\n                            {user.username}\n                            {user.id === appUser?.id && <span className=\"ml-2 text-xs text-primary font-bold\">(나)</span>}\n                          </p>\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-sm text-muted-foreground\">NTRP {user.ntrp}</span>\n                            <span className={`inline-flex items-center px-1.5 py-0.5 rounded text-xs font-bold ${calculateTier(user.points, user.wins, user.losses).color} ${calculateTier(user.points, user.wins, user.losses).bgColor}`}>\n                              {calculateTier(user.points, user.wins, user.losses).name}\n                            </span>\n                            <span className=\"text-sm text-muted-foreground\">• {user.region}</span>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-bold text-accent\" data-testid={`text-individual-rank-points-${index + 1}`}>{user.points}P</p>\n                          <p className=\"text-xs text-muted-foreground\">{user.wins}승 {user.losses}패</p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* 클럽 랭킹 */}\n          {rankingSubTab === 'club' && (\n            <div className=\"p-4\">\n              <div className=\"text-center py-12 space-y-4\">\n                <div className=\"w-16 h-16 mx-auto bg-muted rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-shield-alt text-2xl text-muted-foreground\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-foreground mb-2\" data-testid=\"text-club-ranking-coming-soon\">클럽 랭킹 준비 중</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    클럽 간 교류전 기능이 완성되면<br />\n                    클럽 랭킹을 확인할 수 있습니다.\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Community Tab */}\n        <div className={`tab-content ${activeTab === 'community-tab' ? 'active' : 'hidden'}`}>\n          <div className=\"p-4 border-b border-border bg-background\">\n            <button \n              onClick={handleNewPost}\n              className=\"w-full bg-primary text-primary-foreground font-semibold py-3 rounded-xl hover:bg-primary/90 transition-colors\" \n              data-testid=\"button-new-post\"\n            >\n              <i className=\"fas fa-pen mr-2\" />\n              새 글 작성하기\n            </button>\n          </div>\n          <div className=\"p-4\">\n            {postsLoading ? (\n              <div className=\"flex flex-col items-center justify-center py-12 space-y-4\">\n                <LoadingSpinner size=\"lg\" />\n                <p className=\"text-muted-foreground text-sm\">커뮤니티 게시글을 불러오는 중...</p>\n              </div>\n            ) : posts.length === 0 ? (\n              <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-posts\">\n                아직 커뮤니티 게시글이 없습니다.<br />\n                첫 번째 게시글을 작성해보세요!\n              </p>\n            ) : (\n              <div className=\"space-y-4\">\n                {posts.map((post) => {\n                  // 작성자 정보 찾기\n                  const author = rankingUsers.find(user => user.id === post.authorId) || \n                    players.find(user => user.id === post.authorId) ||\n                    (post.authorId === appUser?.id ? appUser : null);\n                  \n                  return (\n                    <div \n                      key={post.id}\n                      className=\"bg-background rounded-xl p-4 border border-border hover:bg-muted transition-colors\"\n                      data-testid={`post-${post.id}`}\n                    >\n                      {/* Post Header */}\n                      <div className=\"flex items-center space-x-3 mb-3\">\n                        <img \n                          src={getAvatarSrc(author?.photoURL, author, 80)} \n                          alt={author?.username || \"Unknown\"} \n                          className=\"w-10 h-10 rounded-full object-cover cursor-pointer hover:opacity-80 transition-opacity\"\n                          onClick={() => author?.id && handleUserProfileClick(author.id)}\n                        />\n                        <div className=\"flex-1\">\n                          <p \n                            className=\"font-semibold text-foreground cursor-pointer hover:text-primary transition-colors\" \n                            data-testid={`text-post-author-${post.id}`}\n                            onClick={() => author?.id && handleUserProfileClick(author.id)}\n                          >\n                            {author?.username || \"Unknown User\"}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {post.createdAt && new Date(post.createdAt).toLocaleDateString('ko-KR', {\n                              month: 'short',\n                              day: 'numeric',\n                              hour: '2-digit',\n                              minute: '2-digit'\n                            })}\n                          </p>\n                        </div>\n                        {/* Delete button for post author */}\n                        {appUser?.id === post.authorId && (\n                          <button\n                            onClick={() => handleDeletePost(post.id, post.authorId)}\n                            className=\"text-red-500 hover:text-red-700 p-2 rounded-full hover:bg-red-50 transition-colors\"\n                            data-testid={`button-delete-post-${post.id}`}\n                            title=\"게시글 삭제\"\n                          >\n                            <i className=\"fas fa-trash text-sm\" />\n                          </button>\n                        )}\n                      </div>\n                      \n                      {/* Post Content */}\n                      <div className=\"mb-3\">\n                        <h3 className=\"font-bold text-foreground mb-2\" data-testid={`text-post-title-${post.id}`}>\n                          {post.title}\n                        </h3>\n                        <p className=\"text-foreground whitespace-pre-wrap\" data-testid={`text-post-content-${post.id}`}>\n                          {post.content}\n                        </p>\n                      </div>\n                      \n                      {/* Post Actions */}\n                      <div className=\"flex items-center space-x-4 pt-2 border-t border-border\">\n                        <button \n                          onClick={() => handleToggleLike(post.id)}\n                          className={`flex items-center space-x-1 transition-colors ${\n                            (Array.isArray(post.likes) ? post.likes : []).includes(appUser?.id || '') \n                              ? 'text-red-500 hover:text-red-600' \n                              : 'text-muted-foreground hover:text-red-500'\n                          }`}\n                          data-testid={`button-like-post-${post.id}`}\n                        >\n                          <i className={`${(Array.isArray(post.likes) ? post.likes : []).includes(appUser?.id || '') ? 'fas' : 'far'} fa-heart`} />\n                          <span className=\"text-sm\" data-testid={`text-post-likes-${post.id}`}>\n                            {Array.isArray(post.likes) ? post.likes.length : (typeof post.likes === 'number' ? post.likes : 0)}\n                          </span>\n                        </button>\n                        <button \n                          onClick={() => toggleCommentSection(post.id)}\n                          className=\"flex items-center space-x-1 text-muted-foreground hover:text-foreground transition-colors\"\n                          data-testid={`button-comment-post-${post.id}`}\n                        >\n                          <i className=\"far fa-comment\" />\n                          <span className=\"text-sm\">댓글 {(post.comments || []).length}</span>\n                        </button>\n                      </div>\n\n                      {/* Comments Section */}\n                      {showComments[post.id] && (\n                        <div className=\"mt-4 pt-4 border-t border-border\">\n                          {/* Existing Comments */}\n                          {(post.comments || []).length > 0 && (\n                            <div className=\"space-y-3 mb-4\">\n                              {post.comments.map((comment) => {\n                                const commentAuthor = rankingUsers.find(user => user.id === comment.authorId) || \n                                  players.find(user => user.id === comment.authorId) ||\n                                  (comment.authorId === appUser?.id ? appUser : null);\n                                \n                                return (\n                                  <div key={comment.id} className=\"flex space-x-3\" data-testid={`comment-${comment.id}`}>\n                                    <img \n                                      src={getAvatarSrc(commentAuthor?.photoURL, commentAuthor, 64)} \n                                      alt={commentAuthor?.username || \"Unknown\"} \n                                      className=\"w-8 h-8 rounded-full object-cover\"\n                                    />\n                                    <div className=\"flex-1\">\n                                      <div className=\"bg-muted rounded-lg px-3 py-2\">\n                                        <p className=\"font-semibold text-sm text-foreground\">\n                                          {commentAuthor?.username || \"Unknown User\"}\n                                        </p>\n                                        <p className=\"text-sm text-foreground\" data-testid={`text-comment-content-${comment.id}`}>\n                                          {comment.content}\n                                        </p>\n                                      </div>\n                                      <p className=\"text-xs text-muted-foreground mt-1 ml-3\">\n                                        {comment.createdAt && (comment.createdAt instanceof Date ? comment.createdAt : new Date(comment.createdAt)).toLocaleDateString('ko-KR', {\n                                          month: 'short',\n                                          day: 'numeric',\n                                          hour: '2-digit',\n                                          minute: '2-digit'\n                                        })}\n                                      </p>\n                                    </div>\n                                  </div>\n                                );\n                              })}\n                            </div>\n                          )}\n\n                          {/* Comment Input */}\n                          <div className=\"flex space-x-3\">\n                            <img \n                              src={getAvatarSrc(appUser?.photoURL, appUser, 64)} \n                              alt={appUser?.username || \"User\"} \n                              className=\"w-8 h-8 rounded-full object-cover\"\n                            />\n                            <div className=\"flex-1 flex space-x-2\">\n                              <input\n                                type=\"text\"\n                                value={commentInputs[post.id] || ''}\n                                onChange={(e) => updateCommentInput(post.id, e.target.value)}\n                                onKeyPress={(e) => {\n                                  if (e.key === 'Enter' && !e.shiftKey) {\n                                    e.preventDefault();\n                                    handleAddComment(post.id);\n                                  }\n                                }}\n                                placeholder=\"댓글을 입력하세요...\"\n                                className=\"flex-1 px-3 py-2 bg-muted border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary text-sm\"\n                                data-testid={`input-comment-${post.id}`}\n                              />\n                              <button\n                                onClick={() => handleAddComment(post.id)}\n                                disabled={!commentInputs[post.id]?.trim()}\n                                className=\"px-3 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed text-sm\"\n                                data-testid={`button-submit-comment-${post.id}`}\n                              >\n                                <i className=\"fas fa-paper-plane\" />\n                              </button>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Profile Tab */}\n        {/* My Info Tab */}\n        <div className={`tab-content ${activeTab === 'my-info-tab' ? 'active' : 'hidden'}`}>\n          {/* Profile Header */}\n          <div className=\"bg-gradient-to-r from-primary to-emerald-600 p-6 text-white\">\n            <div className=\"flex items-center space-x-4\">\n              <img \n                src={getAvatarSrc(appUser.photoURL, appUser, 160)} \n                alt=\"User profile\" \n                className=\"w-20 h-20 rounded-full object-cover border-4 border-white shadow-lg\"\n                data-testid=\"img-user-profile\"\n              />\n              <div className=\"flex-1\">\n                <h2 className=\"text-xl font-bold\" data-testid=\"text-user-name\">{appUser.username}</h2>\n                <p className=\"opacity-90\" data-testid=\"text-user-info\">NTRP {appUser.ntrp} • {appUser.region}</p>\n                <div className=\"flex items-center space-x-4 mt-2 text-sm\">\n                  <span data-testid=\"text-user-record\">{appUser.wins}승 {appUser.losses}패</span>\n                  <span data-testid=\"text-user-winrate\">\n                    승률 {appUser.wins + appUser.losses > 0 ? Math.round((appUser.wins / (appUser.wins + appUser.losses)) * 100) : 0}%\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Admin Promotion (Development/Test Mode) */}\n          <div className=\"p-4\">\n            <AdminPromotion />\n          </div>\n\n          {/* Tier Progress Card */}\n          <div className=\"p-4\">\n            <TierProgressCard user={appUser} />\n          </div>\n\n          {/* Stats Cards */}\n          <div className=\"px-4 grid grid-cols-2 gap-4\">\n            <div className=\"bg-background rounded-xl p-4 text-center border border-border\">\n              <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-user-points-display\">{appUser.points}</div>\n              <div className=\"text-xs text-muted-foreground\">보유 포인트</div>\n            </div>\n            <div className=\"bg-background rounded-xl p-4 text-center border border-border\">\n              <div className=\"text-2xl font-bold text-accent\">-</div>\n              <div className=\"text-xs text-muted-foreground\">이번 시즌 순위</div>\n            </div>\n          </div>\n\n          {/* Personal Match Records Summary */}\n          <div className=\"p-4\">\n            <div className=\"bg-background rounded-xl border border-border p-4\">\n              <h3 className=\"font-semibold mb-4 flex items-center\">\n                <i className=\"fas fa-chart-pie mr-2 text-primary\" />\n                개인 전적 요약\n              </h3>\n              \n              <div className=\"grid grid-cols-3 gap-4 mb-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-bold text-green-600\" data-testid=\"text-individual-wins\">\n                    {allMatches.filter(match => \n                      (match.requesterId === appUser.id && match.result === 'requester_won') ||\n                      (match.targetId === appUser.id && match.result === 'target_won')\n                    ).length}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">개인 매칭 승</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-bold text-blue-600\" data-testid=\"text-club-meetings-attended\">\n                    {clubMeetingsAttended}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">클럽 모임 참여</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-bold text-amber-600\" data-testid=\"text-club-matches-wins\">\n                    {clubMatchesWins}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">교류전 승</div>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-bold text-red-600\" data-testid=\"text-individual-losses\">\n                    {allMatches.filter(match => \n                      (match.requesterId === appUser.id && match.result === 'target_won') ||\n                      (match.targetId === appUser.id && match.result === 'requester_won')\n                    ).length}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">개인 매칭 패</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-bold text-gray-600\" data-testid=\"text-club-meetings-missed\">\n                    {clubMeetingsMissed}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">클럽 모임 불참</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-bold text-gray-600\" data-testid=\"text-club-matches-losses\">\n                    {clubMatchesLosses}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">교류전 패</div>\n                </div>\n              </div>\n\n              <div className=\"mt-4 pt-4 border-t border-border\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">이번 달 활동</span>\n                  <div className=\"flex space-x-4\">\n                    {matchesLoading || clubStatsLoading ? (\n                      <span>📊 로딩 중...</span>\n                    ) : (\n                      <>\n                        <span>📊 총 {(() => {\n                          const now = new Date();\n                          const thisMonthMatches = allMatches.filter(match => {\n                            if (match.status !== 'completed' || !match.completedAt) return false;\n                            const completedDate = new Date(match.completedAt);\n                            return completedDate.getMonth() === now.getMonth() && \n                                   completedDate.getFullYear() === now.getFullYear();\n                          });\n                          return thisMonthMatches.length;\n                        })()}경기</span>\n                        <span>🏆 승률 {\n                          (() => {\n                            const now = new Date();\n                            const thisMonthMatches = allMatches.filter(match => {\n                              if (match.status !== 'completed' || !match.completedAt) return false;\n                              const completedDate = new Date(match.completedAt);\n                              return completedDate.getMonth() === now.getMonth() && \n                                     completedDate.getFullYear() === now.getFullYear();\n                            });\n                            \n                            if (thisMonthMatches.length === 0) return 0;\n                            \n                            const wins = thisMonthMatches.filter(match => \n                              (match.requesterId === appUser.id && match.result === 'requester_won') ||\n                              (match.targetId === appUser.id && match.result === 'target_won')\n                            ).length;\n                            \n                            return Math.round((wins / thisMonthMatches.length) * 100);\n                          })()\n                        }%</span>\n                      </>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Menu Items */}\n          <div className=\"p-4 space-y-2\">\n            <button \n              onClick={() => setShowProfileEditModal(true)}\n              className=\"w-full text-left p-4 bg-background rounded-xl border border-border flex justify-between items-center hover:bg-muted transition-colors\" \n              data-testid=\"button-edit-profile\"\n            >\n              <span className=\"flex items-center\">\n                <i className=\"fas fa-user-edit w-6 mr-3 text-primary\" />\n                프로필 수정\n              </span>\n              <i className=\"fas fa-chevron-right text-muted-foreground\" />\n            </button>\n            \n            <button \n              onClick={() => setShowMatchHistoryModal(true)}\n              className=\"w-full text-left p-4 bg-background rounded-xl border border-border flex justify-between items-center hover:bg-muted transition-colors\" \n              data-testid=\"button-match-history\"\n            >\n              <span className=\"flex items-center\">\n                <i className=\"fas fa-history w-6 mr-3 text-green-600\" />\n                경기 기록\n              </span>\n              <i className=\"fas fa-chevron-right text-muted-foreground\" />\n            </button>\n            \n            <button \n              onClick={() => setShowPointChargeModal(true)}\n              className=\"w-full text-left p-4 bg-background rounded-xl border border-border flex justify-between items-center hover:bg-muted transition-colors\" \n              data-testid=\"button-charge-points\"\n            >\n              <span className=\"flex items-center\">\n                <i className=\"fas fa-coins w-6 mr-3 text-accent\" />\n                포인트 충전\n              </span>\n              <i className=\"fas fa-chevron-right text-muted-foreground\" />\n            </button>\n            \n            <button className=\"w-full text-left p-4 bg-background rounded-xl border border-border flex justify-between items-center hover:bg-muted transition-colors\" data-testid=\"button-settings\">\n              <span className=\"flex items-center\">\n                <i className=\"fas fa-cog w-6 mr-3 text-muted-foreground\" />\n                설정\n              </span>\n              <i className=\"fas fa-chevron-right text-muted-foreground\" />\n            </button>\n            \n            <button \n              onClick={() => setShowFeedbackModal(true)}\n              className=\"w-full text-left p-4 bg-background rounded-xl border border-border flex justify-between items-center hover:bg-muted transition-colors\" \n              data-testid=\"button-feedback\"\n            >\n              <span className=\"flex items-center\">\n                <i className=\"fas fa-lightbulb w-6 mr-3 text-green-600\" />\n                서비스 개선 제안\n              </span>\n              <i className=\"fas fa-chevron-right text-muted-foreground\" />\n            </button>\n\n            {/* Admin Panel Button - Only visible to admin users */}\n            {appUser.role === 'admin' && (\n              <button \n                onClick={() => setShowAdminPanel(true)}\n                className=\"w-full text-left p-4 bg-background rounded-xl border border-border flex justify-between items-center hover:bg-muted transition-colors\" \n                data-testid=\"button-admin-panel\"\n              >\n                <span className=\"flex items-center\">\n                  <i className=\"fas fa-shield-alt w-6 mr-3 text-orange-500\" />\n                  관리자 패널\n                </span>\n                <i className=\"fas fa-chevron-right text-muted-foreground\" />\n              </button>\n            )}\n            \n            <button \n              onClick={handleLogout}\n              className=\"w-full text-left p-4 bg-background rounded-xl border border-border flex justify-between items-center hover:bg-muted transition-colors\" \n              data-testid=\"button-logout\"\n            >\n              <span className=\"flex items-center\">\n                <i className=\"fas fa-sign-out-alt w-6 mr-3 text-destructive\" />\n                로그아웃\n              </span>\n              <i className=\"fas fa-chevron-right text-muted-foreground\" />\n            </button>\n          </div>\n        </div>\n      </main>\n\n      <BottomNavigation activeTab={activeTab} onTabChange={handleTabChange} />\n      \n      {/* Chat Screen - Full overlay when active */}\n      {showChatScreen && chatOpponent && (\n        <div className=\"fixed inset-0 z-50\">\n          <ChatScreen\n            matchId={isNewChatMode ? undefined : chatMatchId}\n            chatRoomId={isNewChatMode ? chatMatchId : undefined}\n            opponent={chatOpponent}\n            onBack={handleCloseChatScreen}\n          />\n        </div>\n      )}\n\n      {/* Admin Panel - Full screen overlay for admin users */}\n      {showAdminPanel && (\n        <div className=\"fixed inset-0 z-50\">\n          <div className=\"flex h-full\">\n            <button\n              onClick={() => setShowAdminPanel(false)}\n              className=\"absolute top-4 left-4 z-10 p-2 bg-white rounded-full shadow-lg hover:bg-gray-50 transition-colors\"\n              data-testid=\"button-close-admin\"\n            >\n              <i className=\"fas fa-arrow-left text-gray-600\" />\n            </button>\n            <AdminPanel />\n          </div>\n        </div>\n      )}\n      \n      {/* Post Creation Modal */}\n      <PostCreateModal\n        isOpen={showPostModal}\n        onClose={handleClosePostModal}\n        onPostCreated={handlePostCreated}\n      />\n\n      {/* Match Result Modal */}\n      <MatchResultModal\n        isOpen={showMatchResultModal}\n        onClose={handleCloseMatchResultModal}\n        match={selectedMatch}\n        currentUser={appUser!}\n        opponent={selectedMatch ? \n          (rankingUsers.find(u => u.id === (selectedMatch.requesterId === appUser?.id ? selectedMatch.targetId : selectedMatch.requesterId)) || \n           players.find(u => u.id === (selectedMatch.requesterId === appUser?.id ? selectedMatch.targetId : selectedMatch.requesterId)) || null) : null\n        }\n      />\n\n      {/* Match Request Modal */}\n      <MatchRequestModal\n        isOpen={showMatchRequestModal}\n        onClose={() => {\n          setShowMatchRequestModal(false);\n          setSelectedPlayer(null);\n          setIsMatchRequesting(false);\n        }}\n        onConfirm={handleConfirmMatchRequest}\n        targetUser={selectedPlayer}\n        currentUserPoints={appUser?.points || 0}\n        isLoading={isMatchRequesting}\n      />\n\n      {/* Feedback Modal */}\n      <FeedbackModal\n        isOpen={showFeedbackModal}\n        onClose={() => setShowFeedbackModal(false)}\n      />\n\n      {/* Profile Modals */}\n      <ProfileEditModal \n        isOpen={showProfileEditModal} \n        onClose={() => setShowProfileEditModal(false)} \n      />\n\n      <MatchHistoryModal \n        isOpen={showMatchHistoryModal} \n        onClose={() => setShowMatchHistoryModal(false)} \n      />\n\n      <PointChargeModal \n        isOpen={showPointChargeModal} \n        onClose={() => setShowPointChargeModal(false)} \n      />\n\n      <ShopModal \n        isOpen={showShopModal} \n        onClose={() => setShowShopModal(false)} \n      />\n\n      {/* User Profile Modal */}\n      <UserProfileModal \n        isOpen={showUserProfileModal} \n        onClose={handleCloseUserProfileModal}\n        userId={selectedUserId}\n        onStartChat={handleStartChat}\n      />\n    </div>\n  );\n}\n","size_bytes":74482},"client/src/components/PlayerCard.tsx":{"content":"import { User } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { calculateTier } from \"@/utils/tierCalculator\";\nimport { getAvatarSrc } from \"@/utils/avatar\";\n\ninterface PlayerCardProps {\n  player: User;\n  onMatchRequest: (playerId: string) => void;\n}\n\nexport default function PlayerCard({ player, onMatchRequest }: PlayerCardProps) {\n  const handleMatchRequest = () => {\n    onMatchRequest(player.id);\n  };\n  \n  const tier = calculateTier(player.points, player.wins, player.losses);\n\n  return (\n    <div className=\"bg-background rounded-xl shadow-sm match-card border border-border overflow-hidden\" data-testid={`card-player-${player.id}`}>\n      <div className=\"p-4\">\n        <div className=\"flex items-start space-x-4\">\n          {/* Profile image with online indicator */}\n          <div className=\"relative\">\n            <img \n              src={getAvatarSrc(player.photoURL, player, 150)} \n              alt={`${player.username} profile`}\n              className=\"w-16 h-16 rounded-full object-cover border-2 border-border\"\n              data-testid={`img-player-${player.id}`}\n            />\n            <div className=\"absolute -bottom-1 -right-1 w-5 h-5 bg-green-500 rounded-full border-2 border-white\" />\n          </div>\n          \n          <div className=\"flex-1\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"font-bold text-foreground\" data-testid={`text-player-name-${player.id}`}>\n                  {player.username}\n                </h3>\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-primary/10 text-primary\">\n                    NTRP {player.ntrp}\n                  </span>\n                  <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-bold ${tier.color} ${tier.bgColor}`} data-testid={`text-player-tier-${player.id}`}>\n                    <i className=\"fas fa-medal mr-1\" />\n                    {tier.name}\n                  </span>\n                  <span className=\"text-xs text-muted-foreground\">{player.age}세</span>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-sm font-medium text-muted-foreground\">근처</div>\n                <div className=\"flex text-accent text-xs\">\n                  <i className=\"fas fa-star\" />\n                  <span className=\"ml-1\">4.8</span>\n                </div>\n              </div>\n            </div>\n            \n            {player.bio && (\n              <p className=\"text-sm text-muted-foreground mt-2 line-clamp-2\" data-testid={`text-player-bio-${player.id}`}>\n                {player.bio}\n              </p>\n            )}\n            \n            <div className=\"flex items-center justify-between mt-3\">\n              <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n                <i className=\"fas fa-map-marker-alt\" />\n                <span data-testid={`text-player-region-${player.id}`}>{player.region}</span>\n                <i className=\"fas fa-clock ml-2\" />\n                <span data-testid={`text-player-times-${player.id}`}>\n                  {player.availableTimes.slice(0, 2).join(', ')}\n                </span>\n              </div>\n              <Button\n                onClick={handleMatchRequest}\n                className=\"bg-primary text-primary-foreground px-4 py-2 rounded-lg text-sm font-medium hover:bg-primary/90 transition-colors\"\n                data-testid={`button-match-request-${player.id}`}\n              >\n                매칭 신청\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3810},"client/src/components/ProfileSetupScreen.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useFirestore } from \"@/hooks/use-firebase\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getAvatarSrc } from \"@/utils/avatar\";\nimport { HelpCircle, Info, Check, Camera } from \"lucide-react\";\nimport LoadingSpinner from \"./LoadingSpinner\";\n\ninterface ProfileSetupScreenProps {\n  onComplete: () => void;\n}\n\nexport default function ProfileSetupScreen({ onComplete }: ProfileSetupScreenProps) {\n  const { user, updateAppUser } = useAuth();\n  const { uploadFile } = useFirestore();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [profilePic, setProfilePic] = useState<File | null>(null);\n  const [previewUrl, setPreviewUrl] = useState(user?.photoURL || getAvatarSrc(null, { id: user?.uid || undefined, username: user?.displayName || undefined, email: user?.email || undefined }, 300));\n  const [showNtrpGuide, setShowNtrpGuide] = useState(false);\n\n  const [formData, setFormData] = useState({\n    username: user?.displayName || '',\n    ntrp: '3.5',\n    age: '',\n    region: '',\n    bio: '',\n    availableTimes: [] as string[],\n  });\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setProfilePic(file);\n      const url = URL.createObjectURL(file);\n      setPreviewUrl(url);\n    }\n  };\n\n  const handleTimeToggle = (time: string) => {\n    setFormData(prev => ({\n      ...prev,\n      availableTimes: prev.availableTimes.includes(time)\n        ? prev.availableTimes.filter(t => t !== time)\n        : [...prev.availableTimes, time]\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!user) return;\n\n    setLoading(true);\n    try {\n      let photoURL = user.photoURL;\n\n      if (profilePic) {\n        photoURL = await uploadFile(profilePic, `profile_pics/${user.uid}/${profilePic.name}`);\n      }\n\n      const userData = {\n        id: user.uid,\n        email: user.email!,\n        username: formData.username,\n        ntrp: formData.ntrp,\n        age: formData.age,\n        region: formData.region,\n        bio: formData.bio,\n        availableTimes: formData.availableTimes,\n        photoURL,\n        points: 100,\n        wins: 0,\n        losses: 0,\n        mannerScore: 5, // 기본 매너 점수\n        isProfileComplete: true, // 프로필 설정 완료\n      };\n\n      await updateAppUser(userData);\n      \n      toast({\n        title: \"프로필 설정 완료\",\n        description: \"이제 클럽 활동을 시작할 수 있습니다!\",\n      });\n\n      onComplete();\n    } catch (error) {\n      console.error(\"Profile setup error:\", error);\n      toast({\n        title: \"오류 발생\",\n        description: \"프로필 설정 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const timeOptions = ['평일 오전', '평일 오후', '주말 오전', '주말 오후'];\n\n  const ntrpGuides = {\n    '2.5': '이제 막 공을 맞히기 시작했으며, 공이 어디로 갈지 예측하는 법을 배우는 단계입니다.',\n    '3.0': '중간 속도의 공을 꽤 일관적으로 칠 수 있지만, 아직 다양한 기술과 방향 제어는 부족합니다.',\n    '3.5': '안정적인 스트로크와 방향 제어가 가능하며, 네트 플레이에도 자신감이 붙는 단계입니다.',\n    '4.0': '거의 모든 스트로크를 안정적으로 구사하며, 경기의 흐름을 읽고 전략을 사용할 줄 압니다.',\n    '4.5': '강력한 서브와 스트로크를 가지며, 상대방을 압도할 수 있는 무기를 가진 상급 동호인입니다.',\n    '5.0': '모든 기술을 완벽하게 구사하며, 토너먼트 수준의 실력을 가진 준전문가급 선수입니다.'\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col overflow-y-auto\" data-testid=\"profile-setup-screen\">\n      <div className=\"bg-gradient-to-r from-primary to-emerald-600 px-6 pt-12 pb-8\">\n        <h1 className=\"text-2xl font-bold text-white mb-2\">프로필 설정</h1>\n        <p className=\"text-emerald-100\">매칭을 위한 기본 정보를 입력해주세요</p>\n      </div>\n      \n      <div className=\"flex-1 p-6 -mt-4 bg-background rounded-t-3xl\">\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Profile Picture Section */}\n          <div className=\"flex flex-col items-center -mt-12\">\n            <div className=\"relative\">\n              <img \n                src={previewUrl}\n                alt=\"Profile picture\" \n                className=\"w-24 h-24 rounded-full object-cover border-4 border-white shadow-lg\"\n                data-testid=\"img-profile-preview\"\n              />\n              <label htmlFor=\"profile-pic\" className=\"absolute -bottom-2 -right-2 bg-primary text-white p-2 rounded-full shadow-lg hover:bg-primary/90 transition-colors cursor-pointer\">\n                <Camera className=\"w-4 h-4\" />\n              </label>\n            </div>\n            <Label htmlFor=\"profile-pic\" className=\"mt-3 text-sm font-medium text-primary cursor-pointer hover:underline\">\n              사진 변경\n            </Label>\n            <Input\n              type=\"file\"\n              id=\"profile-pic\"\n              className=\"hidden\"\n              accept=\"image/*\"\n              onChange={handleFileChange}\n              data-testid=\"input-profile-pic\"\n            />\n          </div>\n\n          {/* Basic Info */}\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"username\" className=\"block text-sm font-semibold text-foreground mb-2\">\n                닉네임\n              </Label>\n              <Input\n                type=\"text\"\n                id=\"username\"\n                placeholder=\"매치에서 사용할 닉네임\"\n                value={formData.username}\n                onChange={(e) => setFormData(prev => ({ ...prev, username: e.target.value }))}\n                className=\"w-full p-4 border border-input rounded-xl bg-background focus:ring-2 focus:ring-ring focus:border-transparent transition-all\"\n                required\n                data-testid=\"input-username\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Label htmlFor=\"ntrp\" className=\"text-sm font-semibold text-foreground\">\n                    NTRP\n                  </Label>\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setShowNtrpGuide(true)}\n                    className=\"w-6 h-6 p-0 rounded-full bg-muted hover:bg-muted/80 text-muted-foreground hover:text-foreground\"\n                    data-testid=\"button-ntrp-guide\"\n                  >\n                    <HelpCircle className=\"w-3 h-3\" />\n                  </Button>\n                </div>\n                <select\n                  id=\"ntrp\"\n                  value={formData.ntrp}\n                  onChange={(e) => setFormData(prev => ({ ...prev, ntrp: e.target.value }))}\n                  className=\"w-full p-4 border border-input rounded-xl bg-background focus:ring-2 focus:ring-ring focus:border-transparent\"\n                  required\n                  data-testid=\"select-ntrp\"\n                >\n                  <option value=\"2.5\">2.5 - 초급</option>\n                  <option value=\"3.0\">3.0 - 초중급</option>\n                  <option value=\"3.5\">3.5 - 중급</option>\n                  <option value=\"4.0\">4.0 - 중상급</option>\n                  <option value=\"4.5\">4.5 - 상급</option>\n                  <option value=\"5.0\">5.0 - 고급</option>\n                </select>\n              </div>\n              <div>\n                <Label htmlFor=\"age\" className=\"block text-sm font-semibold text-foreground mb-2\">\n                  연령대\n                </Label>\n                <select\n                  id=\"age\"\n                  value={formData.age}\n                  onChange={(e) => setFormData(prev => ({ ...prev, age: e.target.value }))}\n                  className=\"w-full p-4 border border-input rounded-xl bg-background focus:ring-2 focus:ring-ring focus:border-transparent\"\n                  required\n                  data-testid=\"select-age\"\n                >\n                  <option value=\"\">선택하세요</option>\n                  <option value=\"20s\">20대</option>\n                  <option value=\"30s\">30대</option>\n                  <option value=\"40s\">40대</option>\n                  <option value=\"50s\">50대 이상</option>\n                </select>\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"region\" className=\"block text-sm font-semibold text-foreground mb-2\">\n                주요 활동 지역\n              </Label>\n              <Input\n                type=\"text\"\n                id=\"region\"\n                placeholder=\"예: 서울 강남구\"\n                value={formData.region}\n                onChange={(e) => setFormData(prev => ({ ...prev, region: e.target.value }))}\n                className=\"w-full p-4 border border-input rounded-xl bg-background focus:ring-2 focus:ring-ring focus:border-transparent transition-all\"\n                required\n                data-testid=\"input-region\"\n              />\n            </div>\n\n            {/* Available Times */}\n            <div>\n              <Label className=\"block text-sm font-semibold text-foreground mb-3\">\n                선호 활동 시간 (복수선택 가능)\n              </Label>\n              <div className=\"grid grid-cols-2 gap-3\">\n                {timeOptions.map((time) => (\n                  <label\n                    key={time}\n                    className={`flex items-center space-x-3 p-4 border border-input rounded-xl cursor-pointer hover:bg-muted transition-colors ${\n                      formData.availableTimes.includes(time) \n                        ? 'bg-primary/10 border-primary' \n                        : ''\n                    }`}\n                    data-testid={`label-time-${time.replace(/\\s+/g, '-')}`}\n                  >\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.availableTimes.includes(time)}\n                      onChange={() => handleTimeToggle(time)}\n                      className=\"w-4 h-4 text-primary rounded focus:ring-ring\"\n                      data-testid={`checkbox-time-${time.replace(/\\s+/g, '-')}`}\n                    />\n                    <span className=\"text-sm font-medium\">{time}</span>\n                  </label>\n                ))}\n              </div>\n            </div>\n\n            {/* Bio Section */}\n            <div>\n              <Label htmlFor=\"bio\" className=\"block text-sm font-semibold text-foreground mb-2\">\n                자기소개 (선택)\n              </Label>\n              <Textarea\n                id=\"bio\"\n                rows={3}\n                placeholder=\"테니스 경험이나 매칭 시 희망사항을 간단히 적어주세요\"\n                value={formData.bio}\n                onChange={(e) => setFormData(prev => ({ ...prev, bio: e.target.value }))}\n                className=\"w-full p-4 border border-input rounded-xl bg-background focus:ring-2 focus:ring-ring focus:border-transparent transition-all resize-none\"\n                data-testid=\"textarea-bio\"\n              />\n            </div>\n          </div>\n\n          <Button\n            type=\"submit\"\n            disabled={loading}\n            className=\"w-full bg-primary text-primary-foreground font-bold py-4 rounded-xl hover:bg-primary/90 transition-all duration-200 shadow-lg hover:shadow-xl\"\n            data-testid=\"button-save-profile\"\n          >\n            {loading ? (\n              <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n            ) : (\n              <Check className=\"w-4 h-4 mr-2\" />\n            )}\n            프로필 저장하고 시작하기\n          </Button>\n        </form>\n      </div>\n\n      {/* NTRP 가이드 모달 */}\n      <Dialog open={showNtrpGuide} onOpenChange={setShowNtrpGuide}>\n        <DialogContent className=\"max-w-lg\" data-testid=\"modal-ntrp-guide\">\n          <DialogHeader>\n            <DialogTitle className=\"text-lg font-bold text-foreground flex items-center gap-2\">\n              <Info className=\"w-5 h-5 text-primary\" />\n              NTRP 레벨 가이드\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 mt-4\">\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              자신의 실력에 맞는 NTRP 레벨을 선택해주세요. 정확한 레벨 선택은 적절한 상대와의 매칭에 도움이 됩니다.\n            </p>\n            <div className=\"space-y-3\">\n              {Object.entries(ntrpGuides).map(([level, description]) => (\n                <div key={level} className=\"p-3 bg-muted rounded-lg\" data-testid={`ntrp-guide-${level}`}>\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-bold bg-primary text-primary-foreground\">\n                      NTRP {level}\n                    </span>\n                    <span className=\"text-sm font-medium text-foreground\">\n                      {level === '2.5' ? '초급' : \n                       level === '3.0' ? '초중급' : \n                       level === '3.5' ? '중급' : \n                       level === '4.0' ? '중상급' : \n                       level === '4.5' ? '상급' : '고급'}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    {description}\n                  </p>\n                </div>\n              ))}\n            </div>\n            <div className=\"flex justify-end pt-2\">\n              <Button \n                onClick={() => setShowNtrpGuide(false)}\n                className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                data-testid=\"button-close-ntrp-guide\"\n              >\n                확인\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":14689},"client/src/components/SplashScreen.tsx":{"content":"import { useEffect, useState } from \"react\";\n\ninterface SplashScreenProps {\n  onComplete: () => void;\n}\n\nexport default function SplashScreen({ onComplete }: SplashScreenProps) {\n  const [isVisible, setIsVisible] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsVisible(false);\n      setTimeout(onComplete, 300); // Allow fade out animation\n    }, 2000);\n\n    return () => clearTimeout(timer);\n  }, [onComplete]);\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-gradient-to-br from-primary to-emerald-600 flex items-center justify-center z-50\" data-testid=\"splash-screen\">\n      {/* Tennis court background pattern */}\n      <div className=\"absolute inset-0 opacity-10\">\n        <div className=\"grid grid-cols-8 gap-4 h-full p-8\">\n          {Array.from({ length: 8 }).map((_, i) => (\n            <div key={i} className=\"bg-white rounded\" />\n          ))}\n        </div>\n      </div>\n      \n      <div className=\"text-center z-10\">\n        <div className=\"text-8xl mb-6\">🎾</div>\n        <h1 className=\"text-5xl font-bold text-white mb-4\">클럽 랭크</h1>\n        <p className=\"text-emerald-100 text-lg font-medium\">데이터로 증명하는 우리 동네 최강 클럽</p>\n        <div className=\"mt-8\">\n          <div className=\"loading-spinner mx-auto border-white border-t-emerald-200\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1413},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\nimport { User } from \"firebase/auth\";\nimport { onAuthStateChanged, signInWithPopup, signInWithRedirect, signOut, getRedirectResult } from \"firebase/auth\";\nimport { doc, getDoc, setDoc } from \"firebase/firestore\";\nimport { auth, db, googleProvider } from \"@/lib/firebase\";\nimport { User as AppUser } from \"@shared/schema\";\n\ninterface AuthContextType {\n  user: User | null;\n  appUser: AppUser | null;\n  loading: boolean;\n  signInWithGoogle: () => Promise<void>;\n  logout: () => Promise<void>;\n  updateAppUser: (userData: Partial<AppUser>) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [appUser, setAppUser] = useState<AppUser | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const signInWithGoogle = async () => {\n    try {\n      console.log(\"🚀 Starting Google sign-in...\");\n      console.log(\"🌐 Current domain:\", window.location.origin);\n      \n      // Try popup first (works better in published environments)\n      try {\n        console.log(\"🔥 Attempting popup sign-in...\");\n        const result = await signInWithPopup(auth, googleProvider);\n        console.log(\"✅ Google popup sign-in successful:\", result.user);\n        return;\n      } catch (popupError: any) {\n        console.warn(\"⚠️ Popup sign-in failed, trying redirect:\", popupError);\n        console.warn(\"❌ Popup error details:\", {\n          code: popupError.code,\n          message: popupError.message,\n          domain: window.location.origin\n        });\n        \n        // If popup fails (e.g., popup blocked, unsupported environment), fall back to redirect\n        if (popupError.code === 'auth/popup-blocked' || \n            popupError.code === 'auth/popup-closed-by-user' ||\n            popupError.code === 'auth/operation-not-supported-in-this-environment') {\n          await signInWithRedirect(auth, googleProvider);\n          return;\n        }\n        throw popupError;\n      }\n    } catch (error: any) {\n      console.error(\"Google sign-in error:\", error);\n      \n      // Add more specific error handling\n      if (error.code === 'auth/unauthorized-domain') {\n        console.error(\"🚫 FIREBASE ERROR: Domain not authorized!\");\n        console.error(\"📍 Current domain:\", window.location.origin);\n        console.error(\"🔧 Solution: Add this domain to Firebase Console > Authentication > Settings > Authorized domains\");\n        alert(`Firebase Error: Domain '${window.location.origin}' is not authorized.\\n\\nPlease add this domain to Firebase Console:\\n1. Go to Firebase Console\\n2. Authentication > Settings\\n3. Add domain to Authorized domains`);\n      }\n      \n      console.error(\"💥 Full sign-in error:\", {\n        code: error.code,\n        message: error.message,\n        domain: window.location.origin,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Re-throw error so UI can handle it\n      throw error;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await signOut(auth);\n      setAppUser(null);\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    }\n  };\n\n  const updateAppUser = async (userData: Partial<AppUser>) => {\n    if (!user) return;\n    \n    try {\n      const userRef = doc(db, \"users\", user.uid);\n      await setDoc(userRef, userData, { merge: true });\n      setAppUser(prev => prev ? { ...prev, ...userData } as AppUser : userData as AppUser);\n    } catch (error) {\n      console.error(\"Update user error:\", error);\n      throw error; // Re-throw so calling code can handle it\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"Setting up Firebase Auth state listener...\");\n    \n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      console.log(\"🔥 Firebase Auth state changed:\", {\n        hasUser: !!firebaseUser,\n        uid: firebaseUser?.uid,\n        email: firebaseUser?.email,\n        displayName: firebaseUser?.displayName\n      });\n      \n      setUser(firebaseUser);\n      \n      if (firebaseUser) {\n        try {\n          // Check for redirect result first\n          const result = await getRedirectResult(auth);\n          if (result?.user) {\n            console.log(\"✅ Google redirect sign-in successful:\", result.user.email);\n          }\n\n          console.log(\"📄 Checking Firestore user document...\");\n          \n          // Get user data from Firestore\n          const userDoc = await getDoc(doc(db, \"users\", firebaseUser.uid));\n          if (userDoc.exists()) {\n            console.log(\"✅ Found existing user document:\", userDoc.data());\n            setAppUser(userDoc.data() as AppUser);\n          } else {\n            console.log(\"⚠️ No user document found - creating basic profile for new user\");\n            \n            // 새 사용자를 위한 기본 사용자 문서 생성 (프로필 설정 필요로 표시)\n            const basicUserData: AppUser = {\n              id: firebaseUser.uid,\n              username: firebaseUser.displayName || firebaseUser.email?.split('@')[0] || \"사용자\",\n              email: firebaseUser.email || \"\",\n              photoURL: firebaseUser.photoURL,\n              ntrp: \"0.0\", // 프로필 설정에서 업데이트될 예정\n              region: \"\",\n              age: \"0\",\n              bio: null,\n              availableTimes: [],\n              points: 1000, // 기본 포인트\n              wins: 0,\n              losses: 0,\n              isProfileComplete: false, // 프로필 설정 완료 여부\n              createdAt: new Date(),\n              updatedAt: new Date()\n            };\n            \n            try {\n              await setDoc(doc(db, \"users\", firebaseUser.uid), basicUserData);\n              console.log(\"✅ Created basic user document (profile incomplete):\", basicUserData);\n              setAppUser(basicUserData);\n            } catch (createError) {\n              console.error(\"❌ Failed to create user document:\", createError);\n              setAppUser(null); // 사용자는 프로필 설정 화면으로 이동하게 됨\n            }\n          }\n        } catch (error) {\n          console.error(\"❌ Auth state change error:\", error);\n          setAppUser(null);\n        }\n      } else {\n        console.log(\"🚪 User logged out\");\n        setAppUser(null);\n      }\n      \n      setLoading(false);\n      console.log(\"🏁 Auth state processing complete\");\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const value = {\n    user,\n    appUser,\n    loading,\n    signInWithGoogle,\n    logout,\n    updateAppUser,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":6985},"client/src/hooks/use-firebase.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { \n  collection, \n  query, \n  where, \n  orderBy, \n  onSnapshot, \n  addDoc, \n  updateDoc, \n  doc, \n  getDocs,\n  DocumentData,\n  QuerySnapshot,\n  serverTimestamp,\n  Timestamp,\n  increment,\n  runTransaction,\n  getDoc\n} from \"firebase/firestore\";\nimport { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\nimport { db, storage } from \"@/lib/firebase\";\nimport { useAuth } from \"./use-auth\";\n\nexport function useFirestoreCollection<T>(\n  collectionName: string,\n  conditions: { field: string; operator: any; value: any }[] = [],\n  orderByField?: string,\n  orderDirection: 'asc' | 'desc' = 'desc'\n) {\n  const [data, setData] = useState<T[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    try {\n      let q = query(collection(db, collectionName));\n      \n      conditions.forEach(condition => {\n        q = query(q, where(condition.field, condition.operator, condition.value));\n      });\n      \n      if (orderByField) {\n        q = query(q, orderBy(orderByField, orderDirection));\n      }\n\n      const unsubscribe = onSnapshot(q, \n        (snapshot: QuerySnapshot<DocumentData>) => {\n          const documents = snapshot.docs.map(doc => {\n            const data = doc.data();\n            // Normalize Firestore Timestamps to JavaScript Dates\n            const normalizedData = { ...data };\n            Object.keys(normalizedData).forEach(key => {\n              if (normalizedData[key] instanceof Timestamp) {\n                normalizedData[key] = normalizedData[key].toDate();\n              }\n              // Normalize nested comment timestamps\n              if (key === 'comments' && Array.isArray(normalizedData[key])) {\n                normalizedData[key] = normalizedData[key].map((comment: any) => ({\n                  ...comment,\n                  createdAt: comment.createdAt instanceof Timestamp ? comment.createdAt.toDate() : comment.createdAt\n                }));\n              }\n            });\n            return {\n              id: doc.id,\n              ...normalizedData\n            };\n          }) as T[];\n          setData(documents);\n          setLoading(false);\n        },\n        (err) => {\n          console.error(`Error fetching ${collectionName}:`, err);\n          setError(err.message);\n          setLoading(false);\n        }\n      );\n\n      return unsubscribe;\n    } catch (err: any) {\n      setError(err.message);\n      setLoading(false);\n    }\n  }, [collectionName, JSON.stringify(conditions), orderByField, orderDirection]);\n\n  return { data, loading, error };\n}\n\nexport function useFirestore() {\n  const { user } = useAuth();\n\n  const addDocument = async (collectionName: string, data: any) => {\n    if (!user) throw new Error(\"User not authenticated\");\n    \n    try {\n      const docRef = await addDoc(collection(db, collectionName), {\n        ...data,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      });\n      return docRef.id;\n    } catch (error) {\n      console.error(`Error adding document to ${collectionName}:`, error);\n      throw error;\n    }\n  };\n\n  const updateDocument = async (collectionName: string, docId: string, data: any) => {\n    try {\n      await updateDoc(doc(db, collectionName, docId), {\n        ...data,\n        updatedAt: serverTimestamp(),\n      });\n    } catch (error) {\n      console.error(`Error updating document in ${collectionName}:`, error);\n      throw error;\n    }\n  };\n\n  const uploadFile = async (file: File, path: string) => {\n    try {\n      const storageRef = ref(storage, path);\n      const snapshot = await uploadBytes(storageRef, file);\n      const downloadURL = await getDownloadURL(snapshot.ref);\n      return downloadURL;\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      throw error;\n    }\n  };\n\n  const deleteDocument = async (collectionName: string, docId: string) => {\n    try {\n      const { deleteDoc, doc } = await import('firebase/firestore');\n      await deleteDoc(doc(db, collectionName, docId));\n    } catch (error) {\n      console.error(`Error deleting document from ${collectionName}:`, error);\n      throw error;\n    }\n  };\n\n  const acceptMatch = async (matchId: string) => {\n    if (!user) throw new Error(\"User not authenticated\");\n\n    try {\n      await runTransaction(db, async (transaction) => {\n        const matchRef = doc(db, 'matches', matchId);\n        const matchDoc = await transaction.get(matchRef);\n        \n        if (!matchDoc.exists()) throw new Error(\"Match not found\");\n        \n        const match = matchDoc.data();\n        \n        // Verify caller is the actual target from matchDoc\n        if (user.uid !== match.targetId) throw new Error(\"Unauthorized: Only match target can accept\");\n        if (match.status !== 'pending') throw new Error(\"Match is not pending\");\n        \n        const targetUserRef = doc(db, 'users', match.targetId);\n        const targetUserDoc = await transaction.get(targetUserRef);\n        \n        if (!targetUserDoc.exists()) throw new Error(\"Target user not found\");\n        \n        // Test version: No point requirements\n        // const targetUser = targetUserDoc.data();\n        // if (targetUser.points < match.pointsCost) throw new Error(\"Insufficient points\");\n        \n        // Accept match - no points deducted in test version\n        transaction.update(matchRef, {\n          status: 'accepted',\n          acceptedAt: serverTimestamp(),\n        });\n        \n        // Test version: No point deduction\n        // transaction.update(targetUserRef, {\n        //   points: increment(-match.pointsCost),\n        // });\n      });\n    } catch (error) {\n      console.error(\"Error accepting match:\", error);\n      throw error;\n    }\n  };\n\n  const rejectMatch = async (matchId: string) => {\n    if (!user) throw new Error(\"User not authenticated\");\n\n    try {\n      await runTransaction(db, async (transaction) => {\n        const matchRef = doc(db, 'matches', matchId);\n        const matchDoc = await transaction.get(matchRef);\n        \n        if (!matchDoc.exists()) throw new Error(\"Match not found\");\n        \n        const match = matchDoc.data();\n        \n        // Verify caller is the actual target from matchDoc\n        if (user.uid !== match.targetId) throw new Error(\"Unauthorized: Only match target can reject\");\n        if (match.status !== 'pending') throw new Error(\"Match is not pending\");\n        \n        // Reject match and refund requester\n        transaction.update(matchRef, {\n          status: 'rejected',\n          rejectedAt: serverTimestamp(),\n        });\n        \n        // Test version: No points were deducted, so no refund needed\n        // const requesterRef = doc(db, 'users', match.requesterId);\n        // transaction.update(requesterRef, {\n        //   points: increment(match.pointsCost), // Refund the original cost\n        // });\n      });\n    } catch (error) {\n      console.error(\"Error rejecting match:\", error);\n      throw error;\n    }\n  };\n\n  const completeMatch = async (matchId: string, result: 'requester_won' | 'target_won' | 'draw') => {\n    if (!user) throw new Error(\"User not authenticated\");\n\n    try {\n      await runTransaction(db, async (transaction) => {\n        const matchRef = doc(db, 'matches', matchId);\n        const matchDoc = await transaction.get(matchRef);\n        \n        if (!matchDoc.exists()) throw new Error(\"Match not found\");\n        \n        const match = matchDoc.data();\n        \n        // Verify caller is a participant using IDs from matchDoc\n        if (user.uid !== match.requesterId && user.uid !== match.targetId) {\n          throw new Error(\"Unauthorized: Only match participants can complete match\");\n        }\n        \n        if (match.status === 'completed') throw new Error(\"Match already completed\");\n        if (match.status !== 'accepted') throw new Error(\"Match must be accepted first\");\n        \n        // Use participant IDs from matchDoc (source of truth)\n        const requesterRef = doc(db, 'users', match.requesterId);\n        const targetRef = doc(db, 'users', match.targetId);\n        \n        // Update match with result\n        transaction.update(matchRef, {\n          status: 'completed',\n          result: result,\n          completedAt: serverTimestamp(),\n          completedBy: user.uid,\n        });\n\n        // Update user stats based on result\n        if (result === 'requester_won') {\n          // Winner gets full refund + bonus points + 1 win\n          transaction.update(requesterRef, {\n            points: increment(25), // Test version: just +25P bonus\n            wins: increment(1),\n          });\n          // Loser gets +1 loss\n          transaction.update(targetRef, {\n            losses: increment(1),\n          });\n        } else if (result === 'target_won') {\n          // Winner gets full refund + bonus points + 1 win\n          transaction.update(targetRef, {\n            points: increment(25), // Test version: just +25P bonus\n            wins: increment(1),\n          });\n          // Loser gets +1 loss\n          transaction.update(requesterRef, {\n            losses: increment(1),\n          });\n        } else if (result === 'draw') {\n          // Draw: Both get full refund\n          const drawRefund = 50;\n          transaction.update(requesterRef, {\n            points: increment(drawRefund),\n          });\n          transaction.update(targetRef, {\n            points: increment(drawRefund),\n          });\n        }\n      });\n    } catch (error) {\n      console.error(\"Error completing match:\", error);\n      throw error;\n    }\n  };\n\n  const toggleLike = async (postId: string) => {\n    if (!user) throw new Error(\"User not authenticated\");\n    \n    try {\n      await runTransaction(db, async (transaction) => {\n        const postRef = doc(db, 'posts', postId);\n        const postDoc = await transaction.get(postRef);\n        \n        if (!postDoc.exists()) throw new Error(\"Post not found\");\n        \n        const post = postDoc.data();\n        const currentLikes = Array.isArray(post.likes) ? post.likes : [];\n        \n        let newLikes;\n        if (currentLikes.includes(user.uid)) {\n          // Remove like\n          newLikes = currentLikes.filter((id: string) => id !== user.uid);\n        } else {\n          // Add like\n          newLikes = [...currentLikes, user.uid];\n        }\n        \n        transaction.update(postRef, {\n          likes: newLikes,\n          updatedAt: serverTimestamp(),\n        });\n      });\n    } catch (error) {\n      console.error(\"Error toggling like:\", error);\n      throw error;\n    }\n  };\n\n  const addComment = async (postId: string, content: string) => {\n    if (!user) throw new Error(\"User not authenticated\");\n    \n    try {\n      await runTransaction(db, async (transaction) => {\n        const postRef = doc(db, 'posts', postId);\n        const postDoc = await transaction.get(postRef);\n        \n        if (!postDoc.exists()) throw new Error(\"Post not found\");\n        \n        const post = postDoc.data();\n        const currentComments = post.comments || [];\n        \n        const newComment = {\n          id: Date.now().toString(), // Simple ID generation\n          authorId: user.uid,\n          content: content.trim(),\n          createdAt: serverTimestamp(),\n        };\n        \n        const newComments = [...currentComments, newComment];\n        \n        transaction.update(postRef, {\n          comments: newComments,\n          updatedAt: serverTimestamp(),\n        });\n      });\n    } catch (error) {\n      console.error(\"Error adding comment:\", error);\n      throw error;\n    }\n  };\n\n  return {\n    addDocument,\n    updateDocument,\n    deleteDocument,\n    uploadFile,\n    acceptMatch,\n    rejectMatch,\n    requestMatch,\n    completeMatch,\n    toggleLike,\n    addComment,\n  };\n\n  async function requestMatch(requesterId: string, targetId: string, pointsCost: number = 0) {\n    if (!user) throw new Error(\"User not authenticated\");\n    if (user.uid !== requesterId) throw new Error(\"Unauthorized: Only requester can create match\");\n\n    try {\n      await runTransaction(db, async (transaction) => {\n        const requesterRef = doc(db, 'users', requesterId);\n        const requesterDoc = await transaction.get(requesterRef);\n        \n        if (!requesterDoc.exists()) throw new Error(\"Requester not found\");\n        \n        // Test version: No points required or deducted\n        const matchRef = doc(collection(db, 'matches'));\n        transaction.set(matchRef, {\n          id: matchRef.id,\n          requesterId,\n          targetId,\n          status: 'pending',\n          pointsCost: 0, // Test version: free matches\n          isReviewed: false, // 기본값: 리뷰 미완료\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp(),\n        });\n        \n        // Test version: No point deduction\n        // transaction.update(requesterRef, {\n        //   points: increment(-pointsCost),\n        // });\n      });\n    } catch (error) {\n      console.error(\"Error requesting match:\", error);\n      throw error;\n    }\n  }\n}\n","size_bytes":13096},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/firebase.ts":{"content":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { getStorage } from \"firebase/storage\";\nimport { getDatabase } from \"firebase/database\";\n\n// Your web app's Firebase configuration using Vite's environment variables\n// IMPORTANT: Make sure your .env file has the correct VITE_ prefixes\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || \"AIzaSyDs-6xXv7JCdfa2Ym054_myxlVPW_3dj7A\",\n  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN || \"match-point-0918.firebaseapp.com\",\n  databaseURL: import.meta.env.VITE_FIREBASE_DATABASE_URL || \"https://match-point-0918-default-rtdb.firebaseio.com/\",\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || \"match-point-0918\",\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET || \"match-point-0918.firebasestorage.app\",\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID || \"954722611216\",\n  appId: import.meta.env.VITE_FIREBASE_APP_ID || \"1:954722611216:web:c17068d5a4af6d3fd91a95\"\n};\n\n// Check if the environment variables are loaded correctly\nif (!firebaseConfig.apiKey) {\n    throw new Error(\"Firebase API Key is missing. Please check your .env file.\");\n}\n\nconsole.log('Firebase Config loaded successfully');\n\n// Debug information for development only\nif (import.meta.env.DEV) {\n  console.log('Current domain:', window.location.origin);\n  console.log('Firebase authDomain:', firebaseConfig.authDomain);\n}\n\n\n// Initialize Firebase\nimport { getApps, getApp } from \"firebase/app\";\n\n// Firebase가 이미 초기화되었는지 확인\nconst app = getApps().length === 0 ? initializeApp(firebaseConfig) : getApp();\n\n// Export the services for use in other parts of the app\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport const storage = getStorage(app);\nexport const realtimeDb = getDatabase(app);\nexport const googleProvider = new GoogleAuthProvider();\n","size_bytes":2053},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\n// Note: This app uses Firebase for all data operations\n// The apiRequest and getQueryFn functions are not currently used\n// but are kept for potential future API integration\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  try {\n    // Get Firebase ID token\n    let idToken = null;\n    try {\n      const { getAuth } = await import('firebase/auth');\n      const auth = getAuth();\n      if (auth.currentUser) {\n        idToken = await auth.currentUser.getIdToken();\n      }\n    } catch (error) {\n      console.warn('Failed to get Firebase ID token:', error);\n    }\n\n    const headers: Record<string, string> = {\n      ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n      ...(idToken ? { \"Authorization\": `Bearer ${idToken}` } : {}),\n    };\n\n    const res = await fetch(url, {\n      method,\n      headers,\n      body: data ? JSON.stringify(data) : undefined,\n      credentials: \"include\",\n    });\n\n    await throwIfResNotOk(res);\n    return res;\n  } catch (error) {\n    if (error instanceof TypeError) {\n      // Network error (server down, no internet, etc.)\n      throw new Error(`Network error: Unable to connect to server. Please check your connection.`);\n    }\n    // Re-throw other errors (like HTTP errors from throwIfResNotOk)\n    throw error;\n  }\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    try {\n      // Get Firebase ID token for authentication\n      let idToken = null;\n      try {\n        const { getAuth } = await import('firebase/auth');\n        const auth = getAuth();\n        if (auth.currentUser) {\n          idToken = await auth.currentUser.getIdToken();\n        }\n      } catch (error) {\n        console.warn('Failed to get Firebase ID token for query:', error);\n      }\n\n      const headers: Record<string, string> = {\n        ...(idToken ? { \"Authorization\": `Bearer ${idToken}` } : {}),\n      };\n\n      const res = await fetch(queryKey.join(\"/\") as string, {\n        headers,\n        credentials: \"include\",\n      });\n\n      if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n        return null;\n      }\n\n      await throwIfResNotOk(res);\n      return await res.json();\n    } catch (error) {\n      if (error instanceof TypeError) {\n        // Network error (server down, no internet, etc.)\n        throw new Error(`Network error: Unable to connect to server. Please check your connection.`);\n      }\n      // Re-throw other errors (like HTTP errors from throwIfResNotOk)\n      throw error;\n    }\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":3244},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport SplashScreen from \"@/components/SplashScreen\";\nimport LoginScreen from \"@/components/LoginScreen\";\nimport ProfileSetupScreen from \"@/components/ProfileSetupScreen\";\nimport MainApp from \"@/components/MainApp\";\nimport ChatScreen from \"@/components/ChatScreen\";\nimport LoadingSpinner from \"@/components/LoadingSpinner\";\n\ntype ViewState = 'splash' | 'login' | 'profile-setup' | 'main' | 'chat';\n\nexport default function Home() {\n  const { user, appUser, loading } = useAuth();\n  const [currentView, setCurrentView] = useState<ViewState>('splash');\n\n  // 디버깅을 위한 로그 추가\n  console.log('🏠 Home component render:', { \n    loading, \n    hasUser: !!user, \n    hasAppUser: !!appUser, \n    currentView,\n    profileComplete: appUser?.isProfileComplete \n  });\n\n  useEffect(() => {\n    console.log('🔄 Home useEffect triggered:', { loading, hasUser: !!user, hasAppUser: !!appUser });\n    \n    if (loading) {\n      console.log('⏳ Still loading, staying in current view:', currentView);\n      return;\n    }\n\n    if (!user) {\n      console.log('🔑 No user, switching to login');\n      setCurrentView('login');\n    } else if (!appUser || appUser.isProfileComplete === false) {\n      console.log('👤 User exists but profile incomplete, switching to profile-setup');\n      setCurrentView('profile-setup');\n    } else {\n      console.log('✅ User and profile complete, switching to main');\n      setCurrentView('main');\n    }\n  }, [user, appUser, loading]);\n\n  const handleSplashComplete = () => {\n    if (!user) {\n      setCurrentView('login');\n    } else if (!appUser || appUser.isProfileComplete === false) {\n      setCurrentView('profile-setup');\n    } else {\n      setCurrentView('main');\n    }\n  };\n\n  const handleProfileComplete = () => {\n    setCurrentView('main');\n  };\n\n  const handleChatOpen = () => {\n    setCurrentView('chat');\n  };\n\n  const handleChatBack = () => {\n    setCurrentView('main');\n  };\n\n  if (loading) {\n    console.log('🎡 Showing loading spinner');\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-muted\">\n        <LoadingSpinner size=\"lg\" text=\"앱 초기화 중...\" />\n      </div>\n    );\n  }\n\n  console.log('🎨 Rendering main UI with currentView:', currentView);\n\n  return (\n    <div className=\"container mx-auto max-w-md min-h-screen bg-background shadow-2xl flex flex-col relative\">\n      {currentView === 'splash' && (\n        <SplashScreen onComplete={handleSplashComplete} />\n      )}\n      \n      {currentView === 'login' && <LoginScreen />}\n      \n      {currentView === 'profile-setup' && (\n        <ProfileSetupScreen onComplete={handleProfileComplete} />\n      )}\n      \n      {currentView === 'main' && <MainApp />}\n      \n      {currentView === 'chat' && (\n        <ChatScreen onBack={handleChatBack} />\n      )}\n    </div>\n  );\n}\n","size_bytes":2919},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/PostCreateModal.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useFirestore } from \"@/hooks/use-firebase\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport LoadingSpinner from \"./LoadingSpinner\";\n\ninterface PostCreateModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onPostCreated: () => void;\n}\n\nexport default function PostCreateModal({ isOpen, onClose, onPostCreated }: PostCreateModalProps) {\n  const { appUser } = useAuth();\n  const { addDocument } = useFirestore();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  \n  const [formData, setFormData] = useState({\n    title: '',\n    content: '',\n  });\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!appUser || !formData.title.trim() || !formData.content.trim()) return;\n\n    setLoading(true);\n    try {\n      await addDocument('posts', {\n        authorId: appUser.id,\n        title: formData.title.trim(),\n        content: formData.content.trim(),\n        likes: [],\n        comments: [],\n      });\n\n      toast({\n        title: \"게시글 작성 완료\",\n        description: \"새 게시글이 성공적으로 작성되었습니다.\",\n      });\n\n      // 폼 초기화 및 모달 닫기\n      setFormData({ title: '', content: '' });\n      onPostCreated();\n      onClose();\n    } catch (error) {\n      console.error(\"Post creation error:\", error);\n      toast({\n        title: \"게시글 작성 실패\",\n        description: \"다시 시도해주세요.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleClose = () => {\n    if (!loading) {\n      setFormData({ title: '', content: '' });\n      onClose();\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50\" data-testid=\"modal-create-post\">\n      <div className=\"bg-background rounded-lg w-full max-w-md mx-4 max-h-[90vh] flex flex-col\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center p-6 border-b border-border\">\n          <h2 className=\"text-xl font-bold text-foreground\" data-testid=\"text-modal-title\">새 글 작성하기</h2>\n          <button\n            onClick={handleClose}\n            disabled={loading}\n            className=\"text-muted-foreground hover:text-foreground transition-colors disabled:opacity-50\"\n            data-testid=\"button-close-modal\"\n          >\n            <i className=\"fas fa-times text-lg\" />\n          </button>\n        </div>\n\n        {/* Form */}\n        <form onSubmit={handleSubmit} className=\"flex-1 p-6 space-y-4 overflow-y-auto\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">제목 *</Label>\n            <Input\n              id=\"title\"\n              name=\"title\"\n              value={formData.title}\n              onChange={handleInputChange}\n              placeholder=\"게시글 제목을 입력하세요\"\n              disabled={loading}\n              data-testid=\"input-post-title\"\n              className=\"w-full\"\n              maxLength={100}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"content\">내용 *</Label>\n            <Textarea\n              id=\"content\"\n              name=\"content\"\n              value={formData.content}\n              onChange={handleInputChange}\n              placeholder=\"게시글 내용을 입력하세요...\"\n              disabled={loading}\n              data-testid=\"textarea-post-content\"\n              className=\"w-full min-h-[200px] resize-none\"\n              maxLength={1000}\n            />\n            <div className=\"text-xs text-muted-foreground text-right\">\n              {formData.content.length}/1000\n            </div>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              disabled={loading}\n              className=\"flex-1\"\n              data-testid=\"button-cancel-post\"\n            >\n              취소\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={loading || !formData.title.trim() || !formData.content.trim()}\n              className=\"flex-1 bg-primary text-primary-foreground hover:bg-primary/90\"\n              data-testid=\"button-submit-post\"\n            >\n              {loading ? (\n                <>\n                  <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                  작성중...\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-paper-plane mr-2\" />\n                  게시하기\n                </>\n              )}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}","size_bytes":5268},"client/src/components/MatchResultModal.tsx":{"content":"import { useState } from \"react\";\nimport { useFirestore } from \"@/hooks/use-firebase\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getAvatarSrc } from \"@/utils/avatar\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport { Match, User } from \"@shared/schema\";\n\ninterface MatchResultModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  match: Match | null;\n  currentUser: User;\n  opponent: User | null;\n}\n\nexport default function MatchResultModal({ \n  isOpen, \n  onClose, \n  match, \n  currentUser, \n  opponent \n}: MatchResultModalProps) {\n  const { completeMatch } = useFirestore();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n\n  if (!isOpen || !match || !opponent) return null;\n\n  const isRequester = match.requesterId === currentUser.id;\n\n  const handleResult = async (result: 'requester_won' | 'target_won' | 'draw') => {\n    setLoading(true);\n    try {\n      await completeMatch(match.id, result);\n      \n      const resultMessages = {\n        'requester_won': isRequester ? '승리했습니다! 🎉' : '아쉽게 패배했습니다 😔',\n        'target_won': isRequester ? '아쉽게 패배했습니다 😔' : '승리했습니다! 🎉',\n        'draw': '무승부로 경기가 종료되었습니다 🤝'\n      };\n\n      toast({\n        title: \"경기 결과 저장 완료\",\n        description: resultMessages[result],\n      });\n\n      onClose();\n    } catch (error) {\n      console.error(\"Match completion error:\", error);\n      toast({\n        title: \"경기 결과 저장 실패\",\n        description: \"다시 시도해주세요.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleClose = () => {\n    if (!loading) {\n      onClose();\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50\" data-testid=\"modal-match-result\">\n      <div className=\"bg-background rounded-lg w-full max-w-md mx-4 max-h-[90vh] flex flex-col\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center p-6 border-b border-border\">\n          <h2 className=\"text-xl font-bold text-foreground\" data-testid=\"text-modal-title\">경기 결과 입력</h2>\n          <button\n            onClick={handleClose}\n            disabled={loading}\n            className=\"text-muted-foreground hover:text-foreground transition-colors disabled:opacity-50\"\n            data-testid=\"button-close-modal\"\n          >\n            <i className=\"fas fa-times text-lg\" />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 p-6 space-y-6\">\n          {/* Match Info */}\n          <div className=\"text-center space-y-4\">\n            <div className=\"flex items-center justify-center space-x-4\">\n              <div className=\"text-center\">\n                <img \n                  src={getAvatarSrc(currentUser.photoURL, currentUser, 128)} \n                  alt={currentUser.username} \n                  className=\"w-16 h-16 rounded-full object-cover mx-auto mb-2\"\n                />\n                <p className=\"font-semibold text-sm\" data-testid=\"text-current-user\">\n                  {currentUser.username}\n                  <span className=\"block text-xs text-muted-foreground\">나</span>\n                </p>\n              </div>\n              <div className=\"text-2xl font-bold text-muted-foreground\">VS</div>\n              <div className=\"text-center\">\n                <img \n                  src={getAvatarSrc(opponent.photoURL, opponent, 128)} \n                  alt={opponent.username} \n                  className=\"w-16 h-16 rounded-full object-cover mx-auto mb-2\"\n                />\n                <p className=\"font-semibold text-sm\" data-testid=\"text-opponent\">\n                  {opponent.username}\n                  <span className=\"block text-xs text-muted-foreground\">상대</span>\n                </p>\n              </div>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              경기가 끝났나요? 결과를 선택해주세요.\n            </p>\n          </div>\n\n          {/* Result Buttons */}\n          <div className=\"space-y-3\">\n            <Button\n              onClick={() => handleResult(isRequester ? 'requester_won' : 'target_won')}\n              disabled={loading}\n              className=\"w-full bg-green-600 hover:bg-green-700 text-white py-4 text-lg font-semibold\"\n              data-testid=\"button-win\"\n            >\n              {loading ? (\n                <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n              ) : (\n                <i className=\"fas fa-trophy mr-2\" />\n              )}\n              내가 승리 🏆\n            </Button>\n            \n            <Button\n              onClick={() => handleResult(isRequester ? 'target_won' : 'requester_won')}\n              disabled={loading}\n              variant=\"outline\"\n              className=\"w-full border-red-200 hover:bg-red-50 py-4 text-lg font-semibold\"\n              data-testid=\"button-lose\"\n            >\n              {loading ? (\n                <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n              ) : (\n                <i className=\"fas fa-handshake mr-2\" />\n              )}\n              상대가 승리 😔\n            </Button>\n            \n            <Button\n              onClick={() => handleResult('draw')}\n              disabled={loading}\n              variant=\"outline\"\n              className=\"w-full py-4 text-lg font-semibold\"\n              data-testid=\"button-draw\"\n            >\n              {loading ? (\n                <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n              ) : (\n                <i className=\"fas fa-equals mr-2\" />\n              )}\n              무승부 🤝\n            </Button>\n          </div>\n\n          {/* Points Info */}\n          <div className=\"bg-muted/50 rounded-lg p-4 text-center\">\n            <p className=\"text-sm text-muted-foreground mb-2\">포인트 안내</p>\n            <div className=\"text-xs space-y-1\">\n              <p>🏆 승리: +25 포인트 보너스, +1승</p>\n              <p>😔 패배: +1패 (포인트 환급 없음)</p>\n              <p>🤝 무승부: +25 포인트 환급</p>\n              <p className=\"text-muted-foreground/80\">※ 테스트 버전으로 매치 참가비 무료</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6453},"client/src/components/MatchRequestModal.tsx":{"content":"import { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { User } from '@shared/schema';\nimport { getAvatarSrc } from '@/utils/avatar';\n\ninterface MatchRequestModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: () => void;\n  targetUser: User | null;\n  currentUserPoints: number;\n  isLoading: boolean;\n}\n\nexport default function MatchRequestModal({\n  isOpen,\n  onClose,\n  onConfirm,\n  targetUser,\n  currentUserPoints,\n  isLoading\n}: MatchRequestModalProps) {\n  const matchCost = 0; // Test version: free matches\n  const hasEnoughPoints = currentUserPoints >= matchCost;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"text-match-request-title\">\n            매치 신청 확인\n          </DialogTitle>\n          <DialogDescription data-testid=\"text-match-request-description\">\n            {targetUser ? (\n              <>\n                <strong>{targetUser.username}</strong>님에게 매치를 신청하시겠습니까?\n              </>\n            ) : (\n              \"매치를 신청하시겠습니까?\"\n            )}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Player Info */}\n          {targetUser && (\n            <div className=\"flex items-center space-x-3 p-3 bg-muted rounded-lg\">\n              <img \n                src={getAvatarSrc(targetUser.photoURL, targetUser, 96)} \n                alt={targetUser.username} \n                className=\"w-12 h-12 rounded-full object-cover\"\n                data-testid=\"img-target-user\"\n              />\n              <div>\n                <p className=\"font-semibold text-foreground\" data-testid=\"text-target-username\">\n                  {targetUser.username}\n                </p>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"text-target-info\">\n                  NTRP {targetUser.ntrp} • {targetUser.region}\n                </p>\n                <p className=\"text-xs text-muted-foreground\" data-testid=\"text-target-record\">\n                  {targetUser.wins}승 {targetUser.losses}패\n                </p>\n              </div>\n            </div>\n          )}\n\n          {/* Cost Information */}\n          <div className=\"space-y-2 p-3 border rounded-lg\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-muted-foreground\">매치 신청 비용</span>\n              <span className=\"font-semibold text-green-600\" data-testid=\"text-match-cost\">\n                무료 (테스트 버전)\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-muted-foreground\">현재 보유 포인트</span>\n              <span className=\"font-semibold\" data-testid=\"text-current-points\">\n                {currentUserPoints}P\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center pt-2 border-t\">\n              <span className=\"text-sm text-muted-foreground\">신청 후 포인트</span>\n              <span \n                className={`font-semibold ${hasEnoughPoints ? 'text-primary' : 'text-destructive'}`}\n                data-testid=\"text-points-after\"\n              >\n                {hasEnoughPoints ? currentUserPoints - matchCost : currentUserPoints}P\n              </span>\n            </div>\n          </div>\n\n          {/* Warning if insufficient points */}\n          {!hasEnoughPoints && (\n            <div className=\"p-3 bg-destructive/10 border border-destructive/20 rounded-lg\">\n              <p className=\"text-sm text-destructive\" data-testid=\"text-insufficient-points\">\n                포인트가 부족합니다. 매치 신청을 위해 {matchCost}P가 필요합니다.\n              </p>\n            </div>\n          )}\n\n          {/* Info about match flow */}\n          <div className=\"text-xs text-muted-foreground space-y-1\">\n            <p>• 테스트 버전으로 매치 신청이 무료입니다</p>\n            <p>• 상대방이 수락해도 포인트가 차감되지 않습니다</p>\n            <p>• 승리 시 +25P 보너스를 받을 수 있습니다</p>\n            <p>• 무승부 시 각자 +25P를 받습니다</p>\n          </div>\n        </div>\n\n        <div className=\"flex space-x-2 pt-4\">\n          <Button \n            variant=\"outline\" \n            onClick={onClose}\n            className=\"flex-1\"\n            disabled={isLoading}\n            data-testid=\"button-cancel-match\"\n          >\n            취소\n          </Button>\n          <Button \n            onClick={onConfirm}\n            className=\"flex-1\"\n            disabled={!hasEnoughPoints || isLoading}\n            data-testid=\"button-confirm-match\"\n          >\n            {isLoading ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\" />\n                신청 중...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-tennis-ball mr-2\" />\n                신청하기\n              </>\n            )}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5366},"client/src/utils/tierCalculator.ts":{"content":"// Tennis tier calculation system based on points, win rate, and activity\n// Tiers: Bronze -> Silver -> Gold -> Platinum -> Diamond -> Master -> Champion\n\nexport interface TierInfo {\n  name: string;\n  color: string;\n  bgColor: string;\n  minPoints: number;\n  minWinRate?: number;\n  minGames?: number;\n}\n\nexport const TIERS: TierInfo[] = [\n  {\n    name: '🥉 브론즈',\n    color: 'text-orange-700',\n    bgColor: 'bg-orange-100',\n    minPoints: 0,\n    minGames: 0\n  },\n  {\n    name: '🥈 실버',\n    color: 'text-gray-600',\n    bgColor: 'bg-gray-100',\n    minPoints: 150,\n    minGames: 3\n  },\n  {\n    name: '🥇 골드',\n    color: 'text-yellow-600',\n    bgColor: 'bg-yellow-100',\n    minPoints: 250,\n    minGames: 5,\n    minWinRate: 0.4\n  },\n  {\n    name: '💎 플래티넘',\n    color: 'text-blue-600',\n    bgColor: 'bg-blue-100',\n    minPoints: 400,\n    minGames: 8,\n    minWinRate: 0.5\n  },\n  {\n    name: '💎 다이아몬드',\n    color: 'text-cyan-600',\n    bgColor: 'bg-cyan-100',\n    minPoints: 600,\n    minGames: 12,\n    minWinRate: 0.6\n  },\n  {\n    name: '👑 마스터',\n    color: 'text-purple-600',\n    bgColor: 'bg-purple-100',\n    minPoints: 900,\n    minGames: 20,\n    minWinRate: 0.65\n  },\n  {\n    name: '🏆 챔피언',\n    color: 'text-red-600',\n    bgColor: 'bg-red-100',\n    minPoints: 1500,\n    minGames: 30,\n    minWinRate: 0.7\n  }\n];\n\nexport function calculateTier(points: number, wins: number, losses: number): TierInfo {\n  const totalGames = wins + losses;\n  const winRate = totalGames > 0 ? wins / totalGames : 0;\n\n  // Find the highest tier the user qualifies for\n  for (let i = TIERS.length - 1; i >= 0; i--) {\n    const tier = TIERS[i];\n    \n    const meetsPoints = points >= tier.minPoints;\n    const meetsGames = totalGames >= (tier.minGames || 0);\n    const meetsWinRate = !tier.minWinRate || winRate >= tier.minWinRate;\n    \n    if (meetsPoints && meetsGames && meetsWinRate) {\n      return tier;\n    }\n  }\n\n  // Default to Bronze if no tier qualifies\n  return TIERS[0];\n}\n\nexport function getTierProgress(points: number, wins: number, losses: number): {\n  currentTier: TierInfo;\n  nextTier: TierInfo | null;\n  progress: number;\n  requirements: string[];\n} {\n  const currentTier = calculateTier(points, wins, losses);\n  const currentIndex = TIERS.findIndex(tier => tier.name === currentTier.name);\n  const nextTier = currentIndex < TIERS.length - 1 ? TIERS[currentIndex + 1] : null;\n  \n  let progress = 100;\n  const requirements: string[] = [];\n  \n  if (nextTier) {\n    const totalGames = wins + losses;\n    const currentWinRate = totalGames > 0 ? wins / totalGames : 0;\n    \n    // Calculate individual progress for each requirement\n    const pointsProgress = Math.min(100, (points / nextTier.minPoints) * 100);\n    const gamesProgress = nextTier.minGames ? Math.min(100, (totalGames / nextTier.minGames) * 100) : 100;\n    const winRateProgress = nextTier.minWinRate ? Math.min(100, (currentWinRate / nextTier.minWinRate) * 100) : 100;\n    \n    // Overall progress is the minimum of all requirements (bottleneck)\n    progress = Math.min(pointsProgress, gamesProgress, winRateProgress);\n    \n    // Check requirements for next tier\n    if (points < nextTier.minPoints) {\n      requirements.push(`${nextTier.minPoints - points}P 더 필요`);\n    }\n    \n    if (nextTier.minGames && totalGames < nextTier.minGames) {\n      requirements.push(`${nextTier.minGames - totalGames}경기 더 필요`);\n    }\n    \n    if (nextTier.minWinRate && currentWinRate < nextTier.minWinRate) {\n      // Calculate additional wins needed to reach target win rate\n      // Formula: need at least ceil((r*totalGames - wins) / (1-r)) additional wins\n      const targetWinRate = nextTier.minWinRate;\n      const minAdditionalWins = Math.ceil(Math.max(0, (targetWinRate * totalGames - wins) / (1 - targetWinRate)));\n      \n      if (minAdditionalWins > 0) {\n        requirements.push(`승률 ${Math.round(targetWinRate * 100)}% 달성을 위해 ${minAdditionalWins}승 더 필요`);\n      } else {\n        requirements.push(`승률 ${Math.round(targetWinRate * 100)}% (현재 ${Math.round(currentWinRate * 100)}%)`);\n      }\n    }\n  }\n  \n  return {\n    currentTier,\n    nextTier,\n    progress,\n    requirements\n  };\n}","size_bytes":4233},"client/src/components/TierProgressCard.tsx":{"content":"import { User } from '@shared/schema';\nimport { getTierProgress } from '@/utils/tierCalculator';\n\ninterface TierProgressCardProps {\n  user: User;\n}\n\nexport default function TierProgressCard({ user }: TierProgressCardProps) {\n  const { currentTier, nextTier, progress, requirements } = getTierProgress(user.points, user.wins, user.losses);\n\n  return (\n    <div className=\"bg-background rounded-xl border border-border p-4 space-y-3\" data-testid=\"card-tier-progress\">\n      {/* Current Tier */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className={`w-10 h-10 rounded-full flex items-center justify-center ${currentTier.bgColor}`}>\n            <i className={`fas fa-medal text-lg ${currentTier.color}`} />\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-foreground\" data-testid=\"text-current-tier\">\n              {currentTier.name} 등급\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">현재 등급</p>\n          </div>\n        </div>\n        <div className=\"text-right\">\n          <p className=\"font-bold text-accent\" data-testid=\"text-current-points\">{user.points}P</p>\n          <p className=\"text-xs text-muted-foreground\">{user.wins}승 {user.losses}패</p>\n        </div>\n      </div>\n\n      {/* Progress to Next Tier */}\n      {nextTier && (\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-foreground\">\n              다음 등급: <span className={currentTier.color}>{nextTier.name}</span>\n            </span>\n            <span className=\"text-xs text-muted-foreground\">{Math.round(progress)}%</span>\n          </div>\n          \n          {/* Progress Bar */}\n          <div className=\"w-full bg-muted rounded-full h-2\">\n            <div \n              className=\"bg-primary rounded-full h-2 transition-all duration-300\"\n              style={{ width: `${Math.min(100, Math.max(0, progress))}%` }}\n              data-testid=\"progress-bar\"\n            />\n          </div>\n          \n          {/* Requirements */}\n          {requirements.length > 0 && (\n            <div className=\"space-y-1\">\n              <p className=\"text-xs font-medium text-muted-foreground\">승급 조건:</p>\n              {requirements.map((requirement, index) => (\n                <div key={index} className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-circle text-xs text-muted-foreground\" />\n                  <span className=\"text-xs text-muted-foreground\" data-testid={`requirement-${index}`}>\n                    {requirement}\n                  </span>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Champion Status */}\n      {!nextTier && (\n        <div className=\"text-center py-2\">\n          <div className=\"flex items-center justify-center space-x-2\">\n            <i className=\"fas fa-crown text-yellow-500 text-lg\" />\n            <span className=\"font-bold text-yellow-600\">최고 등급 달성!</span>\n          </div>\n          <p className=\"text-xs text-muted-foreground mt-1\">축하합니다! 챔피언 등급입니다.</p>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":3294},"client/src/components/AdminPanel.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { collection, query, orderBy, getDocs, doc, updateDoc, deleteDoc, where } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { useAuth } from '@/hooks/use-auth';\nimport { User, Post, Match } from '@shared/schema';\nimport { calculateTier } from '@/utils/tierCalculator';\nimport { getAvatarSrc } from '@/utils/avatar';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function AdminPanel() {\n  const { appUser } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState('users');\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [matches, setMatches] = useState<Match[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  // Permission check\n  if (!appUser || appUser.role !== 'admin') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\" data-testid=\"access-denied\">\n          <i className=\"fas fa-lock text-4xl text-gray-400 mb-4\" />\n          <h2 className=\"text-xl font-semibold text-gray-700\">접근 권한이 없습니다</h2>\n          <p className=\"text-gray-500\">관리자만 접근할 수 있는 페이지입니다.</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Fetch data\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        // Fetch users\n        const usersQuery = query(collection(db, 'users'), orderBy('createdAt', 'desc'));\n        const usersSnapshot = await getDocs(usersQuery);\n        const usersData = usersSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        } as User));\n        setUsers(usersData);\n\n        // Fetch posts\n        const postsQuery = query(collection(db, 'posts'), orderBy('createdAt', 'desc'));\n        const postsSnapshot = await getDocs(postsQuery);\n        const postsData = postsSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        } as Post));\n        setPosts(postsData);\n\n        // Fetch matches\n        const matchesQuery = query(collection(db, 'matches'), orderBy('createdAt', 'desc'));\n        const matchesSnapshot = await getDocs(matchesQuery);\n        const matchesData = matchesSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        } as Match));\n        setMatches(matchesData);\n\n      } catch (error) {\n        console.error('Error fetching admin data:', error);\n        toast({\n          title: \"데이터 로딩 실패\",\n          description: \"관리자 데이터를 불러오는 중 오류가 발생했습니다.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [toast]);\n\n  const updateUserPoints = async (userId: string, newPoints: number) => {\n    try {\n      const userRef = doc(db, 'users', userId);\n      await updateDoc(userRef, { points: newPoints });\n      \n      // Update local state\n      setUsers(users.map(user => \n        user.id === userId ? { ...user, points: newPoints } : user\n      ));\n      \n      toast({\n        title: \"포인트 수정 완료\",\n        description: `사용자의 포인트가 ${newPoints}P로 수정되었습니다.`,\n      });\n    } catch (error) {\n      console.error('Error updating user points:', error);\n      toast({\n        title: \"포인트 수정 실패\",\n        description: \"권한이 없거나 오류가 발생했습니다. Firestore 보안 규칙을 확인하세요.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const deletePost = async (postId: string) => {\n    try {\n      await deleteDoc(doc(db, 'posts', postId));\n      setPosts(posts.filter(post => post.id !== postId));\n      \n      toast({\n        title: \"게시글 삭제 완료\",\n        description: \"게시글이 삭제되었습니다.\",\n      });\n    } catch (error) {\n      console.error('Error deleting post:', error);\n      toast({\n        title: \"게시글 삭제 실패\",\n        description: \"권한이 없거나 오류가 발생했습니다. Firestore 보안 규칙을 확인하세요.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <h1 className=\"text-2xl font-bold text-gray-900\" data-testid=\"title-admin-panel\">\n              <i className=\"fas fa-cog mr-2 text-primary\" />\n              관리자 패널\n            </h1>\n            <div className=\"text-sm text-gray-500\">\n              {appUser.username} (관리자)\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Tabs */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"-mb-px flex space-x-8\" aria-label=\"Tabs\">\n            {[\n              { id: 'users', name: '사용자 관리', icon: 'fas fa-users' },\n              { id: 'posts', name: '게시글 관리', icon: 'fas fa-file-alt' },\n              { id: 'matches', name: '매치 현황', icon: 'fas fa-trophy' },\n              { id: 'stats', name: '통계', icon: 'fas fa-chart-bar' },\n            ].map((tab) => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={`${\n                  activeTab === tab.id\n                    ? 'border-primary text-primary'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm flex items-center`}\n                data-testid={`tab-${tab.id}`}\n              >\n                <i className={`${tab.icon} mr-2`} />\n                {tab.name}\n              </button>\n            ))}\n          </nav>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {activeTab === 'users' && (\n          <div className=\"space-y-6\" data-testid=\"panel-users\">\n            <div className=\"bg-white shadow rounded-lg\">\n              <div className=\"px-6 py-4 border-b border-gray-200\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">\n                  사용자 관리 ({users.length}명)\n                </h2>\n              </div>\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-200\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        사용자\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        등급/포인트\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        전적\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        가입일\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        관리\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {users.map((user) => {\n                      const tier = calculateTier(user.points, user.wins, user.losses);\n                      return (\n                        <tr key={user.id} data-testid={`user-row-${user.id}`}>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center\">\n                              <img \n                                src={getAvatarSrc(user.photoURL, user, 256)}\n                                alt={user.username}\n                                className=\"w-10 h-10 rounded-full mr-4\"\n                              />\n                              <div>\n                                <div className=\"text-sm font-medium text-gray-900\">\n                                  {user.username}\n                                  {user.role === 'admin' && (\n                                    <span className=\"ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800\">\n                                      관리자\n                                    </span>\n                                  )}\n                                </div>\n                                <div className=\"text-sm text-gray-500\">{user.email}</div>\n                                <div className=\"text-xs text-gray-400\">NTRP {user.ntrp} • {user.region}</div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center\">\n                              <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium mr-2 ${tier.bgColor} ${tier.color}`}>\n                                {tier.name}\n                              </span>\n                              <span className=\"text-sm font-medium text-gray-900\">{user.points}P</span>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            {user.wins}승 {user.losses}패\n                            <div className=\"text-xs text-gray-500\">\n                              승률 {user.wins + user.losses > 0 ? Math.round((user.wins / (user.wins + user.losses)) * 100) : 0}%\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {new Date(user.createdAt).toLocaleDateString('ko-KR')}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                            <div className=\"flex space-x-2\">\n                              <input\n                                type=\"number\"\n                                defaultValue={user.points}\n                                className=\"w-20 px-2 py-1 border border-gray-300 rounded text-sm\"\n                                onKeyPress={(e) => {\n                                  if (e.key === 'Enter') {\n                                    const newPoints = parseInt((e.target as HTMLInputElement).value);\n                                    if (!isNaN(newPoints)) {\n                                      updateUserPoints(user.id, newPoints);\n                                    }\n                                  }\n                                }}\n                                data-testid={`input-points-${user.id}`}\n                              />\n                              <button\n                                onClick={() => {\n                                  const input = document.querySelector(`[data-testid=\"input-points-${user.id}\"]`) as HTMLInputElement;\n                                  const newPoints = parseInt(input.value);\n                                  if (!isNaN(newPoints)) {\n                                    updateUserPoints(user.id, newPoints);\n                                  }\n                                }}\n                                className=\"text-primary hover:text-primary-dark\"\n                                data-testid={`button-update-points-${user.id}`}\n                              >\n                                <i className=\"fas fa-save\" />\n                              </button>\n                            </div>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'posts' && (\n          <div className=\"space-y-6\" data-testid=\"panel-posts\">\n            <div className=\"bg-white shadow rounded-lg\">\n              <div className=\"px-6 py-4 border-b border-gray-200\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">\n                  게시글 관리 ({posts.length}개)\n                </h2>\n              </div>\n              <div className=\"divide-y divide-gray-200\">\n                {posts.map((post) => {\n                  const author = users.find(u => u.id === post.authorId);\n                  return (\n                    <div key={post.id} className=\"px-6 py-4\" data-testid={`post-${post.id}`}>\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"text-sm font-medium text-gray-900\">{post.title}</h3>\n                          <p className=\"text-sm text-gray-600 mt-1 line-clamp-2\">{post.content}</p>\n                          <div className=\"flex items-center mt-2 text-xs text-gray-500\">\n                            <span>{author?.username || '알 수 없는 사용자'}</span>\n                            <span className=\"mx-2\">•</span>\n                            <span>{new Date(post.createdAt).toLocaleDateString('ko-KR')}</span>\n                            <span className=\"mx-2\">•</span>\n                            <span>좋아요 {post.likes}</span>\n                          </div>\n                        </div>\n                        <button\n                          onClick={() => {\n                            if (confirm('이 게시글을 삭제하시겠습니까?')) {\n                              deletePost(post.id);\n                            }\n                          }}\n                          className=\"ml-4 text-red-600 hover:text-red-900\"\n                          data-testid={`button-delete-post-${post.id}`}\n                        >\n                          <i className=\"fas fa-trash\" />\n                        </button>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'stats' && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\" data-testid=\"panel-stats\">\n            <div className=\"bg-white shadow rounded-lg p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0\">\n                  <i className=\"fas fa-users text-2xl text-blue-600\" />\n                </div>\n                <div className=\"ml-5 w-0 flex-1\">\n                  <dt className=\"text-sm font-medium text-gray-500 truncate\">총 사용자</dt>\n                  <dd className=\"text-lg font-medium text-gray-900\">{users.length}명</dd>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-white shadow rounded-lg p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0\">\n                  <i className=\"fas fa-file-alt text-2xl text-green-600\" />\n                </div>\n                <div className=\"ml-5 w-0 flex-1\">\n                  <dt className=\"text-sm font-medium text-gray-500 truncate\">총 게시글</dt>\n                  <dd className=\"text-lg font-medium text-gray-900\">{posts.length}개</dd>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-white shadow rounded-lg p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0\">\n                  <i className=\"fas fa-trophy text-2xl text-yellow-600\" />\n                </div>\n                <div className=\"ml-5 w-0 flex-1\">\n                  <dt className=\"text-sm font-medium text-gray-500 truncate\">총 매치</dt>\n                  <dd className=\"text-lg font-medium text-gray-900\">{matches.length}경기</dd>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-white shadow rounded-lg p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0\">\n                  <i className=\"fas fa-check-circle text-2xl text-purple-600\" />\n                </div>\n                <div className=\"ml-5 w-0 flex-1\">\n                  <dt className=\"text-sm font-medium text-gray-500 truncate\">완료된 매치</dt>\n                  <dd className=\"text-lg font-medium text-gray-900\">\n                    {matches.filter(m => m.status === 'completed').length}경기\n                  </dd>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":17441},"client/src/components/AdminPromotion.tsx":{"content":"import { doc, updateDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function AdminPromotion() {\n  const { appUser, user } = useAuth();\n  const { toast } = useToast();\n\n  const promoteToAdmin = async () => {\n    if (!user || !appUser) return;\n    \n    try {\n      const userRef = doc(db, 'users', user.uid);\n      await updateDoc(userRef, {\n        role: 'admin'\n      });\n      \n      toast({\n        title: \"관리자 권한 부여 완료\",\n        description: \"페이지를 새로고침하여 관리자 기능을 활성화하세요.\",\n      });\n    } catch (error) {\n      console.error('Error promoting to admin:', error);\n      toast({\n        title: \"권한 부여 실패\",\n        description: \"관리자 권한 부여 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Only show if user doesn't have admin role AND in development mode\n  if (appUser?.role === 'admin' || import.meta.env.NODE_ENV === 'production') {\n    return null;\n  }\n\n  return (\n    <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-4 mb-4\">\n      <div className=\"flex items-center space-x-3\">\n        <i className=\"fas fa-crown text-amber-500 text-lg\" />\n        <div className=\"flex-1\">\n          <h3 className=\"font-medium text-amber-800\">개발/테스트 모드</h3>\n          <p className=\"text-sm text-amber-600 mt-1\">\n            관리자 기능을 테스트하려면 관리자 권한을 활성화하세요.\n          </p>\n        </div>\n        <button\n          onClick={promoteToAdmin}\n          className=\"px-4 py-2 bg-amber-500 text-white text-sm rounded-lg hover:bg-amber-600 transition-colors\"\n          data-testid=\"button-promote-admin\"\n        >\n          관리자 활성화\n        </button>\n      </div>\n    </div>\n  );\n}","size_bytes":1906},"client/src/firestore-rules.md":{"content":"# Firebase Firestore Security Rules\n\n아래 규칙을 Firebase Console > Firestore Database > Rules에 추가해야 합니다:\n\n```javascript\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Users collection - Users can only update their own document, except for admin-only fields\n    match /users/{userId} {\n      allow read: if true; // Anyone can read user profiles (needed for player matching)\n      allow create: if request.auth != null && request.auth.uid == userId;\n      allow update: if request.auth != null && request.auth.uid == userId \n        && !isAdminOnlyField(request.resource.data, resource.data);\n      allow delete: if false; // Users cannot be deleted\n    }\n    \n    // Admin-only user operations\n    match /users/{userId} {\n      // Only admins can update points, role, and other admin fields\n      allow update: if request.auth != null \n        && isAdmin(request.auth.uid)\n        && isAdminOnlyUpdate(request.resource.data, resource.data);\n    }\n    \n    // Posts collection\n    match /posts/{postId} {\n      allow read: if true; // Anyone can read posts\n      allow create: if request.auth != null;\n      allow update: if request.auth != null \n        && (request.auth.uid == resource.data.authorId || isAdmin(request.auth.uid));\n      allow delete: if request.auth != null \n        && (request.auth.uid == resource.data.authorId || isAdmin(request.auth.uid));\n    }\n    \n    // Matches collection\n    match /matches/{matchId} {\n      allow read: if request.auth != null;\n      allow create: if request.auth != null;\n      allow update: if request.auth != null \n        && (request.auth.uid == resource.data.requesterId \n            || request.auth.uid == resource.data.targetId \n            || isAdmin(request.auth.uid));\n      allow delete: if isAdmin(request.auth.uid);\n    }\n    \n    // Chats collection\n    match /chats/{chatId} {\n      allow read: if request.auth != null;\n      allow create: if request.auth != null;\n      allow update: if false; // Chats are immutable\n      allow delete: if isAdmin(request.auth.uid);\n    }\n    \n    // Helper functions\n    function isAdmin(userId) {\n      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';\n    }\n    \n    function isAdminOnlyField(newData, oldData) {\n      return newData.keys().hasAny(['role', 'points']) && \n        (newData.role != oldData.role || newData.points != oldData.points);\n    }\n    \n    function isAdminOnlyUpdate(newData, oldData) {\n      return newData.keys().hasAny(['role', 'points']);\n    }\n  }\n}\n```\n\n## 보안 규칙 설명\n\n### 사용자 관리\n- ✅ 모든 사용자가 프로필 읽기 가능 (매치 찾기용)\n- ✅ 사용자는 본인 문서만 생성/수정 가능\n- ❌ `role`, `points` 같은 관리자 전용 필드는 일반 사용자 수정 불가\n- ✅ 관리자만 다른 사용자의 포인트와 역할 수정 가능\n\n### 게시글 관리\n- ✅ 작성자 또는 관리자만 게시글 수정/삭제 가능\n\n### 매치 관리\n- ✅ 매치 참여자 또는 관리자만 매치 상태 수정 가능\n\n이 규칙들은 클라이언트 측 검증을 우회하려는 시도를 서버에서 차단합니다.","size_bytes":3202},"client/src/components/FeedbackModal.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { useFirestore } from '@/hooks/use-firebase';\nimport { useAuth } from '@/hooks/use-auth';\n\ninterface FeedbackModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function FeedbackModal({ isOpen, onClose }: FeedbackModalProps) {\n  const [feedback, setFeedback] = useState('');\n  const [category, setCategory] = useState('suggestion');\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n  const { addDocument } = useFirestore();\n  const { appUser } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!feedback.trim()) {\n      toast({\n        title: \"피드백을 입력해주세요\",\n        description: \"피드백 내용을 작성해주세요.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!appUser) {\n      toast({\n        title: \"로그인이 필요합니다\",\n        description: \"피드백을 제출하려면 로그인해주세요.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      await addDocument('feedback', {\n        userId: appUser.id,\n        username: appUser.username,\n        category,\n        content: feedback,\n        status: 'new'\n      });\n\n      toast({\n        title: \"피드백이 제출되었습니다\",\n        description: \"소중한 의견 감사합니다. 검토 후 반영하겠습니다.\",\n      });\n\n      setFeedback('');\n      setCategory('suggestion');\n      onClose();\n    } catch (error) {\n      console.error('Error submitting feedback:', error);\n      toast({\n        title: \"피드백 제출 실패\",\n        description: \"오류가 발생했습니다. 다시 시도해주세요.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50\" data-testid=\"feedback-modal\">\n      <div className=\"bg-white rounded-2xl p-6 w-full max-w-md mx-4 shadow-xl\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-xl font-bold text-gray-900\">서비스 개선 제안</h2>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-gray-100 rounded-full transition-colors\"\n            data-testid=\"button-close-feedback\"\n          >\n            <i className=\"fas fa-times text-gray-500\" />\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Category Selection */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              카테고리\n            </label>\n            <select\n              value={category}\n              onChange={(e) => setCategory(e.target.value)}\n              className=\"w-full p-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-transparent\"\n              data-testid=\"select-feedback-category\"\n            >\n              <option value=\"suggestion\">개선 제안</option>\n              <option value=\"bug\">버그 신고</option>\n              <option value=\"feature\">새 기능 요청</option>\n              <option value=\"other\">기타</option>\n            </select>\n          </div>\n\n          {/* Feedback Content */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              피드백 내용\n            </label>\n            <textarea\n              value={feedback}\n              onChange={(e) => setFeedback(e.target.value)}\n              placeholder=\"서비스 개선을 위한 소중한 의견을 들려주세요...\"\n              rows={4}\n              className=\"w-full p-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-transparent resize-none\"\n              data-testid=\"textarea-feedback-content\"\n            />\n            <div className=\"text-xs text-gray-500 mt-1\">\n              {feedback.length}/500\n            </div>\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex space-x-3 pt-2\">\n            <Button\n              type=\"button\"\n              onClick={onClose}\n              variant=\"outline\"\n              className=\"flex-1\"\n              data-testid=\"button-cancel-feedback\"\n            >\n              취소\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={loading || !feedback.trim()}\n              className=\"flex-1 bg-green-600 hover:bg-green-700 text-white\"\n              data-testid=\"button-submit-feedback\"\n            >\n              {loading ? (\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n              ) : (\n                <i className=\"fas fa-paper-plane mr-2\" />\n              )}\n              {loading ? '제출 중...' : '제출하기'}\n            </Button>\n          </div>\n        </form>\n\n        {/* Footer */}\n        <div className=\"mt-4 p-3 bg-green-50 rounded-xl\">\n          <p className=\"text-xs text-green-700 text-center\">\n            <i className=\"fas fa-info-circle mr-1\" />\n            모든 피드백은 익명으로 처리되며, 서비스 개선에 활용됩니다.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5441},"client/src/components/InputValidation.tsx":{"content":"import { useState, useEffect } from 'react';\n\ninterface InputValidationProps {\n  value: string;\n  rules: {\n    required?: boolean;\n    minLength?: number;\n    maxLength?: number;\n    pattern?: RegExp;\n    custom?: (value: string) => string | null;\n  };\n  onValidationChange?: (isValid: boolean, message: string) => void;\n  showValidation?: boolean;\n}\n\nexport default function InputValidation({ \n  value, \n  rules, \n  onValidationChange,\n  showValidation = true \n}: InputValidationProps) {\n  const [isValid, setIsValid] = useState(true);\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    validateInput();\n  }, [value]);\n\n  const validateInput = () => {\n    let validationMessage = '';\n    let valid = true;\n\n    // Required validation\n    if (rules.required && !value.trim()) {\n      validationMessage = '필수 입력 항목입니다';\n      valid = false;\n    }\n    \n    // Min length validation\n    else if (rules.minLength && value.length < rules.minLength) {\n      validationMessage = `최소 ${rules.minLength}자 이상 입력해주세요`;\n      valid = false;\n    }\n    \n    // Max length validation\n    else if (rules.maxLength && value.length > rules.maxLength) {\n      validationMessage = `최대 ${rules.maxLength}자까지 입력 가능합니다`;\n      valid = false;\n    }\n    \n    // Pattern validation\n    else if (rules.pattern && value && !rules.pattern.test(value)) {\n      validationMessage = '올바른 형식으로 입력해주세요';\n      valid = false;\n    }\n    \n    // Custom validation\n    else if (rules.custom && value) {\n      const customMessage = rules.custom(value);\n      if (customMessage) {\n        validationMessage = customMessage;\n        valid = false;\n      }\n    }\n\n    setIsValid(valid);\n    setMessage(validationMessage);\n    \n    if (onValidationChange) {\n      onValidationChange(valid, validationMessage);\n    }\n  };\n\n  if (!showValidation || !message) {\n    return null;\n  }\n\n  return (\n    <div className={`mt-1 text-xs flex items-center ${isValid ? 'text-green-600' : 'text-red-600'}`}>\n      <i className={`fas ${isValid ? 'fa-check-circle' : 'fa-exclamation-circle'} mr-1`} />\n      {message}\n    </div>\n  );\n}\n\n// Common validation patterns\nexport const validationPatterns = {\n  email: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n  phone: /^[0-9]{10,11}$/,\n  ntrp: /^[1-7](\\.[0-5])?$/,\n  username: /^[a-zA-Z0-9가-힣_]{2,20}$/,\n};\n\n// Common validation rules\nexport const validationRules = {\n  username: {\n    required: true,\n    minLength: 2,\n    maxLength: 20,\n    pattern: validationPatterns.username,\n    custom: (value: string) => {\n      if (value.includes('admin') || value.includes('관리자')) {\n        return '사용할 수 없는 닉네임입니다';\n      }\n      return null;\n    }\n  },\n  ntrp: {\n    required: true,\n    pattern: validationPatterns.ntrp,\n    custom: (value: string) => {\n      const num = parseFloat(value);\n      if (num < 1.0 || num > 7.0) {\n        return 'NTRP는 1.0-7.0 사이의 값이어야 합니다';\n      }\n      return null;\n    }\n  },\n  bio: {\n    maxLength: 200,\n  },\n  postTitle: {\n    required: true,\n    minLength: 2,\n    maxLength: 100,\n  },\n  postContent: {\n    required: true,\n    minLength: 10,\n    maxLength: 1000,\n  }\n};","size_bytes":3240},"client/src/components/FirebaseSetupGuide.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\n\nexport default function FirebaseSetupGuide() {\n  const [showGuide, setShowGuide] = useState(false);\n  const currentDomain = window.location.origin;\n\n  if (!showGuide) {\n    return (\n      <div className=\"mt-4 p-4 bg-amber-50 border border-amber-200 rounded-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <i className=\"fas fa-exclamation-triangle text-amber-500\" />\n            <span className=\"text-sm text-amber-700\">\n              로그인에 문제가 있나요?\n            </span>\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setShowGuide(true)}\n            className=\"text-amber-700 border-amber-300 hover:bg-amber-100\"\n          >\n            설정 가이드\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mt-4 p-4 bg-amber-50 border border-amber-200 rounded-lg\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-amber-800\">\n          <i className=\"fas fa-cog mr-2\" />\n          Firebase 도메인 설정 가이드\n        </h3>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setShowGuide(false)}\n          className=\"text-amber-700\"\n        >\n          <i className=\"fas fa-times\" />\n        </Button>\n      </div>\n      \n      <div className=\"space-y-4 text-sm text-amber-700\">\n        <div className=\"bg-white p-3 rounded border\">\n          <strong>현재 도메인:</strong>\n          <code className=\"ml-2 px-2 py-1 bg-gray-100 rounded text-xs font-mono\">\n            {currentDomain}\n          </code>\n        </div>\n        \n        <div>\n          <strong>Firebase Console 설정 단계:</strong>\n          <ol className=\"list-decimal list-inside mt-2 space-y-2 ml-4\">\n            <li>\n              <a \n                href=\"https://console.firebase.google.com\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"text-blue-600 underline hover:text-blue-800\"\n              >\n                Firebase Console\n              </a>에 접속하여 프로젝트 선택\n            </li>\n            <li>\n              왼쪽 메뉴에서 <strong>Authentication</strong> → <strong>Settings</strong> 클릭\n            </li>\n            <li>\n              <strong>승인된 도메인</strong> 섹션에서 <strong>도메인 추가</strong> 클릭\n            </li>\n            <li>\n              다음 도메인을 추가:\n              <div className=\"mt-1 p-2 bg-gray-100 rounded font-mono text-xs\">\n                {currentDomain.replace('https://', '').replace('http://', '')}\n              </div>\n            </li>\n            <li>\n              <strong>Google</strong> 인증 제공업체가 활성화되어 있는지 확인\n            </li>\n          </ol>\n        </div>\n        \n        <div className=\"bg-blue-50 p-3 rounded border-l-4 border-blue-400\">\n          <p>\n            <strong>💡 팁:</strong> 도메인 설정 후 몇 분 기다린 다음 페이지를 새로고침하여 다시 시도해보세요.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3333},"client/src/components/MatchHistoryModal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useFirestoreCollection } from '@/hooks/use-firebase';\nimport { Match } from '@shared/schema';\n\ninterface MatchHistoryModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function MatchHistoryModal({ isOpen, onClose }: MatchHistoryModalProps) {\n  const { user } = useAuth();\n  \n  // Get matches where user is requester\n  const { data: requestedMatches, loading: requestedLoading } = useFirestoreCollection<Match & { id: string }>(\n    'matches',\n    user ? [{ field: 'requesterId', operator: '==', value: user.uid }] : [],\n    'createdAt',\n    'desc'\n  );\n  \n  // Get matches where user is target\n  const { data: targetedMatches, loading: targetedLoading } = useFirestoreCollection<Match & { id: string }>(\n    'matches',\n    user ? [{ field: 'targetId', operator: '==', value: user.uid }] : [],\n    'createdAt',\n    'desc'\n  );\n  \n  // Combine and sort all matches\n  const allMatches = [...requestedMatches, ...targetedMatches]\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  \n  const loading = requestedLoading || targetedLoading;\n\n  if (!isOpen) return null;\n\n  const getMatchStatus = (match: Match) => {\n    if (match.status === 'completed') {\n      // Note: Match schema doesn't have winnerId, so we'll show completion status\n      return {\n        text: '완료',\n        color: 'text-green-600 bg-green-100',\n        icon: 'fas fa-trophy'\n      };\n    } else if (match.status === 'accepted') {\n      return {\n        text: '진행중',\n        color: 'text-blue-600 bg-blue-100',\n        icon: 'fas fa-clock'\n      };\n    } else if (match.status === 'pending') {\n      return {\n        text: '대기중',\n        color: 'text-yellow-600 bg-yellow-100',\n        icon: 'fas fa-hourglass-half'\n      };\n    } else {\n      return {\n        text: '취소됨',\n        color: 'text-gray-600 bg-gray-100',\n        icon: 'fas fa-ban'\n      };\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-xl max-w-md w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-xl font-bold text-gray-900\">\n              <i className=\"fas fa-history mr-2 text-green-600\" />\n              경기 기록\n            </h2>\n            <button\n              onClick={onClose}\n              className=\"text-gray-400 hover:text-gray-600\"\n              data-testid=\"button-close-match-history\"\n            >\n              <i className=\"fas fa-times text-xl\" />\n            </button>\n          </div>\n\n          {loading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\" />\n              <span className=\"ml-2 text-gray-600\">로딩 중...</span>\n            </div>\n          ) : allMatches.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <i className=\"fas fa-inbox text-4xl text-gray-400 mb-4\" />\n              <p className=\"text-gray-600 mb-2\">경기 기록이 없습니다</p>\n              <p className=\"text-sm text-gray-500\">첫 매치를 신청해보세요!</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\" data-testid=\"match-history-list\">\n              {allMatches.map((match) => {\n                const status = getMatchStatus(match);\n                const isRequester = match.requesterId === user?.uid;\n                const opponentId = isRequester ? match.targetId : match.requesterId;\n                const role = isRequester ? '신청함' : '신청받음';\n                \n                return (\n                  <div\n                    key={match.id}\n                    className=\"border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors\"\n                    data-testid={`match-item-${match.id}`}\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center\">\n                        <i className={`fas ${isRequester ? 'fa-arrow-right' : 'fa-arrow-left'} text-gray-500 mr-2`} />\n                        <span className=\"font-medium text-gray-900\">\n                          {role}: {opponentId || '알 수 없음'}\n                        </span>\n                      </div>\n                      <div className={`px-2 py-1 rounded-full text-xs font-medium flex items-center ${status.color}`}>\n                        <i className={`${status.icon} mr-1`} />\n                        {status.text}\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-sm text-gray-600 space-y-1\">\n                      <div className=\"flex items-center\">\n                        <i className=\"fas fa-calendar text-gray-400 mr-2 w-4\" />\n                        <span>{new Date(match.createdAt).toLocaleDateString('ko-KR')}</span>\n                      </div>\n                      \n                      <div className=\"flex items-center\">\n                        <i className=\"fas fa-map-marker-alt text-gray-400 mr-2 w-4\" />\n                        <span>{match.location || '위치 미정'}</span>\n                      </div>\n                      \n                      <div className=\"flex items-center\">\n                        <i className=\"fas fa-clock text-gray-400 mr-2 w-4\" />\n                        <span>{match.scheduledAt ? new Date(match.scheduledAt).toLocaleString('ko-KR') : '시간 미정'}</span>\n                      </div>\n\n                      {/* Test version note */}\n                      <div className=\"flex items-center pt-1\">\n                        <i className=\"fas fa-tag text-green-500 mr-2 w-4\" />\n                        <span className=\"text-xs text-green-600 font-medium\">테스트 버전 - 무료</span>\n                      </div>\n\n                      {match.status === 'completed' && (\n                        <div className=\"flex items-center pt-2\">\n                          <i className=\"fas fa-star text-yellow-400 mr-2 w-4\" />\n                          <span className=\"text-xs\">경기 완료</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n\n          <div className=\"mt-6\">\n            <Button\n              onClick={onClose}\n              className=\"w-full\"\n              data-testid=\"button-close-match-history-bottom\"\n            >\n              닫기\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6871},"client/src/components/PointChargeModal.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface PointChargeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function PointChargeModal({ isOpen, onClose }: PointChargeModalProps) {\n  const { appUser, updateAppUser } = useAuth();\n  const { toast } = useToast();\n  const [selectedAmount, setSelectedAmount] = useState<number>(0);\n  const [loading, setLoading] = useState(false);\n\n  // 테스트 버전용 포인트 패키지\n  const pointPackages = [\n    { amount: 100, label: '100P', description: '테스트용' },\n    { amount: 500, label: '500P', description: '테스트용' },\n    { amount: 1000, label: '1000P', description: '테스트용' },\n    { amount: 2000, label: '2000P', description: '테스트용' }\n  ];\n\n  const handleCharge = async () => {\n    if (selectedAmount === 0) {\n      toast({\n        title: \"포인트 선택 필요\",\n        description: \"충전할 포인트를 선택해주세요.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const newPoints = (appUser?.points || 0) + selectedAmount;\n      await updateAppUser({ points: newPoints });\n      \n      toast({\n        title: \"포인트 충전 완료\",\n        description: `${selectedAmount}P가 충전되었습니다! (현재 ${newPoints}P)`,\n      });\n      \n      onClose();\n      setSelectedAmount(0);\n    } catch (error) {\n      console.error('Point charge error:', error);\n      toast({\n        title: \"포인트 충전 실패\",\n        description: \"포인트 충전 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-xl max-w-md w-full\">\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-xl font-bold text-gray-900\">\n              <i className=\"fas fa-coins mr-2 text-accent\" />\n              포인트 충전\n            </h2>\n            <button\n              onClick={onClose}\n              className=\"text-gray-400 hover:text-gray-600\"\n              data-testid=\"button-close-point-charge\"\n            >\n              <i className=\"fas fa-times text-xl\" />\n            </button>\n          </div>\n\n          {/* 테스트 버전 안내 */}\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-center\">\n              <i className=\"fas fa-info-circle text-blue-500 mr-2\" />\n              <div>\n                <p className=\"text-sm font-medium text-blue-800\">테스트 버전</p>\n                <p className=\"text-xs text-blue-600 mt-1\">\n                  현재는 테스트 버전으로 포인트를 무료로 충전할 수 있습니다.\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* 현재 포인트 */}\n          <div className=\"text-center mb-6\">\n            <div className=\"text-2xl font-bold text-primary\" data-testid=\"current-points\">\n              {appUser?.points || 0}P\n            </div>\n            <div className=\"text-sm text-gray-500\">현재 보유 포인트</div>\n          </div>\n\n          {/* 포인트 패키지 */}\n          <div className=\"grid grid-cols-2 gap-3 mb-6\">\n            {pointPackages.map((pkg) => (\n              <button\n                key={pkg.amount}\n                onClick={() => setSelectedAmount(pkg.amount)}\n                className={`p-4 rounded-xl border-2 text-center transition-all ${\n                  selectedAmount === pkg.amount\n                    ? 'border-primary bg-primary/5'\n                    : 'border-gray-200 hover:border-primary/50'\n                }`}\n                data-testid={`point-package-${pkg.amount}`}\n              >\n                <div className=\"text-lg font-bold text-gray-900\">{pkg.label}</div>\n                <div className=\"text-xs text-gray-500\">{pkg.description}</div>\n                {selectedAmount === pkg.amount && (\n                  <i className=\"fas fa-check-circle text-primary mt-1\" />\n                )}\n              </button>\n            ))}\n          </div>\n\n          {/* 매칭 비용 안내 */}\n          <div className=\"bg-green-50 border border-green-200 rounded-lg p-3 mb-6\">\n            <div className=\"flex items-center\">\n              <i className=\"fas fa-trophy text-green-500 mr-2\" />\n              <div className=\"text-xs text-green-700\">\n                <p className=\"font-medium\">테스트 버전 안내</p>\n                <p>매치 참가비: <span className=\"font-bold\">0P</span> (무료)</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex space-x-3\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"flex-1\"\n              disabled={loading}\n              data-testid=\"button-cancel-point-charge\"\n            >\n              취소\n            </Button>\n            <Button\n              onClick={handleCharge}\n              className=\"flex-1\"\n              disabled={loading || selectedAmount === 0}\n              data-testid=\"button-confirm-point-charge\"\n            >\n              {loading ? \"충전 중...\" : `${selectedAmount}P 충전`}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5589},"client/src/components/ProfileEditModal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { User } from '@shared/schema';\n\ninterface ProfileEditModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function ProfileEditModal({ isOpen, onClose }: ProfileEditModalProps) {\n  const { appUser, updateAppUser } = useAuth();\n  const { toast } = useToast();\n  \n  const [formData, setFormData] = useState({\n    username: '',\n    age: '',\n    region: '',\n    ntrp: '',\n    bio: '',\n    availableTimes: [] as string[]\n  });\n  \n  const [loading, setLoading] = useState(false);\n\n  const regions = [\n    '서울', '부산', '인천', '대구', '대전', '광주', '울산', '세종',\n    '경기', '강원', '충북', '충남', '전북', '전남', '경북', '경남', '제주'\n  ];\n\n  const timeSlots = [\n    '평일 오전', '평일 오후', '평일 저녁',\n    '주말 오전', '주말 오후', '주말 저녁'\n  ];\n\n  useEffect(() => {\n    if (isOpen && appUser) {\n      setFormData({\n        username: appUser.username || '',\n        age: appUser.age ? appUser.age.toString() : '',\n        region: appUser.region || '',\n        ntrp: appUser.ntrp ? appUser.ntrp.toString() : '',\n        bio: appUser.bio || '',\n        availableTimes: appUser.availableTimes || []\n      });\n    }\n  }, [isOpen, appUser]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      const updateData: Partial<User> = {\n        username: formData.username,\n        age: formData.age,\n        region: formData.region,\n        ntrp: formData.ntrp,\n        bio: formData.bio,\n        availableTimes: formData.availableTimes\n      };\n\n      await updateAppUser(updateData);\n      \n      toast({\n        title: \"프로필 수정 완료\",\n        description: \"프로필이 성공적으로 업데이트되었습니다.\",\n      });\n      \n      onClose();\n    } catch (error) {\n      console.error('Profile update error:', error);\n      toast({\n        title: \"프로필 수정 실패\",\n        description: \"프로필 업데이트 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleTimeSlot = (timeSlot: string) => {\n    setFormData(prev => ({\n      ...prev,\n      availableTimes: prev.availableTimes.includes(timeSlot)\n        ? prev.availableTimes.filter(t => t !== timeSlot)\n        : [...prev.availableTimes, timeSlot]\n    }));\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-xl max-w-md w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-xl font-bold text-gray-900\">\n              <i className=\"fas fa-user-edit mr-2 text-primary\" />\n              프로필 수정\n            </h2>\n            <button\n              onClick={onClose}\n              className=\"text-gray-400 hover:text-gray-600\"\n              data-testid=\"button-close-profile-edit\"\n            >\n              <i className=\"fas fa-times text-xl\" />\n            </button>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                닉네임\n              </label>\n              <input\n                type=\"text\"\n                value={formData.username}\n                onChange={(e) => setFormData(prev => ({ ...prev, username: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary\"\n                required\n                data-testid=\"input-username\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                나이\n              </label>\n              <input\n                type=\"text\"\n                value={formData.age}\n                onChange={(e) => setFormData(prev => ({ ...prev, age: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary\"\n                placeholder=\"나이를 입력하세요\"\n                required\n                data-testid=\"input-age\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                지역\n              </label>\n              <select\n                value={formData.region}\n                onChange={(e) => setFormData(prev => ({ ...prev, region: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary\"\n                required\n                data-testid=\"select-region\"\n              >\n                <option value=\"\">지역 선택</option>\n                {regions.map(region => (\n                  <option key={region} value={region}>{region}</option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                NTRP 레이팅\n              </label>\n              <select\n                value={formData.ntrp}\n                onChange={(e) => setFormData(prev => ({ ...prev, ntrp: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary\"\n                required\n                data-testid=\"select-ntrp\"\n              >\n                <option value=\"\">NTRP 선택</option>\n                {[2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0].map(rating => (\n                  <option key={rating} value={rating.toString()}>{rating}</option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                자기소개\n              </label>\n              <textarea\n                value={formData.bio}\n                onChange={(e) => setFormData(prev => ({ ...prev, bio: e.target.value }))}\n                placeholder=\"간단한 자기소개를 작성해주세요...\"\n                rows={3}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary resize-none\"\n                data-testid=\"textarea-bio\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                가능한 시간\n              </label>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {timeSlots.map(timeSlot => (\n                  <button\n                    key={timeSlot}\n                    type=\"button\"\n                    onClick={() => toggleTimeSlot(timeSlot)}\n                    className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors ${\n                      formData.availableTimes.includes(timeSlot)\n                        ? 'bg-primary text-white'\n                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                    }`}\n                    data-testid={`toggle-time-${timeSlot.replace(' ', '-')}`}\n                  >\n                    {timeSlot}\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onClose}\n                className=\"flex-1\"\n                disabled={loading}\n                data-testid=\"button-cancel-profile-edit\"\n              >\n                취소\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"flex-1\"\n                disabled={loading}\n                data-testid=\"button-save-profile-edit\"\n              >\n                {loading ? \"저장 중...\" : \"저장\"}\n              </Button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8404},"client/src/components/ShopModal.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\n\ninterface ShopModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function ShopModal({ isOpen, onClose }: ShopModalProps) {\n  if (!isOpen) return null;\n\n  const comingSoonItems = [\n    {\n      id: 'premium-racket',\n      name: '프리미엄 라켓 스킨',\n      description: '경기에서 스타일을 뽐내세요',\n      price: 500,\n      icon: '🎾'\n    },\n    {\n      id: 'court-background',\n      name: '전용 코트 배경',\n      description: '나만의 테니스 코트 테마',\n      price: 300,\n      icon: '🏟️'\n    },\n    {\n      id: 'victory-celebration',\n      name: '승리 축하 이모티콘',\n      description: '승리 후 특별한 애니메이션',\n      price: 200,\n      icon: '🏆'\n    },\n    {\n      id: 'nickname-decoration',\n      name: '닉네임 장식',\n      description: '특별한 닉네임 효과',\n      price: 150,\n      icon: '✨'\n    }\n  ];\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-xl max-w-md w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-xl font-bold text-gray-900\">\n              <i className=\"fas fa-store mr-2 text-green-600\" />\n              클럽 랭크 상점\n            </h2>\n            <button\n              onClick={onClose}\n              className=\"text-gray-400 hover:text-gray-600\"\n              data-testid=\"button-close-shop\"\n            >\n              <i className=\"fas fa-times text-xl\" />\n            </button>\n          </div>\n\n          {/* 상점 헤더 */}\n          <div className=\"bg-gradient-to-r from-green-500 to-green-600 rounded-xl p-4 mb-6 text-white\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <i className=\"fas fa-rocket text-2xl mr-2\" />\n              <h3 className=\"text-lg font-bold\">향후 업데이트 예정!</h3>\n            </div>\n            <p className=\"text-center text-sm text-green-100\">\n              경기에서 획득한 포인트로 다양한 아이템을 구매할 수 있습니다\n            </p>\n          </div>\n\n          {/* Coming Soon 안내 */}\n          <div className=\"text-center mb-6\">\n            <div className=\"inline-flex items-center px-4 py-2 bg-amber-100 text-amber-800 rounded-full text-sm font-medium\">\n              <i className=\"fas fa-clock mr-2\" />\n              2025년 상반기 오픈 예정\n            </div>\n          </div>\n\n          {/* 예정 아이템 목록 */}\n          <div className=\"space-y-3 mb-6\">\n            <h4 className=\"font-semibold text-gray-900 text-center\">미리보기 아이템</h4>\n            {comingSoonItems.map((item) => (\n              <div\n                key={item.id}\n                className=\"border border-gray-200 rounded-lg p-4 relative overflow-hidden\"\n                data-testid={`shop-item-${item.id}`}\n              >\n                {/* Coming Soon 오버레이 */}\n                <div className=\"absolute inset-0 bg-gray-50/90 flex items-center justify-center z-10\">\n                  <span className=\"text-sm font-medium text-gray-600 bg-white px-3 py-1 rounded-full shadow-sm\">\n                    Coming Soon\n                  </span>\n                </div>\n                \n                <div className=\"flex items-center\">\n                  <div className=\"text-3xl mr-4\">{item.icon}</div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-medium text-gray-900\">{item.name}</h3>\n                    <p className=\"text-sm text-gray-600\">{item.description}</p>\n                    <div className=\"flex items-center mt-2\">\n                      <i className=\"fas fa-coins text-yellow-500 mr-1\" />\n                      <span className=\"font-bold text-green-600\">{item.price}P</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* 특별 혜택 안내 */}\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-start\">\n              <i className=\"fas fa-gift text-blue-500 mr-2 mt-1\" />\n              <div>\n                <p className=\"text-sm font-medium text-blue-800\">런칭 기념 혜택</p>\n                <p className=\"text-xs text-blue-600 mt-1\">\n                  상점 오픈 시 모든 사용자에게 <span className=\"font-bold\">500P 보너스</span> 지급 예정!\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* 포인트 활용 가이드 */}\n          <div className=\"bg-gray-50 rounded-lg p-4 mb-6\">\n            <h4 className=\"font-medium text-gray-900 mb-2\">\n              <i className=\"fas fa-lightbulb text-yellow-500 mr-2\" />\n              포인트 획득 방법\n            </h4>\n            <div className=\"text-sm text-gray-600 space-y-1\">\n              <p>• 🏆 경기 승리: +25P</p>\n              <p>• 🤝 경기 참여: +5P</p>\n              <p>• 📝 커뮤니티 활동: +10P</p>\n              <p>• 🎯 일일 로그인: +5P</p>\n            </div>\n          </div>\n\n          <div className=\"flex space-x-3\">\n            <Button\n              onClick={onClose}\n              className=\"flex-1 bg-green-600 hover:bg-green-700\"\n              data-testid=\"button-shop-close\"\n            >\n              <i className=\"fas fa-check mr-2\" />\n              확인\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5677},"client/src/hooks/use-chat.ts":{"content":"import { useState, useEffect } from 'react';\nimport { \n  collection, \n  doc, \n  addDoc, \n  query, \n  where, \n  orderBy, \n  onSnapshot, \n  serverTimestamp,\n  getDocs,\n  updateDoc,\n  Timestamp\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { useAuth } from './use-auth';\nimport { ChatRoom, Message, InsertMessage, InsertChatRoom } from '@shared/schema';\n\nexport function useChat() {\n  const { user } = useAuth();\n  const [chatRooms, setChatRooms] = useState<ChatRoom[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  // 사용자의 채팅방 목록 실시간 구독\n  useEffect(() => {\n    if (!user) return;\n\n    const chatRoomsQuery = query(\n      collection(db, 'chatRooms'),\n      where('participants', 'array-contains', user.uid)\n    );\n\n    const unsubscribe = onSnapshot(chatRoomsQuery, (snapshot) => {\n      const rooms: ChatRoom[] = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        createdAt: doc.data().createdAt?.toDate() || new Date(),\n        updatedAt: doc.data().updatedAt?.toDate() || new Date(),\n        lastMessageAt: doc.data().lastMessageAt?.toDate() || undefined,\n      } as ChatRoom));\n      \n      // Sort on client side to avoid composite index requirement\n      const sortedRooms = rooms.sort((a, b) => {\n        const timeA = a.updatedAt ? a.updatedAt.getTime() : 0;\n        const timeB = b.updatedAt ? b.updatedAt.getTime() : 0;\n        return timeB - timeA; // Descending order\n      });\n      \n      setChatRooms(sortedRooms);\n    });\n\n    return () => unsubscribe();\n  }, [user]);\n\n  // 1:1 채팅방 생성 또는 기존 채팅방 찾기\n  const createOrFindChatRoom = async (otherUserId: string): Promise<string> => {\n    if (!user) throw new Error('User not authenticated');\n    \n    setLoading(true);\n    try {\n      // 기존 채팅방이 있는지 확인\n      const existingRoomQuery = query(\n        collection(db, 'chatRooms'),\n        where('participants', '==', [user.uid, otherUserId].sort())\n      );\n      \n      const existingRoomSnapshot = await getDocs(existingRoomQuery);\n      \n      if (!existingRoomSnapshot.empty) {\n        return existingRoomSnapshot.docs[0].id;\n      }\n\n      // 새 채팅방 생성\n      const newRoomData: InsertChatRoom = {\n        participants: [user.uid, otherUserId].sort(),\n      };\n\n      const docRef = await addDoc(collection(db, 'chatRooms'), {\n        ...newRoomData,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      });\n\n      return docRef.id;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 메시지 전송\n  const sendMessage = async (chatRoomId: string, content: string): Promise<void> => {\n    if (!user) throw new Error('User not authenticated');\n\n    const messageData: InsertMessage = {\n      chatRoomId,\n      senderId: user.uid,\n      content: content.trim(),\n    };\n\n    // 메시지 추가\n    await addDoc(collection(db, 'messages'), {\n      ...messageData,\n      createdAt: serverTimestamp(),\n    });\n\n    // 채팅방의 lastMessage와 lastMessageAt 업데이트\n    const chatRoomRef = doc(db, 'chatRooms', chatRoomId);\n    await updateDoc(chatRoomRef, {\n      lastMessage: content.trim(),\n      lastMessageAt: serverTimestamp(),\n      updatedAt: serverTimestamp(),\n    });\n  };\n\n  return {\n    chatRooms,\n    loading,\n    createOrFindChatRoom,\n    sendMessage,\n  };\n}\n\n// 특정 채팅방의 메시지들을 실시간으로 구독하는 hook\nexport function useChatMessages(chatRoomId: string | null) {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (!chatRoomId) {\n      setMessages([]);\n      return;\n    }\n\n    setLoading(true);\n    \n    const messagesQuery = query(\n      collection(db, 'messages'),\n      where('chatRoomId', '==', chatRoomId)\n    );\n\n    const unsubscribe = onSnapshot(messagesQuery, (snapshot) => {\n      const messageList: Message[] = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        createdAt: doc.data().createdAt?.toDate() || new Date(),\n      } as Message));\n      \n      // Sort on client side to avoid composite index requirement\n      const sortedMessages = messageList.sort((a, b) => {\n        const timeA = a.createdAt ? a.createdAt.getTime() : 0;\n        const timeB = b.createdAt ? b.createdAt.getTime() : 0;\n        return timeA - timeB; // Ascending order\n      });\n      \n      setMessages(sortedMessages);\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, [chatRoomId]);\n\n  return { messages, loading };\n}","size_bytes":4595},"client/src/hooks/use-presence.ts":{"content":"import { useEffect, useState } from 'react';\nimport { ref, set, onValue, onDisconnect, serverTimestamp, push, off } from 'firebase/database';\nimport { realtimeDb } from '@/lib/firebase';\nimport { useAuth } from './use-auth';\n\ninterface UserPresence {\n  isOnline: boolean;\n  lastChanged: any;\n  userId: string;\n  username?: string;\n  photoURL?: string;\n}\n\nexport function usePresence() {\n  const { user, appUser } = useAuth();\n  const [onlineUsers, setOnlineUsers] = useState<UserPresence[]>([]);\n\n  useEffect(() => {\n    if (!user || !appUser) return;\n\n    const userStatusRef = ref(realtimeDb, `/status/${user.uid}`);\n    const isOfflineForDatabase = {\n      isOnline: false,\n      lastChanged: serverTimestamp(),\n    };\n\n    const isOnlineForDatabase = {\n      isOnline: true,\n      lastChanged: serverTimestamp(),\n      userId: user.uid,\n      username: appUser.username,\n      photoURL: appUser.photoURL,\n    };\n\n    // Firebase의 .info/connected 경로를 사용하여 연결 상태 감지\n    const connectedRef = ref(realtimeDb, '.info/connected');\n    \n    const unsubscribeConnection = onValue(connectedRef, (snapshot) => {\n      if (snapshot.val() === true) {\n        // 연결되었을 때\n        set(userStatusRef, isOnlineForDatabase);\n        \n        // 연결이 끊어졌을 때 자동으로 오프라인으로 설정\n        onDisconnect(userStatusRef).set(isOfflineForDatabase);\n      }\n    });\n\n    // 모든 사용자의 접속 상태 실시간 구독\n    const statusRef = ref(realtimeDb, '/status');\n    const unsubscribeStatus = onValue(statusRef, (snapshot) => {\n      const statusData = snapshot.val();\n      if (statusData) {\n        const onlineUsersList: UserPresence[] = [];\n        Object.keys(statusData).forEach((userId) => {\n          const userStatus = statusData[userId];\n          if (userStatus.isOnline && userId !== user.uid) {\n            onlineUsersList.push({\n              ...userStatus,\n              userId,\n            });\n          }\n        });\n        setOnlineUsers(onlineUsersList);\n      } else {\n        setOnlineUsers([]);\n      }\n    });\n\n    // 컴포넌트 언마운트 시 정리\n    return () => {\n      unsubscribeConnection();\n      unsubscribeStatus();\n      // 명시적으로 오프라인 상태로 설정\n      set(userStatusRef, isOfflineForDatabase);\n    };\n  }, [user, appUser]);\n\n  return {\n    onlineUsers,\n    isConnected: user && appUser ? true : false,\n  };\n}","size_bytes":2435},"client/src/utils/avatar.ts":{"content":"/**\n * Avatar utility functions for consistent avatar generation across the app\n */\n\n/**\n * Generate a consistent boring avatars URL for a user\n * @param user - User object with id, username, or email\n * @param size - Avatar size in pixels (default: 120)\n * @returns Boring avatars URL\n */\nexport function getAvatarUrl(user: { id?: string; username?: string; email?: string } | null | undefined, size: number = 120): string {\n  if (!user) {\n    return `https://source.boringavatars.com/beam/${size}/anonymous`;\n  }\n\n  // Use ID as primary seed for consistency, fallback to username or email local part\n  const seed = user.id || user.username || user.email?.split('@')[0] || 'user';\n  \n  return `https://source.boringavatars.com/beam/${size}/${encodeURIComponent(seed)}`;\n}\n\n/**\n * Get avatar src with photoURL fallback to boring avatars\n * @param photoURL - User's uploaded photo URL\n * @param user - User object for generating fallback avatar\n * @param size - Avatar size in pixels (default: 120)\n * @returns Final avatar URL\n */\nexport function getAvatarSrc(photoURL: string | null | undefined, user: { id?: string; username?: string; email?: string } | null | undefined, size: number = 120): string {\n  return photoURL || getAvatarUrl(user, size);\n}","size_bytes":1252},"server/firebase-admin.ts":{"content":"import admin from 'firebase-admin';\n\n// Firebase Admin SDK 초기화\nif (!admin.apps.length) {\n  // 개발 환경에서 필수 설정 확인\n  const isEmulatorMode = process.env.FIRESTORE_EMULATOR_HOST && process.env.FIREBASE_AUTH_EMULATOR_HOST;\n  const hasCredentials = process.env.FIREBASE_SERVICE_ACCOUNT || process.env.GOOGLE_APPLICATION_CREDENTIALS;\n\n  if (process.env.NODE_ENV === 'development' && !isEmulatorMode && !hasCredentials) {\n    console.warn('Firebase Admin: No explicit credentials or emulators configured in development');\n    console.warn('For optimal development experience, consider setting:');\n    console.warn('1. Both FIRESTORE_EMULATOR_HOST and FIREBASE_AUTH_EMULATOR_HOST for emulator mode');\n    console.warn('2. FIREBASE_SERVICE_ACCOUNT (service account JSON string)');\n    console.warn('3. GOOGLE_APPLICATION_CREDENTIALS (path to service account file)');\n    console.warn('Attempting to proceed with Application Default Credentials...');\n  }\n\n  try {\n    const config: any = {};\n\n    // 프로젝트 ID 설정 (에뮬레이터에서는 필수)\n    if (isEmulatorMode) {\n      if (!process.env.FIREBASE_PROJECT_ID) {\n        throw new Error('FIREBASE_PROJECT_ID is required when using emulators');\n      }\n      config.projectId = process.env.FIREBASE_PROJECT_ID;\n      console.log('Using Firebase emulators with project:', config.projectId);\n    } else {\n      config.projectId = process.env.FIREBASE_PROJECT_ID || 'match-point-0918';\n    }\n\n    // 서비스 계정 JSON이 환경 변수로 제공된 경우\n    if (process.env.FIREBASE_SERVICE_ACCOUNT) {\n      try {\n        const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT);\n        config.credential = admin.credential.cert(serviceAccount);\n        console.log('Using Firebase service account from environment variable');\n      } catch (parseError) {\n        console.error('Failed to parse FIREBASE_SERVICE_ACCOUNT:', parseError);\n        throw parseError;\n      }\n    } else if (process.env.GOOGLE_APPLICATION_CREDENTIALS) {\n      console.log('Using Google Application Default Credentials');\n    } else if (!isEmulatorMode) {\n      console.log('No explicit credentials found, trying Application Default Credentials');\n      config.credential = admin.credential.applicationDefault();\n    }\n\n    // 에뮬레이터 환경 로깅\n    if (isEmulatorMode) {\n      console.log('Using Firestore emulator at:', process.env.FIRESTORE_EMULATOR_HOST);\n      console.log('Using Firebase Auth emulator at:', process.env.FIREBASE_AUTH_EMULATOR_HOST);\n    }\n\n    admin.initializeApp(config);\n    console.log('Firebase Admin initialized successfully');\n  } catch (error) {\n    console.error('Firebase Admin initialization failed:', error);\n    console.error('');\n    console.error('To fix this issue, set up Firebase credentials:');\n    console.error('1. For service account: Set FIREBASE_SERVICE_ACCOUNT environment variable');\n    console.error('2. For ADC: Set GOOGLE_APPLICATION_CREDENTIALS path or run \"gcloud auth application-default login\"');\n    console.error('3. For emulator: Set FIRESTORE_EMULATOR_HOST and FIREBASE_AUTH_EMULATOR_HOST');\n    \n    // 개발 환경에서는 에뮬레이터 필요\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Development mode requires Firebase emulators or valid credentials');\n      console.error('Please set FIRESTORE_EMULATOR_HOST and FIREBASE_AUTH_EMULATOR_HOST');\n      throw new Error('Firebase Admin initialization failed in development mode. Set up emulators or credentials.');\n    } else {\n      throw error;\n    }\n  }\n}\n\nexport const adminDb = admin.firestore();\nexport const adminAuth = admin.auth();\n\n// Firebase Auth 미들웨어\nexport async function verifyFirebaseToken(req: any, res: any, next: any) {\n  try {\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({ error: '인증 토큰이 필요합니다.' });\n    }\n\n    const token = authHeader.split('Bearer ')[1];\n    const decodedToken = await adminAuth.verifyIdToken(token);\n    req.user = { uid: decodedToken.uid };\n    next();\n  } catch (error) {\n    console.error('Token verification failed:', error);\n    return res.status(401).json({ error: '유효하지 않은 토큰입니다.' });\n  }\n}\n\nexport default admin;","size_bytes":4340},"client/src/components/UserProfileModal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { UserPlus, Trophy, MapPin, Star, Target } from 'lucide-react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface UserProfile {\n  id: string;\n  username: string;\n  photoURL: string | null;\n  ntrp: string;\n  region: string;\n  mannerScore: number;\n  wins: number;\n  losses: number;\n  points: number;\n  bio: string | null;\n  tier: string | null;\n}\n\ninterface UserProfileModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  userId: string | null;\n  onStartChat?: (userId: string) => void;\n}\n\nexport default function UserProfileModal({ isOpen, onClose, userId, onStartChat }: UserProfileModalProps) {\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [isOwnProfile, setIsOwnProfile] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [friendRequestLoading, setFriendRequestLoading] = useState(false);\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  // 사용자 프로필 정보 가져오기\n  useEffect(() => {\n    if (!isOpen || !userId || !user) {\n      setProfile(null);\n      setIsOwnProfile(false);\n      return;\n    }\n\n    fetchUserProfile();\n  }, [isOpen, userId, user]);\n\n  const fetchUserProfile = async () => {\n    if (!userId || !user) return;\n\n    setLoading(true);\n    try {\n      // Firebase Auth 토큰 가져오기\n      const token = await user.getIdToken();\n      \n      const response = await fetch(`/api/users/${userId}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('프로필 정보를 가져올 수 없습니다.');\n      }\n\n      const data = await response.json();\n      setProfile(data.profile);\n      setIsOwnProfile(data.isOwnProfile);\n    } catch (error) {\n      console.error('Profile fetch error:', error);\n      toast({\n        title: \"프로필 로드 실패\",\n        description: \"사용자 프로필 정보를 불러올 수 없습니다.\",\n        variant: \"destructive\",\n      });\n      onClose();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleFriendRequest = async () => {\n    if (!userId || !user || isOwnProfile) return;\n\n    setFriendRequestLoading(true);\n    try {\n      // Firebase Auth 토큰 가져오기\n      const token = await user.getIdToken();\n      \n      const response = await fetch('/api/friends/request', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          targetUserId: userId,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || '친구 요청을 보낼 수 없습니다.');\n      }\n\n      toast({\n        title: \"친구 요청 성공\",\n        description: `${profile?.username}님에게 친구 요청을 보냈습니다.`,\n      });\n      \n      onClose();\n    } catch (error) {\n      console.error('Friend request error:', error);\n      toast({\n        title: \"친구 요청 실패\",\n        description: error instanceof Error ? error.message : \"친구 요청을 보낼 수 없습니다.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setFriendRequestLoading(false);\n    }\n  };\n\n  const getTierColor = (tier: string | null) => {\n    switch (tier) {\n      case 'Bronze': return 'bg-amber-600';\n      case 'Silver': return 'bg-gray-400';\n      case 'Gold': return 'bg-yellow-500';\n      case 'Platinum': return 'bg-cyan-500';\n      case 'Diamond': return 'bg-blue-600';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getWinRate = () => {\n    if (!profile) return 0;\n    const totalGames = profile.wins + profile.losses;\n    return totalGames > 0 ? Math.round((profile.wins / totalGames) * 100) : 0;\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[425px] max-h-[80vh] overflow-y-auto\" data-testid=\"modal-user-profile\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center\">사용자 프로필</DialogTitle>\n        </DialogHeader>\n\n        {loading ? (\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n          </div>\n        ) : profile ? (\n          <div className=\"space-y-6\">\n            {/* 프로필 헤더 */}\n            <div className=\"flex flex-col items-center space-y-4\">\n              <Avatar className=\"h-24 w-24\">\n                <AvatarImage src={profile.photoURL || ''} alt={profile.username} />\n                <AvatarFallback className=\"text-2xl\">\n                  {profile.username.charAt(0).toUpperCase()}\n                </AvatarFallback>\n              </Avatar>\n              \n              <div className=\"text-center space-y-2\">\n                <h3 className=\"text-2xl font-bold\" data-testid=\"text-profile-username\">{profile.username}</h3>\n                \n                <div className=\"flex items-center justify-center space-x-2\">\n                  <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-muted-foreground\">{profile.region}</span>\n                </div>\n\n                {profile.tier && (\n                  <Badge className={`${getTierColor(profile.tier)} text-white`}>\n                    <Trophy className=\"h-3 w-3 mr-1\" />\n                    {profile.tier}\n                  </Badge>\n                )}\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* 기본 정보 */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Card>\n                <CardContent className=\"flex flex-col items-center p-4\">\n                  <Target className=\"h-5 w-5 text-primary mb-2\" />\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold\">{profile.ntrp}</div>\n                    <div className=\"text-xs text-muted-foreground\">NTRP</div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"flex flex-col items-center p-4\">\n                  <Star className=\"h-5 w-5 text-yellow-500 mb-2\" />\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold\">{(profile.mannerScore ?? 5).toFixed(1)}</div>\n                    <div className=\"text-xs text-muted-foreground\">매너점수</div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* 전적 정보 */}\n            <Card>\n              <CardContent className=\"p-4\">\n                <h4 className=\"font-semibold mb-3 text-center\">전적</h4>\n                <div className=\"grid grid-cols-3 gap-4 text-center\">\n                  <div>\n                    <div className=\"text-xl font-bold text-green-600\">{profile.wins}</div>\n                    <div className=\"text-xs text-muted-foreground\">승리</div>\n                  </div>\n                  <div>\n                    <div className=\"text-xl font-bold text-red-600\">{profile.losses}</div>\n                    <div className=\"text-xs text-muted-foreground\">패배</div>\n                  </div>\n                  <div>\n                    <div className=\"text-xl font-bold\">{getWinRate()}%</div>\n                    <div className=\"text-xs text-muted-foreground\">승률</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* 포인트 */}\n            <Card>\n              <CardContent className=\"flex items-center justify-center p-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-primary\">{profile.points.toLocaleString()}</div>\n                  <div className=\"text-sm text-muted-foreground\">보유 포인트</div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* 소개 */}\n            {profile.bio && (\n              <Card>\n                <CardContent className=\"p-4\">\n                  <h4 className=\"font-semibold mb-2\">소개</h4>\n                  <p className=\"text-sm text-muted-foreground\">{profile.bio}</p>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* 액션 버튼들 */}\n            {!isOwnProfile && (\n              <div className=\"space-y-3\">\n                {/* 1:1 채팅 신청하기 버튼 */}\n                <Button \n                  onClick={() => {\n                    if (userId && onStartChat) {\n                      onStartChat(userId);\n                      onClose();\n                    }\n                  }}\n                  className=\"w-full bg-primary hover:bg-primary/90\"\n                  size=\"lg\"\n                  data-testid=\"button-start-chat\"\n                >\n                  <i className=\"fas fa-comments mr-2\" />\n                  1:1 채팅 신청하기\n                </Button>\n                \n                {/* 친구 추가 버튼 */}\n                <Button \n                  onClick={handleFriendRequest}\n                  disabled={friendRequestLoading}\n                  className=\"w-full\"\n                  size=\"lg\"\n                  variant=\"outline\"\n                  data-testid=\"button-friend-request\"\n                >\n                  <UserPlus className=\"h-4 w-4 mr-2\" />\n                  {friendRequestLoading ? '요청 중...' : '+ 친구 추가'}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">프로필을 불러올 수 없습니다.</p>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10342},"server/routes/users.ts":{"content":"import type { Express } from \"express\";\nimport { adminDb, verifyFirebaseToken } from \"../firebase-admin.js\";\nimport admin from \"../firebase-admin.js\";\n\nexport function registerUserRoutes(app: Express): void {\n  // 실시간 접속중인 사용자 목록 조회 API\n  app.get('/api/users/online', verifyFirebaseToken, async (req: any, res) => {\n    try {\n      const currentUserId = req.user.uid;\n      \n      // Firebase Realtime Database에서 /status 경로의 모든 사용자 상태 조회\n      const realtimeDb = admin.database();\n      const statusRef = realtimeDb.ref('/status');\n      const statusSnapshot = await statusRef.once('value');\n      const statusData = statusSnapshot.val();\n      \n      if (!statusData) {\n        return res.status(200).json({ \n          users: [],\n          message: '현재 접속 중인 사용자가 없습니다.' \n        });\n      }\n      \n      // isOnline: true인 사용자들의 ID 목록 추출 (본인 제외)\n      const onlineUserIds: string[] = [];\n      Object.keys(statusData).forEach((userId) => {\n        const userStatus = statusData[userId];\n        if (userStatus.isOnline && userId !== currentUserId) {\n          onlineUserIds.push(userId);\n        }\n      });\n      \n      if (onlineUserIds.length === 0) {\n        return res.status(200).json({\n          users: [],\n          message: '현재 접속 중인 다른 사용자가 없습니다.'\n        });\n      }\n      \n      // Firestore에서 온라인 사용자들의 프로필 정보 조회\n      const userProfiles = [];\n      \n      for (const userId of onlineUserIds) {\n        try {\n          const userDoc = await adminDb.collection('users').doc(userId).get();\n          if (userDoc.exists) {\n            const userData = userDoc.data();\n            if (userData) {\n              // 공개 가능한 정보만 포함\n              userProfiles.push({\n                id: userId,\n                username: userData.username || '익명',\n                photoURL: userData.photoURL || null,\n                ntrp: userData.ntrp || '미설정',\n                region: userData.region || '미설정',\n                mannerScore: userData.mannerScore ?? 5,\n                wins: userData.wins || 0,\n                losses: userData.losses || 0,\n                points: userData.points || 0,\n                bio: userData.bio || null,\n                tier: userData.tier || null,\n                age: userData.age || '미설정',\n                availableTimes: userData.availableTimes || [],\n                // 온라인 상태 정보도 포함\n                isOnline: true,\n                lastChanged: statusData[userId].lastChanged || null\n              });\n            }\n          }\n        } catch (userError) {\n          console.error(`사용자 ${userId} 프로필 조회 오류:`, userError);\n          // 개별 사용자 오류는 건너뛰고 계속 진행\n        }\n      }\n      \n      res.status(200).json({\n        users: userProfiles,\n        count: userProfiles.length,\n        message: `현재 ${userProfiles.length}명이 접속 중입니다.`\n      });\n      \n    } catch (error) {\n      console.error('온라인 사용자 목록 조회 오류:', error);\n      res.status(500).json({ error: '서버 오류가 발생했습니다.' });\n    }\n  });\n  // 특정 사용자의 공개 프로필 정보 조회 API\n  app.get('/api/users/:userId', verifyFirebaseToken, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const currentUserId = req.user.uid;\n\n      if (!userId) {\n        return res.status(400).json({ error: 'userId가 필요합니다.' });\n      }\n\n      // Firestore에서 사용자 정보 조회\n      const userDoc = await adminDb.collection('users').doc(userId).get();\n      \n      if (!userDoc.exists) {\n        return res.status(404).json({ error: '사용자를 찾을 수 없습니다.' });\n      }\n\n      const userData = userDoc.data();\n      if (!userData) {\n        return res.status(404).json({ error: '사용자 데이터가 없습니다.' });\n      }\n\n      // 공개 가능한 정보만 반환 (민감한 정보 제외)\n      const publicProfile = {\n        id: userId,\n        username: userData.username || '익명',\n        photoURL: userData.photoURL || null,\n        ntrp: userData.ntrp || '미설정',\n        region: userData.region || '미설정',\n        mannerScore: userData.mannerScore || 5,\n        wins: userData.wins || 0,\n        losses: userData.losses || 0,\n        points: userData.points || 0,\n        bio: userData.bio || null,\n        tier: userData.tier || null,\n        // 이메일 같은 민감한 정보는 제외\n      };\n\n      // 본인인지 확인해서 추가 정보 제공 여부 결정\n      const isOwnProfile = currentUserId === userId;\n\n      res.status(200).json({\n        profile: publicProfile,\n        isOwnProfile,\n        message: '프로필 정보를 성공적으로 조회했습니다.'\n      });\n\n    } catch (error) {\n      console.error('사용자 프로필 조회 오류:', error);\n      res.status(500).json({ error: '서버 오류가 발생했습니다.' });\n    }\n  });\n}","size_bytes":5112},"client/src/hooks/use-online-users.ts":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { ref, onValue, off } from 'firebase/database';\nimport { collection, query, where, getDocs } from 'firebase/firestore';\nimport { realtimeDb, db } from '@/lib/firebase';\nimport { useAuth } from './use-auth';\nimport { User } from '@shared/schema';\n\nexport function useOnlineUsers() {\n  const [onlineUsers, setOnlineUsers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const { user, appUser } = useAuth();\n\n  // Firestore에서 사용자 프로필 정보 조회\n  const fetchUserProfiles = useCallback(async (userIds: string[]): Promise<User[]> => {\n    if (userIds.length === 0) return [];\n\n    try {\n      // 배치 크기 제한 (Firestore의 'in' 쿼리는 최대 10개까지)\n      const batches = [];\n      for (let i = 0; i < userIds.length; i += 10) {\n        const batchIds = userIds.slice(i, i + 10);\n        batches.push(batchIds);\n      }\n\n      const allUsers: User[] = [];\n      \n      for (const batchIds of batches) {\n        const usersQuery = query(\n          collection(db, 'users'),\n          where('id', 'in', batchIds)\n        );\n        \n        const querySnapshot = await getDocs(usersQuery);\n        const batchUsers = querySnapshot.docs.map(doc => ({\n          ...doc.data(),\n          id: doc.id\n        })) as User[];\n        \n        allUsers.push(...batchUsers);\n      }\n\n      return allUsers;\n    } catch (err) {\n      console.error('사용자 프로필 조회 오류:', err);\n      return [];\n    }\n  }, []);\n\n  // Firebase Realtime Database 실시간 구독\n  useEffect(() => {\n    if (!user || !appUser) {\n      setOnlineUsers([]);\n      setLoading(false);\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    const statusRef = ref(realtimeDb, 'status');\n    \n    const unsubscribe = onValue(statusRef, async (snapshot) => {\n      try {\n        const statusData = snapshot.val() || {};\n        \n        // 온라인 상태인 사용자들의 ID 추출 (현재 사용자 제외)\n        const onlineUserIds = Object.entries(statusData)\n          .filter(([userId, status]: [string, any]) => \n            status?.isOnline === true && \n            userId !== appUser.id\n          )\n          .map(([userId]) => userId);\n\n        console.log('실시간 온라인 사용자 ID:', onlineUserIds);\n\n        if (onlineUserIds.length === 0) {\n          setOnlineUsers([]);\n          setLoading(false);\n          return;\n        }\n\n        // Firestore에서 사용자 프로필 정보 조회\n        const userProfiles = await fetchUserProfiles(onlineUserIds);\n        \n        console.log('조회된 사용자 프로필:', userProfiles);\n        \n        setOnlineUsers(userProfiles);\n        setError(null);\n      } catch (err) {\n        console.error('실시간 온라인 사용자 처리 오류:', err);\n        setError('온라인 사용자 목록을 불러오는 중 오류가 발생했습니다.');\n        setOnlineUsers([]);\n      } finally {\n        setLoading(false);\n      }\n    }, (error) => {\n      console.error('Firebase Realtime Database 오류:', error);\n      setError('실시간 데이터베이스 연결 오류가 발생했습니다.');\n      setLoading(false);\n    });\n\n    // 컴포넌트 언마운트 시 구독 해제\n    return unsubscribe;\n  }, [user, appUser, fetchUserProfiles]);\n\n  // 수동 새로고침 함수 (필요시 사용)\n  const refresh = useCallback(() => {\n    if (!user || !appUser) return;\n    \n    // 실시간 구독이므로 별도 새로고침 불필요\n    // 하지만 기존 API와의 호환성을 위해 유지\n    console.log('실시간 구독 중이므로 자동 새로고침됩니다.');\n  }, [user, appUser]);\n\n  return {\n    onlineUsers,\n    loading,\n    error,\n    refresh,\n  };\n}","size_bytes":3829},"client/src/components/ClubRankLogo.tsx":{"content":"interface ClubRankLogoProps {\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  variant?: 'default' | 'white';\n  className?: string;\n}\n\nexport default function ClubRankLogo({ \n  size = 'md', \n  variant = 'default',\n  className = '' \n}: ClubRankLogoProps) {\n  const sizeClasses = {\n    sm: 'w-8 h-8',\n    md: 'w-12 h-12',\n    lg: 'w-16 h-16',\n    xl: 'w-24 h-24'\n  };\n\n  const colorClasses = {\n    default: 'text-green-600',\n    white: 'text-white'\n  };\n\n  return (\n    <div className={`flex items-center justify-center bg-green-50 rounded-full ${sizeClasses[size]} ${className}`}>\n      <div className={`flex items-center justify-center ${colorClasses[variant]}`}>\n        <svg \n          viewBox=\"0 0 120 120\" \n          className={`${sizeClasses[size]} drop-shadow-sm`}\n          fill=\"currentColor\"\n        >\n          {/* Shield Background */}\n          <path \n            d=\"M60 10 L85 25 L85 65 Q85 85 60 100 Q35 85 35 65 L35 25 Z\" \n            fill=\"currentColor\" \n            className=\"opacity-90\"\n          />\n          \n          {/* Shield Border */}\n          <path \n            d=\"M60 10 L85 25 L85 65 Q85 85 60 100 Q35 85 35 65 L35 25 Z\" \n            fill=\"none\" \n            stroke={variant === 'white' ? 'rgba(255,255,255,0.3)' : 'rgba(0,0,0,0.1)'} \n            strokeWidth=\"1\"\n          />\n          \n          {/* First Tennis Racket */}\n          <g transform=\"translate(50, 55) rotate(-20)\">\n            {/* Racket Handle */}\n            <rect x=\"-1\" y=\"8\" width=\"2\" height=\"12\" fill=\"white\" className=\"opacity-80\" />\n            {/* Racket Head */}\n            <ellipse cx=\"0\" cy=\"0\" rx=\"6\" ry=\"8\" fill=\"none\" stroke=\"white\" strokeWidth=\"1.5\" className=\"opacity-80\" />\n            {/* Strings */}\n            <line x1=\"-4\" y1=\"-3\" x2=\"4\" y2=\"-3\" stroke=\"white\" strokeWidth=\"0.5\" className=\"opacity-60\" />\n            <line x1=\"-4\" y1=\"0\" x2=\"4\" y2=\"0\" stroke=\"white\" strokeWidth=\"0.5\" className=\"opacity-60\" />\n            <line x1=\"-4\" y1=\"3\" x2=\"4\" y2=\"3\" stroke=\"white\" strokeWidth=\"0.5\" className=\"opacity-60\" />\n            <line x1=\"-2\" y1=\"-6\" x2=\"-2\" y2=\"6\" stroke=\"white\" strokeWidth=\"0.5\" className=\"opacity-60\" />\n            <line x1=\"0\" y1=\"-6\" x2=\"0\" y2=\"6\" stroke=\"white\" strokeWidth=\"0.5\" className=\"opacity-60\" />\n            <line x1=\"2\" y1=\"-6\" x2=\"2\" y2=\"6\" stroke=\"white\" strokeWidth=\"0.5\" className=\"opacity-60\" />\n          </g>\n          \n          {/* Second Tennis Racket */}\n          <g transform=\"translate(70, 55) rotate(20)\">\n            {/* Racket Handle */}\n            <rect x=\"-1\" y=\"8\" width=\"2\" height=\"12\" fill=\"white\" className=\"opacity-80\" />\n            {/* Racket Head */}\n            <ellipse cx=\"0\" cy=\"0\" rx=\"6\" ry=\"8\" fill=\"none\" stroke=\"white\" strokeWidth=\"1.5\" className=\"opacity-80\" />\n            {/* Strings */}\n            <line x1=\"-4\" y1=\"-3\" x2=\"4\" y2=\"-3\" stroke=\"white\" strokeWidth=\"0.5\" className=\"opacity-60\" />\n            <line x1=\"-4\" y1=\"0\" x2=\"4\" y2=\"0\" stroke=\"white\" strokeWidth=\"0.5\" className=\"opacity-60\" />\n            <line x1=\"-4\" y1=\"3\" x2=\"4\" y2=\"3\" stroke=\"white\" strokeWidth=\"0.5\" className=\"opacity-60\" />\n            <line x1=\"-2\" y1=\"-6\" x2=\"-2\" y2=\"6\" stroke=\"white\" strokeWidth=\"0.5\" className=\"opacity-60\" />\n            <line x1=\"0\" y1=\"-6\" x2=\"0\" y2=\"6\" stroke=\"white\" strokeWidth=\"0.5\" className=\"opacity-60\" />\n            <line x1=\"2\" y1=\"-6\" x2=\"2\" y2=\"6\" stroke=\"white\" strokeWidth=\"0.5\" className=\"opacity-60\" />\n          </g>\n          \n          {/* Crown */}\n          <g transform=\"translate(60, 25)\">\n            {/* Crown Base */}\n            <rect x=\"-8\" y=\"0\" width=\"16\" height=\"4\" fill=\"white\" className=\"opacity-90\" />\n            {/* Crown Points */}\n            <polygon points=\"-8,0 -4,-6 0,0\" fill=\"white\" className=\"opacity-90\" />\n            <polygon points=\"-4,0 0,-8 4,0\" fill=\"white\" className=\"opacity-90\" />\n            <polygon points=\"4,0 8,-6 8,0\" fill=\"white\" className=\"opacity-90\" />\n            {/* Crown Gems */}\n            <circle cx=\"-4\" cy=\"-3\" r=\"1\" fill={variant === 'white' ? 'rgba(255,255,255,0.8)' : 'rgba(34,197,94,0.8)'} />\n            <circle cx=\"0\" cy=\"-5\" r=\"1.2\" fill={variant === 'white' ? 'rgba(255,255,255,0.8)' : 'rgba(34,197,94,0.8)'} />\n            <circle cx=\"4\" cy=\"-3\" r=\"1\" fill={variant === 'white' ? 'rgba(255,255,255,0.8)' : 'rgba(34,197,94,0.8)'} />\n          </g>\n          \n          {/* Club Rank initials */}\n          <text \n            x=\"60\" \n            y=\"85\" \n            textAnchor=\"middle\" \n            fill=\"white\" \n            className=\"text-sm font-bold\"\n            fontSize=\"12\"\n          >\n            CR\n          </text>\n        </svg>\n      </div>\n    </div>\n  );\n}","size_bytes":4646},"client/src/components/ClubCreationModal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useCreateClub } from \"@/hooks/use-clubs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport LoadingSpinner from \"./LoadingSpinner\";\n\nconst clubCreationSchema = z.object({\n  name: z.string().min(2, \"클럽명은 2글자 이상이어야 합니다.\").max(50, \"클럽명은 50글자 이하여야 합니다.\"),\n  region: z.string().min(1, \"지역을 선택해주세요.\"),\n  description: z.string().max(500, \"소개글은 500글자 이하여야 합니다.\").optional(),\n  primaryColor: z.string().regex(/^#[0-9A-F]{6}$/i, \"올바른 색상 코드를 입력해주세요.\").optional(),\n});\n\ntype ClubCreationFormData = z.infer<typeof clubCreationSchema>;\n\ninterface ClubCreationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst REGIONS = [\n  \"서울특별시\", \"부산광역시\", \"대구광역시\", \"인천광역시\", \"광주광역시\", \n  \"대전광역시\", \"울산광역시\", \"세종특별자치시\", \"경기도\", \"강원도\", \n  \"충청북도\", \"충청남도\", \"전라북도\", \"전라남도\", \"경상북도\", \n  \"경상남도\", \"제주특별자치도\"\n];\n\nexport default function ClubCreationModal({ isOpen, onClose }: ClubCreationModalProps) {\n  const { toast } = useToast();\n  const createClubMutation = useCreateClub();\n\n  const form = useForm<ClubCreationFormData>({\n    resolver: zodResolver(clubCreationSchema),\n    defaultValues: {\n      name: \"\",\n      region: \"\",\n      description: \"\",\n      primaryColor: \"#22c55e\",\n    },\n  });\n\n  const onSubmit = async (data: ClubCreationFormData) => {\n    try {\n      await createClubMutation.mutateAsync(data);\n      \n      toast({\n        title: \"클럽 생성 완료\",\n        description: `${data.name} 클럽이 성공적으로 생성되었습니다!`,\n      });\n      \n      form.reset();\n      onClose();\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : \"클럽 생성 중 오류가 발생했습니다.\";\n      toast({\n        title: \"클럽 생성 실패\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md mx-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <span className=\"text-2xl\">🏠</span>\n            <span>새 클럽 만들기</span>\n          </DialogTitle>\n          <DialogDescription>\n            당신의 테니스 클럽을 만들어 멤버들과 함께 활동해보세요.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>클럽명 *</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"예: 서울테니스클럽\"\n                      data-testid=\"input-club-name\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"region\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>활동 지역 *</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-club-region\">\n                        <SelectValue placeholder=\"지역을 선택하세요\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {REGIONS.map((region) => (\n                        <SelectItem key={region} value={region}>\n                          {region}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>클럽 소개</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"클럽에 대한 간단한 소개를 작성해주세요...\"\n                      className=\"min-h-[80px]\"\n                      data-testid=\"textarea-club-description\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"primaryColor\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>클럽 컬러</FormLabel>\n                  <FormControl>\n                    <div className=\"flex items-center space-x-3\">\n                      <Input \n                        type=\"color\"\n                        className=\"w-12 h-10 p-1 rounded cursor-pointer\"\n                        data-testid=\"input-club-color\"\n                        {...field} \n                      />\n                      <Input \n                        placeholder=\"#22c55e\"\n                        className=\"flex-1\"\n                        data-testid=\"input-club-color-text\"\n                        {...field} \n                      />\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onClose}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-club-creation\"\n              >\n                취소\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createClubMutation.isPending}\n                className=\"flex-1\"\n                data-testid=\"button-create-club\"\n              >\n                {createClubMutation.isPending ? (\n                  <>\n                    <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                    생성 중...\n                  </>\n                ) : (\n                  \"클럽 만들기\"\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7418},"client/src/components/ClubDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useMyClubMembership, useClubMembers, useLeaveClub } from \"@/hooks/use-clubs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport ClubManagementModal from \"./ClubManagementModal\";\nimport BracketGeneratorModal from \"./BracketGeneratorModal\";\nimport ClubAnalyticsModal from \"./ClubAnalyticsModal\";\n\ninterface ClubMembership {\n  membership: {\n    id: number;\n    userId: string;\n    clubId: number;\n    role: 'owner' | 'admin' | 'member';\n    joinedAt: Date;\n    isActive: boolean;\n  };\n  club: {\n    id: number;\n    name: string;\n    logoUrl: string | null;\n    bannerUrl: string | null;\n    description: string | null;\n    primaryColor: string | null;\n    rankingPoints: number | null;\n    region: string;\n    establishedAt: Date | null;\n  };\n}\n\ninterface ClubDashboardProps {\n  membership: ClubMembership;\n}\n\nconst ROLE_LABELS = {\n  owner: '클럽장',\n  admin: '관리자',\n  member: '멤버'\n};\n\nconst ROLE_COLORS = {\n  owner: 'bg-yellow-100 text-yellow-800 border-yellow-200',\n  admin: 'bg-blue-100 text-blue-800 border-blue-200',\n  member: 'bg-gray-100 text-gray-800 border-gray-200'\n};\n\nexport default function ClubDashboard({ membership }: ClubDashboardProps) {\n  const { toast } = useToast();\n  const leaveClubMutation = useLeaveClub();\n  const [showManagementModal, setShowManagementModal] = useState(false);\n  const [showBracketModal, setShowBracketModal] = useState(false);\n  const [showAnalyticsModal, setShowAnalyticsModal] = useState(false);\n  \n  const { data: members = [], isLoading: membersLoading } = useClubMembers(membership.club.id);\n  \n  const { club } = membership;\n  const userRole = membership.membership.role;\n  const canLeaveClub = userRole !== 'owner'; // 클럽장은 탈퇴 불가\n\n  const handleLeaveClub = async () => {\n    try {\n      await leaveClubMutation.mutateAsync(club.id);\n      \n      toast({\n        title: \"클럽 탈퇴 완료\",\n        description: `${club.name}에서 탈퇴했습니다.`,\n      });\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : \"클럽 탈퇴 중 오류가 발생했습니다.\";\n      toast({\n        title: \"클럽 탈퇴 실패\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 클럽 헤더 */}\n      <div \n        className=\"relative p-6 rounded-xl text-white overflow-hidden\"\n        style={{\n          background: `linear-gradient(135deg, ${club.primaryColor || '#22c55e'}, ${club.primaryColor || '#22c55e'}dd)`\n        }}\n      >\n        <div className=\"relative z-10\">\n          <div className=\"flex items-start justify-between mb-4\">\n            <div>\n              <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"text-club-name\">\n                {club.name}\n              </h2>\n              <div className=\"flex items-center space-x-4 text-white/90\">\n                <div className=\"flex items-center space-x-1\">\n                  <i className=\"fas fa-map-marker-alt\" />\n                  <span data-testid=\"text-club-region\">{club.region}</span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <i className=\"fas fa-trophy\" />\n                  <span data-testid=\"text-club-points\">{club.rankingPoints || 1000}점</span>\n                </div>\n              </div>\n            </div>\n            \n            <Badge className={`${ROLE_COLORS[userRole]} border`} data-testid=\"badge-user-role\">\n              {ROLE_LABELS[userRole]}\n            </Badge>\n          </div>\n          \n          {club.description && (\n            <p className=\"text-white/90 text-sm\" data-testid=\"text-club-description\">\n              {club.description}\n            </p>\n          )}\n        </div>\n        \n        {/* 배경 패턴 */}\n        <div className=\"absolute top-0 right-0 w-32 h-32 opacity-10\">\n          <i className=\"fas fa-shield-alt text-6xl\" />\n        </div>\n      </div>\n\n      {/* 클럽 통계 */}\n      <div className=\"grid grid-cols-3 gap-4\">\n        <div className=\"bg-background border border-border rounded-lg p-4 text-center\">\n          <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-member-count\">\n            {members.length}\n          </div>\n          <div className=\"text-xs text-muted-foreground\">총 멤버 수</div>\n        </div>\n        <div className=\"bg-background border border-border rounded-lg p-4 text-center\">\n          <div className=\"text-2xl font-bold text-green-600\">\n            {club.establishedAt ? \n              Math.floor((new Date().getTime() - new Date(club.establishedAt).getTime()) / (1000 * 60 * 60 * 24)) \n              : 0\n            }\n          </div>\n          <div className=\"text-xs text-muted-foreground\">운영 일수</div>\n        </div>\n        <div className=\"bg-background border border-border rounded-lg p-4 text-center\">\n          <div className=\"text-2xl font-bold text-amber-600\">0</div>\n          <div className=\"text-xs text-muted-foreground\">교류전 승수</div>\n        </div>\n      </div>\n\n      {/* 클럽 멤버 */}\n      <div className=\"bg-background border border-border rounded-lg p-4\">\n        <h3 className=\"font-semibold mb-4 flex items-center\">\n          <i className=\"fas fa-users mr-2 text-primary\" />\n          클럽 멤버 ({members.length}명)\n        </h3>\n        \n        {membersLoading ? (\n          <div className=\"flex justify-center py-8\">\n            <LoadingSpinner size=\"lg\" />\n          </div>\n        ) : members.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            멤버 정보를 불러올 수 없습니다\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {members.map((member) => (\n              <div key={member.id} className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-white text-sm\">\n                    <i className=\"fas fa-user\" />\n                  </div>\n                  <div>\n                    <div className=\"font-medium\" data-testid={`text-member-${member.id}`}>\n                      멤버 {member.id}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {new Date(member.joinedAt).toLocaleDateString()} 가입\n                    </div>\n                  </div>\n                </div>\n                \n                <Badge \n                  className={`${ROLE_COLORS[member.role as keyof typeof ROLE_COLORS]} border text-xs`}\n                  data-testid={`badge-member-role-${member.id}`}\n                >\n                  {ROLE_LABELS[member.role as keyof typeof ROLE_LABELS]}\n                </Badge>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* 액션 버튼들 */}\n      <div className=\"space-y-3\">\n        {userRole === 'owner' || userRole === 'admin' ? (\n          <Button \n            variant=\"outline\" \n            className=\"w-full\"\n            onClick={() => setShowManagementModal(true)}\n            data-testid=\"button-manage-club\"\n          >\n            <i className=\"fas fa-cog mr-2\" />\n            클럽 관리\n          </Button>\n        ) : null}\n        \n        <Button \n          variant=\"outline\" \n          className=\"w-full\"\n          onClick={() => setShowAnalyticsModal(true)}\n          data-testid=\"button-club-matches\"\n        >\n          <i className=\"fas fa-chart-line mr-2\" />\n          클럽 전적 분석\n        </Button>\n        \n        <Button \n          variant=\"outline\" \n          className=\"w-full\"\n          onClick={() => setShowBracketModal(true)}\n          data-testid=\"button-generate-bracket\"\n        >\n          <i className=\"fas fa-sitemap mr-2\" />\n          대진표 생성\n        </Button>\n        \n        {canLeaveClub && (\n          <AlertDialog>\n            <AlertDialogTrigger asChild>\n              <Button \n                variant=\"outline\" \n                className=\"w-full text-destructive hover:text-destructive\"\n                data-testid=\"button-leave-club\"\n              >\n                <i className=\"fas fa-sign-out-alt mr-2\" />\n                클럽 탈퇴\n              </Button>\n            </AlertDialogTrigger>\n            <AlertDialogContent>\n              <AlertDialogHeader>\n                <AlertDialogTitle>클럽 탈퇴</AlertDialogTitle>\n                <AlertDialogDescription>\n                  정말로 {club.name}에서 탈퇴하시겠습니까? \n                  탈퇴 후에는 클럽 정보에 접근할 수 없습니다.\n                </AlertDialogDescription>\n              </AlertDialogHeader>\n              <AlertDialogFooter>\n                <AlertDialogCancel data-testid=\"button-cancel-leave\">취소</AlertDialogCancel>\n                <AlertDialogAction\n                  onClick={handleLeaveClub}\n                  disabled={leaveClubMutation.isPending}\n                  className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                  data-testid=\"button-confirm-leave\"\n                >\n                  {leaveClubMutation.isPending ? (\n                    <>\n                      <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                      탈퇴 중...\n                    </>\n                  ) : (\n                    \"탈퇴하기\"\n                  )}\n                </AlertDialogAction>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n        )}\n      </div>\n\n      {/* 모달들 */}\n      <ClubManagementModal \n        isOpen={showManagementModal}\n        onClose={() => setShowManagementModal(false)}\n        membership={membership}\n      />\n      \n      <BracketGeneratorModal \n        isOpen={showBracketModal}\n        onClose={() => setShowBracketModal(false)}\n        clubId={membership.club.id}\n        members={members}\n      />\n      \n      <ClubAnalyticsModal \n        isOpen={showAnalyticsModal}\n        onClose={() => setShowAnalyticsModal(false)}\n        clubId={membership.club.id}\n        clubName={membership.club.name}\n        members={members}\n      />\n    </div>\n  );\n}","size_bytes":10704},"client/src/components/ClubSearchModal.tsx":{"content":"import { useState } from \"react\";\nimport { useClubSearch, useJoinClub } from \"@/hooks/use-clubs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport LoadingSpinner from \"./LoadingSpinner\";\n\ninterface Club {\n  id: number;\n  name: string;\n  description: string | null;\n  region: string;\n  primaryColor: string | null;\n  rankingPoints: number | null;\n  memberCount: number;\n  establishedAt: Date | null;\n}\n\ninterface ClubSearchModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst REGIONS = [\n  \"서울특별시\", \"부산광역시\", \"대구광역시\", \"인천광역시\", \"광주광역시\", \n  \"대전광역시\", \"울산광역시\", \"세종특별자치시\", \"경기도\", \"강원도\", \n  \"충청북도\", \"충청남도\", \"전라북도\", \"전라남도\", \"경상북도\", \n  \"경상남도\", \"제주특별자치도\"\n];\n\nexport default function ClubSearchModal({ isOpen, onClose }: ClubSearchModalProps) {\n  const [selectedRegion, setSelectedRegion] = useState<string>(\"\");\n  const { toast } = useToast();\n  const joinClubMutation = useJoinClub();\n\n  const { data: clubs = [], isLoading, isError } = useClubSearch(selectedRegion);\n\n  const handleJoinClub = async (club: Club) => {\n    try {\n      await joinClubMutation.mutateAsync(club.id);\n      \n      toast({\n        title: \"클럽 가입 완료\",\n        description: `${club.name}에 성공적으로 가입했습니다!`,\n      });\n      \n      onClose();\n    } catch (error: any) {\n      toast({\n        title: \"클럽 가입 실패\",\n        description: error.message || \"클럽 가입 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-lg mx-auto max-h-[600px] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <span className=\"text-2xl\">🛡️</span>\n            <span>클럽 찾기</span>\n          </DialogTitle>\n          <DialogDescription>\n            원하는 지역의 클럽을 찾아 가입해보세요.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">지역 선택</label>\n            <Select onValueChange={setSelectedRegion} value={selectedRegion}>\n              <SelectTrigger data-testid=\"select-search-region\">\n                <SelectValue placeholder=\"지역을 선택하세요\" />\n              </SelectTrigger>\n              <SelectContent>\n                {REGIONS.map((region) => (\n                  <SelectItem key={region} value={region}>\n                    {region}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* 클럽 목록 */}\n          <div className=\"space-y-3\">\n            {!selectedRegion ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                지역을 선택하면 클럽 목록이 표시됩니다\n              </div>\n            ) : isLoading ? (\n              <div className=\"flex flex-col items-center justify-center py-8 space-y-4\">\n                <LoadingSpinner size=\"lg\" />\n                <p className=\"text-muted-foreground text-sm\">클럽을 검색하는 중...</p>\n              </div>\n            ) : isError ? (\n              <div className=\"text-center py-8 text-destructive\">\n                클럽 검색 중 오류가 발생했습니다\n              </div>\n            ) : clubs.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-search text-2xl text-muted-foreground\" />\n                </div>\n                <p className=\"text-muted-foreground mb-2\" data-testid=\"text-no-clubs-found\">\n                  {selectedRegion}에서 클럽을 찾을 수 없습니다\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  다른 지역을 선택하거나 새로운 클럽을 만들어보세요\n                </p>\n              </div>\n            ) : (\n              clubs.map((club) => (\n                <div \n                  key={club.id}\n                  className=\"bg-background border border-border rounded-lg p-4 hover:shadow-md transition-shadow\"\n                  data-testid={`card-club-${club.id}`}\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <div \n                          className=\"w-4 h-4 rounded-full\"\n                          style={{ backgroundColor: club.primaryColor || '#22c55e' }}\n                        />\n                        <h3 className=\"font-semibold text-lg\" data-testid={`text-club-name-${club.id}`}>\n                          {club.name}\n                        </h3>\n                      </div>\n                      \n                      {club.description && (\n                        <p className=\"text-muted-foreground text-sm mb-3 line-clamp-2\">\n                          {club.description}\n                        </p>\n                      )}\n                      \n                      <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                        <div className=\"flex items-center space-x-1\">\n                          <i className=\"fas fa-users\" />\n                          <span data-testid={`text-member-count-${club.id}`}>\n                            {club.memberCount}명\n                          </span>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <i className=\"fas fa-trophy\" />\n                          <span data-testid={`text-ranking-points-${club.id}`}>\n                            {club.rankingPoints || 1000}점\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <Button\n                      onClick={() => handleJoinClub(club)}\n                      disabled={joinClubMutation.isPending}\n                      size=\"sm\"\n                      data-testid={`button-join-club-${club.id}`}\n                    >\n                      {joinClubMutation.isPending ? (\n                        <LoadingSpinner size=\"sm\" />\n                      ) : (\n                        \"가입하기\"\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n\n          <div className=\"pt-4 border-t\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"w-full\"\n              data-testid=\"button-close-club-search\"\n            >\n              닫기\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7477},"client/src/components/MyClubTabContent.tsx":{"content":"import { useState } from \"react\";\nimport { useMyClubMembership } from \"@/hooks/use-clubs\";\nimport { Button } from \"@/components/ui/button\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport ClubDashboard from \"./ClubDashboard\";\nimport ClubCreationModal from \"./ClubCreationModal\";\nimport ClubSearchModal from \"./ClubSearchModal\";\n\nexport default function MyClubTabContent() {\n  const [showCreationModal, setShowCreationModal] = useState(false);\n  const [showSearchModal, setShowSearchModal] = useState(false);\n  \n  const { data: memberships = [], isLoading, isError } = useMyClubMembership();\n  \n  // 사용자의 첫 번째 활성 클럽 멤버십 가져오기\n  const activeMembership = memberships.find((m) => m.membership.isActive);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex flex-col items-center justify-center py-12 space-y-4\">\n        <LoadingSpinner size=\"lg\" />\n        <p className=\"text-muted-foreground text-sm\">클럽 정보를 불러오는 중...</p>\n      </div>\n    );\n  }\n\n  if (isError) {\n    return (\n      <div className=\"p-4\">\n        <div className=\"bg-background rounded-xl p-6 text-center border border-border\">\n          <div className=\"text-6xl mb-4\">⚠️</div>\n          <h3 className=\"text-lg font-semibold mb-2\">클럽 정보 로드 실패</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            클럽 정보를 불러오는 중 오류가 발생했습니다.<br />\n            잠시 후 다시 시도해주세요.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  // 클럽에 가입되어 있는 경우\n  if (activeMembership) {\n    return (\n      <div className=\"p-4\">\n        <ClubDashboard membership={activeMembership} />\n      </div>\n    );\n  }\n\n  // 클럽에 가입되어 있지 않은 경우\n  return (\n    <>\n      <div className=\"bg-gradient-to-r from-primary to-emerald-600 p-6 text-white\">\n        <h2 className=\"text-2xl font-bold mb-2\">🏠 내 클럽</h2>\n        <p className=\"opacity-90\">클럽 활동의 모든 것을 관리하세요</p>\n      </div>\n      \n      <div className=\"p-4\">\n        <div className=\"bg-background rounded-xl p-6 text-center border border-border\">\n          <div className=\"text-6xl mb-4\">🛡️</div>\n          <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"text-no-club-title\">\n            아직 가입된 클럽이 없습니다\n          </h3>\n          <p className=\"text-muted-foreground mb-6\">\n            새로운 클럽을 만들거나 기존 클럽에 가입해<br />\n            다른 테니스 애호가들과 함께 활동해보세요!\n          </p>\n          \n          <div className=\"space-y-3 max-w-sm mx-auto\">\n            <Button \n              onClick={() => setShowCreationModal(true)}\n              className=\"w-full\"\n              size=\"lg\"\n              data-testid=\"button-create-new-club\"\n            >\n              <i className=\"fas fa-plus mr-2\" />\n              새 클럽 만들기\n            </Button>\n            \n            <Button \n              onClick={() => setShowSearchModal(true)}\n              variant=\"outline\"\n              className=\"w-full\"\n              size=\"lg\"\n              data-testid=\"button-search-clubs\"\n            >\n              <i className=\"fas fa-search mr-2\" />\n              기존 클럽 찾기\n            </Button>\n          </div>\n          \n          <div className=\"mt-6 text-xs text-muted-foreground\">\n            💡 클럽 가입 후 정기 모임, 교류전, 랭킹 시스템을 이용할 수 있습니다\n          </div>\n        </div>\n      </div>\n\n      {/* 모달들 */}\n      <ClubCreationModal \n        isOpen={showCreationModal}\n        onClose={() => setShowCreationModal(false)}\n      />\n      \n      <ClubSearchModal \n        isOpen={showSearchModal}\n        onClose={() => setShowSearchModal(false)}\n      />\n    </>\n  );\n}","size_bytes":3845},"client/src/hooks/use-clubs.tsx":{"content":"import { useMutation, useQuery } from '@tanstack/react-query';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\n\n// Define types for club-related data\ninterface ClubMembership {\n  membership: {\n    id: number;\n    userId: string;\n    clubId: number;\n    role: 'owner' | 'admin' | 'member';\n    joinedAt: Date;\n    isActive: boolean;\n  };\n  club: {\n    id: number;\n    name: string;\n    logoUrl: string | null;\n    bannerUrl: string | null;\n    description: string | null;\n    primaryColor: string | null;\n    rankingPoints: number | null;\n    region: string;\n    establishedAt: Date | null;\n  };\n}\n\ninterface ClubSearchResult {\n  id: number;\n  name: string;\n  description: string | null;\n  region: string;\n  primaryColor: string | null;\n  rankingPoints: number | null;\n  memberCount: number;\n  establishedAt: Date | null;\n}\n\ninterface ClubMember {\n  id: number;\n  userId: string;\n  clubId: number;\n  role: 'owner' | 'admin' | 'member';\n  joinedAt: Date;\n  isActive: boolean;\n}\n\n// Club membership hook\nexport function useMyClubMembership() {\n  return useQuery<ClubMembership[]>({\n    queryKey: ['/api/clubs/my-membership'],\n  });\n}\n\n// Club search hook\nexport function useClubSearch(region: string) {\n  return useQuery<ClubSearchResult[]>({\n    queryKey: [`/api/clubs/search?region=${encodeURIComponent(region)}`],\n    enabled: !!region,\n  });\n}\n\n// Club members hook\nexport function useClubMembers(clubId: number) {\n  return useQuery<ClubMember[]>({\n    queryKey: ['/api/clubs', clubId, 'members'],\n    enabled: !!clubId,\n  });\n}\n\n// Club matches hook\nexport function useClubMatches(clubId: number) {\n  return useQuery({\n    queryKey: ['/api/clubs', clubId, 'matches'],\n    enabled: !!clubId,\n  });\n}\n\n// Create club mutation\nexport function useCreateClub() {\n  return useMutation({\n    mutationFn: async (clubData: {\n      name: string;\n      region: string;\n      description?: string;\n      logoUrl?: string;\n      bannerUrl?: string;\n      primaryColor?: string;\n    }) => {\n      const response = await apiRequest('POST', '/api/clubs', clubData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/clubs/my-membership'] });\n    },\n  });\n}\n\n// Join club mutation\nexport function useJoinClub() {\n  return useMutation({\n    mutationFn: async (clubId: number) => {\n      const response = await apiRequest('POST', `/api/clubs/${clubId}/join`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/clubs/my-membership'] });\n    },\n  });\n}\n\n// Leave club mutation\nexport function useLeaveClub() {\n  return useMutation({\n    mutationFn: async (clubId: number) => {\n      const response = await apiRequest('DELETE', `/api/clubs/${clubId}/leave`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/clubs/my-membership'] });\n    },\n  });\n}\n\n// Create club match mutation\nexport function useCreateClubMatch() {\n  return useMutation({\n    mutationFn: async ({ clubId, matchData }: {\n      clubId: number;\n      matchData: {\n        receivingClubId: number;\n        matchDate?: Date;\n        matchLocation?: string;\n        matchType?: 'friendly' | 'tournament' | 'league';\n        notes?: string;\n      };\n    }) => {\n      const response = await apiRequest('POST', `/api/clubs/${clubId}/matches`, matchData);\n      return response.json();\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/clubs', variables.clubId, 'matches'] \n      });\n    },\n  });\n}\n\n// Update member role mutation\nexport function useUpdateMemberRole() {\n  return useMutation({\n    mutationFn: async ({ memberId, role }: {\n      memberId: number;\n      role: 'owner' | 'admin' | 'member';\n    }) => {\n      const response = await apiRequest('PATCH', `/api/clubs/members/${memberId}/role`, { role });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/clubs'] });\n    },\n  });\n}\n\n// Remove member mutation\nexport function useRemoveMember() {\n  return useMutation({\n    mutationFn: async (memberId: number) => {\n      const response = await apiRequest('DELETE', `/api/clubs/members/${memberId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/clubs'] });\n    },\n  });\n}","size_bytes":4422},"server/routes/clubs.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { verifyFirebaseToken } from \"../firebase-admin.js\";\nimport { storage } from \"../storage.js\";\nimport { insertClubSchema, insertClubMemberSchema, insertClubMatchSchema } from \"@shared/schema\";\n\ninterface AuthenticatedRequest extends Request {\n  user: {\n    uid: string;\n  };\n}\n\nexport function registerClubRoutes(app: Express) {\n  // 사용자의 클럽 멤버십 조회\n  app.get('/api/clubs/my-membership', verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const userId = req.user.uid;\n      const memberships = await storage.getUserClubs(userId);\n      \n      // 클럽 정보도 함께 조회\n      const clubsWithInfo = await Promise.all(\n        memberships.map(async (membership) => {\n          const club = await storage.getClubById(membership.clubId);\n          return {\n            membership,\n            club\n          };\n        })\n      );\n      \n      res.json(clubsWithInfo);\n    } catch (error: unknown) {\n      console.error('클럽 멤버십 조회 오류:', error);\n      res.status(500).json({ error: '서버 오류가 발생했습니다.' });\n    }\n  });\n\n  // 클럽 생성\n  app.post('/api/clubs', verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const userId = req.user.uid;\n      \n      // 입력 데이터 검증\n      const result = insertClubSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ \n          error: '입력 데이터가 올바르지 않습니다.',\n          details: result.error.errors\n        });\n      }\n\n      // 클럽 생성\n      const newClub = await storage.createClub(result.data);\n      \n      // 생성자를 owner로 추가\n      await storage.addClubMember({\n        userId,\n        clubId: newClub.id,\n        role: 'owner'\n      });\n\n      res.status(201).json(newClub);\n    } catch (error) {\n      console.error('클럽 생성 오류:', error);\n      res.status(500).json({ error: '서버 오류가 발생했습니다.' });\n    }\n  });\n\n  // 지역별 클럽 검색\n  app.get('/api/clubs/search', verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { region } = req.query;\n      \n      if (!region) {\n        return res.status(400).json({ error: '지역 정보가 필요합니다.' });\n      }\n\n      const clubs = await storage.getClubsByRegion(region as string);\n      \n      // 각 클럽의 멤버 수 추가\n      const clubsWithMemberCount = await Promise.all(\n        clubs.map(async (club) => {\n          const members = await storage.getClubMembers(club.id);\n          return {\n            ...club,\n            memberCount: members.length\n          };\n        })\n      );\n\n      res.json(clubsWithMemberCount);\n    } catch (error) {\n      console.error('클럽 검색 오류:', error);\n      res.status(500).json({ error: '서버 오류가 발생했습니다.' });\n    }\n  });\n\n  // 클럽 가입\n  app.post('/api/clubs/:clubId/join', verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const userId = req.user.uid;\n      const clubId = parseInt(req.params.clubId);\n\n      if (isNaN(clubId)) {\n        return res.status(400).json({ error: '올바르지 않은 클럽 ID입니다.' });\n      }\n\n      // 클럽 존재 확인\n      const club = await storage.getClubById(clubId);\n      if (!club) {\n        return res.status(404).json({ error: '클럽을 찾을 수 없습니다.' });\n      }\n\n      // 이미 가입했는지 확인\n      const existingMembership = await storage.getUserClubMembership(userId, clubId);\n      if (existingMembership) {\n        return res.status(409).json({ error: '이미 가입된 클럽입니다.' });\n      }\n\n      // 클럽 가입\n      const membership = await storage.addClubMember({\n        userId,\n        clubId,\n        role: 'member'\n      });\n\n      res.status(201).json({ membership, club });\n    } catch (error) {\n      console.error('클럽 가입 오류:', error);\n      res.status(500).json({ error: '서버 오류가 발생했습니다.' });\n    }\n  });\n\n  // 클럽 멤버 목록 조회\n  app.get('/api/clubs/:clubId/members', verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const clubId = parseInt(req.params.clubId);\n      const userId = req.user.uid;\n\n      if (isNaN(clubId)) {\n        return res.status(400).json({ error: '올바르지 않은 클럽 ID입니다.' });\n      }\n\n      // 사용자가 클럽 멤버인지 확인\n      const userMembership = await storage.getUserClubMembership(userId, clubId);\n      if (!userMembership) {\n        return res.status(403).json({ error: '클럽 멤버만 접근할 수 있습니다.' });\n      }\n\n      // 멤버 목록 조회\n      const members = await storage.getClubMembers(clubId);\n      res.json(members);\n    } catch (error) {\n      console.error('클럽 멤버 조회 오류:', error);\n      res.status(500).json({ error: '서버 오류가 발생했습니다.' });\n    }\n  });\n\n  // 클럽 탈퇴\n  app.delete('/api/clubs/:clubId/leave', verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const userId = req.user.uid;\n      const clubId = parseInt(req.params.clubId);\n\n      if (isNaN(clubId)) {\n        return res.status(400).json({ error: '올바르지 않은 클럽 ID입니다.' });\n      }\n\n      // 사용자의 멤버십 찾기\n      const membership = await storage.getUserClubMembership(userId, clubId);\n      if (!membership) {\n        return res.status(404).json({ error: '클럽 멤버가 아닙니다.' });\n      }\n\n      // 클럽장은 탈퇴 불가 (권한 이양 필요)\n      if (membership.role === 'owner') {\n        return res.status(403).json({ error: '클럽장은 권한을 이양한 후 탈퇴할 수 있습니다.' });\n      }\n\n      // 멤버십 비활성화 (소프트 삭제)\n      await storage.removeClubMember(membership.id);\n      \n      res.json({ message: '클럽에서 탈퇴했습니다.' });\n    } catch (error) {\n      console.error('클럽 탈퇴 오류:', error);\n      res.status(500).json({ error: '서버 오류가 발생했습니다.' });\n    }\n  });\n\n  // 교류전 신청\n  app.post('/api/clubs/:clubId/matches', verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const userId = req.user.uid;\n      const requestingClubId = parseInt(req.params.clubId);\n      \n      // 입력 데이터 검증\n      const result = insertClubMatchSchema.safeParse({\n        ...req.body,\n        requestingClubId\n      });\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          error: '입력 데이터가 올바르지 않습니다.',\n          details: result.error.errors\n        });\n      }\n\n      // 사용자가 해당 클럽의 관리자인지 확인\n      const userMembership = await storage.getUserClubMembership(userId, requestingClubId);\n      if (!userMembership || !['owner', 'admin'].includes(userMembership.role)) {\n        return res.status(403).json({ error: '클럽 관리자만 교류전을 신청할 수 있습니다.' });\n      }\n\n      // 교류전 생성\n      const match = await storage.createClubMatch(result.data);\n      res.status(201).json(match);\n    } catch (error) {\n      console.error('교류전 신청 오류:', error);\n      res.status(500).json({ error: '서버 오류가 발생했습니다.' });\n    }\n  });\n\n  // 클럽 교류전 목록 조회\n  app.get('/api/clubs/:clubId/matches', verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const clubId = parseInt(req.params.clubId);\n      const userId = req.user.uid;\n\n      if (isNaN(clubId)) {\n        return res.status(400).json({ error: '올바르지 않은 클럽 ID입니다.' });\n      }\n\n      // 사용자가 클럽 멤버인지 확인\n      const userMembership = await storage.getUserClubMembership(userId, clubId);\n      if (!userMembership) {\n        return res.status(403).json({ error: '클럽 멤버만 접근할 수 있습니다.' });\n      }\n\n      // 교류전 목록 조회\n      const matches = await storage.getClubMatches(clubId);\n      res.json(matches);\n    } catch (error) {\n      console.error('교류전 목록 조회 오류:', error);\n      res.status(500).json({ error: '서버 오류가 발생했습니다.' });\n    }\n  });\n\n  // 클럽 멤버 역할 변경 (관리자만)\n  app.patch('/api/clubs/members/:memberId/role', verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const memberId = parseInt(req.params.memberId);\n      const userId = req.user.uid;\n      const { role } = req.body;\n\n      if (isNaN(memberId)) {\n        return res.status(400).json({ error: '올바르지 않은 멤버 ID입니다.' });\n      }\n\n      if (!['owner', 'admin', 'member'].includes(role)) {\n        return res.status(400).json({ error: '올바르지 않은 역할입니다.' });\n      }\n\n      // 대상 멤버 정보 조회\n      const targetMember = await storage.getMemberById(memberId);\n      if (!targetMember || !targetMember.isActive) {\n        return res.status(404).json({ error: '멤버를 찾을 수 없습니다.' });\n      }\n\n      // 사용자의 권한 확인\n      const userMembership = await storage.getUserClubMembership(userId, targetMember.clubId);\n      if (!userMembership || !['owner', 'admin'].includes(userMembership.role)) {\n        return res.status(403).json({ error: '권한이 없습니다.' });\n      }\n\n      // 클럽장 권한 변경은 클럽장만 가능\n      if (targetMember.role === 'owner' && userMembership.role !== 'owner') {\n        return res.status(403).json({ error: '클럽장 권한은 클럽장만 변경할 수 있습니다.' });\n      }\n\n      // 자신을 클럽장에서 강등하는 것 방지\n      if (targetMember.userId === userId && targetMember.role === 'owner' && role !== 'owner') {\n        return res.status(403).json({ error: '클럽장은 자신의 권한을 다른 사람에게 이양한 후 강등할 수 있습니다.' });\n      }\n\n      // 역할 변경\n      const updatedMember = await storage.updateMemberRole(memberId, role);\n      res.json(updatedMember);\n    } catch (error) {\n      console.error('멤버 역할 변경 오류:', error);\n      res.status(500).json({ error: '서버 오류가 발생했습니다.' });\n    }\n  });\n\n  // 클럽 멤버 제거 (관리자만)\n  app.delete('/api/clubs/members/:memberId', verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const memberId = parseInt(req.params.memberId);\n      const userId = req.user.uid;\n\n      if (isNaN(memberId)) {\n        return res.status(400).json({ error: '올바르지 않은 멤버 ID입니다.' });\n      }\n\n      // 대상 멤버 정보 조회\n      const targetMember = await storage.getMemberById(memberId);\n      if (!targetMember || !targetMember.isActive) {\n        return res.status(404).json({ error: '멤버를 찾을 수 없습니다.' });\n      }\n\n      // 사용자의 권한 확인\n      const userMembership = await storage.getUserClubMembership(userId, targetMember.clubId);\n      if (!userMembership || !['owner', 'admin'].includes(userMembership.role)) {\n        return res.status(403).json({ error: '권한이 없습니다.' });\n      }\n\n      // 클럽장은 제거할 수 없음\n      if (targetMember.role === 'owner') {\n        return res.status(403).json({ error: '클럽장은 제거할 수 없습니다. 권한을 이양한 후 탈퇴해주세요.' });\n      }\n\n      // 자신을 제거하는 것은 탈퇴 API 사용\n      if (targetMember.userId === userId) {\n        return res.status(400).json({ error: '자신을 제거하려면 탈퇴 기능을 사용해주세요.' });\n      }\n\n      // 멤버 제거 (소프트 삭제)\n      await storage.removeClubMember(memberId);\n      res.json({ message: '멤버가 제거되었습니다.' });\n    } catch (error) {\n      console.error('멤버 제거 오류:', error);\n      res.status(500).json({ error: '서버 오류가 발생했습니다.' });\n    }\n  });\n\n  // 개별 클럽 멤버 조회 (관리자 또는 본인만)\n  app.get('/api/clubs/members/:memberId', verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const memberId = parseInt(req.params.memberId);\n      const userId = req.user.uid;\n\n      if (isNaN(memberId)) {\n        return res.status(400).json({ error: '올바르지 않은 멤버 ID입니다.' });\n      }\n\n      // 대상 멤버 정보 조회\n      const targetMember = await storage.getMemberById(memberId);\n      if (!targetMember || !targetMember.isActive) {\n        return res.status(404).json({ error: '멤버를 찾을 수 없습니다.' });\n      }\n\n      // 권한 확인: 클럽 관리자이거나 본인이어야 함\n      const userMembership = await storage.getUserClubMembership(userId, targetMember.clubId);\n      const isAdmin = userMembership && ['owner', 'admin'].includes(userMembership.role);\n      const isSelf = targetMember.userId === userId;\n\n      if (!isAdmin && !isSelf) {\n        return res.status(403).json({ error: '권한이 없습니다.' });\n      }\n\n      res.json(targetMember);\n    } catch (error: unknown) {\n      console.error('멤버 조회 오류:', error);\n      res.status(500).json({ error: '서버 오류가 발생했습니다.' });\n    }\n  });\n}","size_bytes":13427},"client/src/components/BracketGeneratorModal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport LoadingSpinner from \"./LoadingSpinner\";\n\ninterface ClubMember {\n  id: number;\n  userId: string;\n  clubId: number;\n  role: 'owner' | 'admin' | 'member';\n  joinedAt: Date;\n  isActive: boolean;\n}\n\ninterface BracketGeneratorModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  clubId: number;\n  members: ClubMember[];\n}\n\nconst bracketSchema = z.object({\n  playersPerCourt: z.number().min(2, \"코트당 최소 2명이 필요합니다.\").max(6, \"코트당 최대 6명까지 가능합니다.\"),\n  gameFormat: z.enum(['mens_singles', 'womens_singles', 'mens_doubles', 'womens_doubles', 'mixed_doubles']),\n  genderComposition: z.enum(['all', 'male_only', 'female_only', 'mixed']),\n  selectedMembers: z.array(z.number()).min(4, \"최소 4명 이상 선택해야 합니다.\"),\n});\n\ntype BracketFormData = z.infer<typeof bracketSchema>;\n\ninterface GeneratedMatch {\n  id: string;\n  court: number;\n  players: string[];\n  gameFormat: string;\n}\n\nconst GAME_FORMAT_LABELS = {\n  mens_singles: \"남자 단식\",\n  womens_singles: \"여자 단식\", \n  mens_doubles: \"남자 복식\",\n  womens_doubles: \"여자 복식\",\n  mixed_doubles: \"혼합 복식\"\n};\n\nconst GENDER_LABELS = {\n  all: \"전체\",\n  male_only: \"남성만\",\n  female_only: \"여성만\", \n  mixed: \"혼성\"\n};\n\nexport default function BracketGeneratorModal({ isOpen, onClose, clubId, members }: BracketGeneratorModalProps) {\n  const { toast } = useToast();\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [generatedMatches, setGeneratedMatches] = useState<GeneratedMatch[]>([]);\n  const [showResults, setShowResults] = useState(false);\n\n  const form = useForm<BracketFormData>({\n    resolver: zodResolver(bracketSchema),\n    defaultValues: {\n      playersPerCourt: 4,\n      gameFormat: 'mens_doubles',\n      genderComposition: 'all',\n      selectedMembers: [],\n    },\n  });\n\n  const selectedMembers = form.watch('selectedMembers');\n  const playersPerCourt = form.watch('playersPerCourt');\n\n  const handleMemberToggle = (memberId: number, checked: boolean) => {\n    const current = selectedMembers;\n    if (checked) {\n      form.setValue('selectedMembers', [...current, memberId]);\n    } else {\n      form.setValue('selectedMembers', current.filter(id => id !== memberId));\n    }\n  };\n\n  const generateRandomBracket = (playerIds: number[], playersPerCourt: number): GeneratedMatch[] => {\n    const shuffled = [...playerIds].sort(() => Math.random() - 0.5);\n    const matches: GeneratedMatch[] = [];\n    \n    let courtNumber = 1;\n    for (let i = 0; i < shuffled.length; i += playersPerCourt) {\n      const courtPlayers = shuffled.slice(i, i + playersPerCourt);\n      if (courtPlayers.length === playersPerCourt) {\n        matches.push({\n          id: `match-${courtNumber}`,\n          court: courtNumber,\n          players: courtPlayers.map(id => `멤버 ${id}`),\n          gameFormat: form.getValues('gameFormat'),\n        });\n        courtNumber++;\n      }\n    }\n    \n    return matches;\n  };\n\n  const onSubmit = async (data: BracketFormData) => {\n    try {\n      setIsGenerating(true);\n      \n      // 대진표 생성 시뮬레이션\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      const matches = generateRandomBracket(data.selectedMembers, data.playersPerCourt);\n      setGeneratedMatches(matches);\n      setShowResults(true);\n      \n      toast({\n        title: \"대진표 생성 완료\",\n        description: `${matches.length}개 코트의 대진표가 생성되었습니다.`,\n      });\n      \n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : \"대진표 생성 중 오류가 발생했습니다.\";\n      toast({\n        title: \"생성 실패\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handleClose = () => {\n    setShowResults(false);\n    setGeneratedMatches([]);\n    form.reset();\n    onClose();\n  };\n\n  const estimatedCourts = Math.floor(selectedMembers.length / playersPerCourt);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl mx-auto max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <span className=\"text-2xl\">🎯</span>\n            <span>자동 대진표 생성</span>\n          </DialogTitle>\n          <DialogDescription>\n            참석자와 경기 방식을 선택하면 랜덤으로 대진표를 생성합니다.\n          </DialogDescription>\n        </DialogHeader>\n\n        {!showResults ? (\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              {/* 경기 설정 */}\n              <div className=\"space-y-4\">\n                <h3 className=\"font-semibold text-lg\">경기 설정</h3>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"playersPerCourt\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>코트당 인원</FormLabel>\n                        <FormControl>\n                          <Select\n                            value={field.value.toString()}\n                            onValueChange={(value) => field.onChange(parseInt(value))}\n                          >\n                            <SelectTrigger data-testid=\"select-players-per-court\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"2\">2명 (단식)</SelectItem>\n                              <SelectItem value=\"4\">4명 (복식)</SelectItem>\n                              <SelectItem value=\"6\">6명 (3vs3)</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"gameFormat\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>경기 방식</FormLabel>\n                        <FormControl>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <SelectTrigger data-testid=\"select-game-format\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {Object.entries(GAME_FORMAT_LABELS).map(([value, label]) => (\n                                <SelectItem key={value} value={value}>\n                                  {label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"genderComposition\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>성별 구성</FormLabel>\n                      <FormControl>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <SelectTrigger data-testid=\"select-gender-composition\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {Object.entries(GENDER_LABELS).map(([value, label]) => (\n                              <SelectItem key={value} value={value}>\n                                {label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {/* 참석자 선택 */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"font-semibold text-lg\">참석자 선택</h3>\n                  <div className=\"text-sm text-muted-foreground\">\n                    {selectedMembers.length}명 선택 | 예상 코트: {estimatedCourts}개\n                  </div>\n                </div>\n                \n                <div className=\"max-h-64 overflow-y-auto border rounded-lg p-4 space-y-2\">\n                  {members.map((member) => (\n                    <div \n                      key={member.id} \n                      className=\"flex items-center space-x-3 p-2 hover:bg-muted rounded-lg\"\n                    >\n                      <Checkbox\n                        checked={selectedMembers.includes(member.id)}\n                        onCheckedChange={(checked) => handleMemberToggle(member.id, checked as boolean)}\n                        data-testid={`checkbox-member-${member.id}`}\n                      />\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium\">멤버 {member.id}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {new Date(member.joinedAt).toLocaleDateString()} 가입\n                        </div>\n                      </div>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {member.role === 'owner' ? '클럽장' : member.role === 'admin' ? '관리자' : '멤버'}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={isGenerating || selectedMembers.length < 4}\n                data-testid=\"button-generate-bracket\"\n              >\n                {isGenerating ? (\n                  <>\n                    <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                    대진표 생성 중...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-random mr-2\" />\n                    대진표 생성\n                  </>\n                )}\n              </Button>\n            </form>\n          </Form>\n        ) : (\n          /* 생성된 대진표 결과 */\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-semibold mb-2\">🎉 대진표 생성 완료!</h3>\n              <p className=\"text-muted-foreground\">\n                총 {generatedMatches.length}개 코트의 대진이 완성되었습니다.\n              </p>\n            </div>\n\n            <div className=\"space-y-4\">\n              {generatedMatches.map((match) => (\n                <div \n                  key={match.id} \n                  className=\"bg-muted rounded-lg p-4\"\n                  data-testid={`generated-match-${match.court}`}\n                >\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <h4 className=\"font-semibold\">코트 {match.court}번</h4>\n                    <Badge variant=\"outline\">\n                      {GAME_FORMAT_LABELS[match.gameFormat as keyof typeof GAME_FORMAT_LABELS]}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {match.players.map((player, index) => (\n                      <div \n                        key={index}\n                        className=\"bg-background rounded p-2 text-center text-sm font-medium\"\n                      >\n                        {player}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"flex space-x-2\">\n              <Button \n                variant=\"outline\" \n                className=\"flex-1\"\n                onClick={() => setShowResults(false)}\n                data-testid=\"button-regenerate\"\n              >\n                <i className=\"fas fa-redo mr-2\" />\n                다시 생성\n              </Button>\n              <Button \n                className=\"flex-1\"\n                onClick={handleClose}\n                data-testid=\"button-save-bracket\"\n              >\n                <i className=\"fas fa-save mr-2\" />\n                저장하고 닫기\n              </Button>\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":13740},"client/src/components/ClubAnalyticsModal.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport LoadingSpinner from \"./LoadingSpinner\";\n\ninterface ClubMember {\n  id: number;\n  userId: string;\n  clubId: number;\n  role: 'owner' | 'admin' | 'member';\n  joinedAt: Date;\n  isActive: boolean;\n}\n\ninterface ClubAnalyticsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  clubId: number;\n  clubName: string;\n  members: ClubMember[];\n}\n\n// 모의 데이터 - 실제로는 API에서 가져올 데이터\nconst mockPersonalRankings = [\n  { id: 1, name: \"김테니스\", wins: 15, losses: 3, winRate: 83.3, points: 1250 },\n  { id: 2, name: \"이스매시\", wins: 12, losses: 6, winRate: 66.7, points: 1180 },\n  { id: 3, name: \"박서브\", wins: 10, losses: 8, winRate: 55.6, points: 1120 },\n  { id: 4, name: \"최발리\", wins: 8, losses: 10, winRate: 44.4, points: 1080 },\n  { id: 5, name: \"정패싱\", wins: 6, losses: 12, winRate: 33.3, points: 1020 },\n];\n\nconst mockMatchHistory = [\n  { \n    id: 1, \n    opponent: \"서울테니스클럽\", \n    date: \"2024-11-15\", \n    result: \"승리\", \n    score: \"3-1\",\n    eloChange: \"+15\",\n    gameFormat: \"mens_doubles\"\n  },\n  { \n    id: 2, \n    opponent: \"강남라켓클럽\", \n    date: \"2024-10-28\", \n    result: \"패배\", \n    score: \"1-3\",\n    eloChange: \"-12\",\n    gameFormat: \"mixed_doubles\"\n  },\n  { \n    id: 3, \n    opponent: \"잠실테니스클럽\", \n    date: \"2024-10-10\", \n    result: \"승리\", \n    score: \"2-2 (승부차기)\",\n    eloChange: \"+8\",\n    gameFormat: \"mens_doubles\"\n  },\n];\n\nconst mockPartnerCompatibility = [\n  { \n    player1: \"김테니스\", \n    player2: \"이스매시\", \n    matches: 8, \n    wins: 6, \n    winRate: 75, \n    chemistry: \"우수\" \n  },\n  { \n    player1: \"박서브\", \n    player2: \"최발리\", \n    matches: 6, \n    wins: 4, \n    winRate: 66.7, \n    chemistry: \"좋음\" \n  },\n  { \n    player1: \"김테니스\", \n    player2: \"정패싱\", \n    matches: 5, \n    wins: 2, \n    winRate: 40, \n    chemistry: \"보통\" \n  },\n];\n\nconst GAME_FORMAT_LABELS = {\n  mens_singles: \"남자 단식\",\n  womens_singles: \"여자 단식\", \n  mens_doubles: \"남자 복식\",\n  womens_doubles: \"여자 복식\",\n  mixed_doubles: \"혼합 복식\"\n};\n\nexport default function ClubAnalyticsModal({ isOpen, onClose, clubId, clubName, members }: ClubAnalyticsModalProps) {\n  const [activeTab, setActiveTab] = useState(\"rankings\");\n  const [isLoading] = useState(false);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl mx-auto max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <span className=\"text-2xl\">📊</span>\n            <span>{clubName} 전적 분석</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"rankings\" data-testid=\"tab-personal-rankings\">\n              개인 랭킹\n            </TabsTrigger>\n            <TabsTrigger value=\"matches\" data-testid=\"tab-match-history\">\n              경기별 전적\n            </TabsTrigger>\n            <TabsTrigger value=\"partners\" data-testid=\"tab-partner-compatibility\">\n              파트너 궁합\n            </TabsTrigger>\n          </TabsList>\n\n          {/* 개인 랭킹 탭 */}\n          <TabsContent value=\"rankings\" className=\"space-y-6\">\n            <div className=\"text-sm text-muted-foreground\">\n              클럽 내 개인별 승률과 포인트를 기준으로 한 랭킹입니다.\n            </div>\n            \n            {isLoading ? (\n              <div className=\"flex justify-center py-12\">\n                <LoadingSpinner size=\"lg\" />\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {mockPersonalRankings.map((player, index) => (\n                  <div \n                    key={player.id}\n                    className=\"bg-muted rounded-lg p-4\"\n                    data-testid={`ranking-player-${player.id}`}\n                  >\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-bold ${\n                          index === 0 ? 'bg-yellow-500' : \n                          index === 1 ? 'bg-gray-400' : \n                          index === 2 ? 'bg-amber-600' : 'bg-slate-500'\n                        }`}>\n                          {index + 1}\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold\">{player.name}</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {player.wins}승 {player.losses}패\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"text-right\">\n                        <div className=\"text-lg font-bold text-primary\">\n                          {player.points}점\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          승률 {player.winRate}%\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>승률</span>\n                        <span>{player.winRate}%</span>\n                      </div>\n                      <Progress value={player.winRate} className=\"h-2\" />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* 경기별 전적 탭 */}\n          <TabsContent value=\"matches\" className=\"space-y-6\">\n            <div className=\"text-sm text-muted-foreground\">\n              다른 클럽과의 교류전 기록과 상세 결과입니다.\n            </div>\n            \n            {/* 전체 통계 요약 */}\n            <div className=\"grid grid-cols-4 gap-4\">\n              <div className=\"bg-muted rounded-lg p-4 text-center\">\n                <div className=\"text-2xl font-bold text-primary\">12</div>\n                <div className=\"text-xs text-muted-foreground\">총 경기</div>\n              </div>\n              <div className=\"bg-muted rounded-lg p-4 text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">8</div>\n                <div className=\"text-xs text-muted-foreground\">승리</div>\n              </div>\n              <div className=\"bg-muted rounded-lg p-4 text-center\">\n                <div className=\"text-2xl font-bold text-red-600\">4</div>\n                <div className=\"text-xs text-muted-foreground\">패배</div>\n              </div>\n              <div className=\"bg-muted rounded-lg p-4 text-center\">\n                <div className=\"text-2xl font-bold text-amber-600\">66.7%</div>\n                <div className=\"text-xs text-muted-foreground\">승률</div>\n              </div>\n            </div>\n            \n            <div className=\"space-y-3\">\n              {mockMatchHistory.map((match) => (\n                <div \n                  key={match.id}\n                  className=\"bg-muted rounded-lg p-4\"\n                  data-testid={`match-history-${match.id}`}\n                >\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div>\n                      <h4 className=\"font-semibold\">vs {match.opponent}</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {new Date(match.date).toLocaleDateString('ko-KR')}\n                      </p>\n                    </div>\n                    \n                    <div className=\"text-right\">\n                      <Badge \n                        variant=\"outline\" \n                        className={\n                          match.result === \"승리\" \n                            ? \"text-green-600 border-green-600\" \n                            : \"text-red-600 border-red-600\"\n                        }\n                      >\n                        {match.result}\n                      </Badge>\n                      <div className=\"text-sm text-muted-foreground mt-1\">\n                        {match.eloChange} ELO\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"font-medium\">{match.score}</span>\n                    <Badge variant=\"secondary\">\n                      {GAME_FORMAT_LABELS[match.gameFormat as keyof typeof GAME_FORMAT_LABELS]}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* 파트너 궁합 탭 */}\n          <TabsContent value=\"partners\" className=\"space-y-6\">\n            <div className=\"text-sm text-muted-foreground\">\n              복식 경기에서 함께 뛴 파트너들 간의 궁합도를 분석합니다.\n            </div>\n            \n            <div className=\"space-y-3\">\n              {mockPartnerCompatibility.map((partnership, index) => (\n                <div \n                  key={index}\n                  className=\"bg-muted rounded-lg p-4\"\n                  data-testid={`partnership-${index}`}\n                >\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div>\n                      <h4 className=\"font-semibold\">\n                        {partnership.player1} & {partnership.player2}\n                      </h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {partnership.matches}경기 함께 출전\n                      </p>\n                    </div>\n                    \n                    <div className=\"text-right\">\n                      <Badge \n                        variant=\"outline\"\n                        className={\n                          partnership.chemistry === \"우수\" ? \"text-green-600 border-green-600\" :\n                          partnership.chemistry === \"좋음\" ? \"text-blue-600 border-blue-600\" :\n                          \"text-yellow-600 border-yellow-600\"\n                        }\n                      >\n                        {partnership.chemistry}\n                      </Badge>\n                      <div className=\"text-sm text-muted-foreground mt-1\">\n                        승률 {partnership.winRate}%\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>{partnership.wins}승 {partnership.matches - partnership.wins}패</span>\n                      <span>궁합도 {partnership.winRate}%</span>\n                    </div>\n                    <Progress value={partnership.winRate} className=\"h-2\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4\">\n              <h4 className=\"font-semibold mb-2 flex items-center\">\n                <i className=\"fas fa-lightbulb mr-2 text-blue-600\" />\n                추천 파트너 조합\n              </h4>\n              <p className=\"text-sm text-muted-foreground mb-3\">\n                데이터 분석 결과 가장 높은 승률을 보이는 파트너 조합입니다.\n              </p>\n              <div className=\"text-sm\">\n                <span className=\"font-medium\">김테니스 & 이스매시</span> - 승률 75% (8경기 중 6승)\n              </div>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":12324},"client/src/components/ClubManagementModal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport LoadingSpinner from \"./LoadingSpinner\";\n\ninterface ClubMembership {\n  membership: {\n    id: number;\n    userId: string;\n    clubId: number;\n    role: 'owner' | 'admin' | 'member';\n    joinedAt: Date;\n    isActive: boolean;\n  };\n  club: {\n    id: number;\n    name: string;\n    logoUrl: string | null;\n    bannerUrl: string | null;\n    description: string | null;\n    primaryColor: string | null;\n    rankingPoints: number | null;\n    region: string;\n    establishedAt: Date | null;\n  };\n}\n\ninterface ClubManagementModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  membership: ClubMembership;\n}\n\nconst clubSettingsSchema = z.object({\n  name: z.string().min(2, \"클럽명은 2글자 이상이어야 합니다.\").max(50, \"클럽명은 50글자 이하여야 합니다.\"),\n  description: z.string().max(500, \"소개글은 500글자 이하여야 합니다.\").optional(),\n  primaryColor: z.string().regex(/^#[0-9A-F]{6}$/i, \"올바른 색상 코드를 입력해주세요.\"),\n  logoUrl: z.string().url(\"올바른 URL을 입력해주세요.\").optional().or(z.literal(\"\")),\n  bannerUrl: z.string().url(\"올바른 URL을 입력해주세요.\").optional().or(z.literal(\"\")),\n});\n\ntype ClubSettingsFormData = z.infer<typeof clubSettingsSchema>;\n\nexport default function ClubManagementModal({ isOpen, onClose, membership }: ClubManagementModalProps) {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"identity\");\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  const form = useForm<ClubSettingsFormData>({\n    resolver: zodResolver(clubSettingsSchema),\n    defaultValues: {\n      name: membership.club.name || \"\",\n      description: membership.club.description || \"\",\n      primaryColor: membership.club.primaryColor || \"#22c55e\",\n      logoUrl: membership.club.logoUrl || \"\",\n      bannerUrl: membership.club.bannerUrl || \"\",\n    },\n  });\n\n  const onSubmitSettings = async (data: ClubSettingsFormData) => {\n    try {\n      setIsUpdating(true);\n      \n      // TODO: API 연동 구현\n      await new Promise(resolve => setTimeout(resolve, 1000)); // 임시 지연\n      \n      toast({\n        title: \"클럽 설정 업데이트 완료\",\n        description: \"클럽 정보가 성공적으로 업데이트되었습니다.\",\n      });\n      \n      onClose();\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : \"클럽 설정 업데이트 중 오류가 발생했습니다.\";\n      toast({\n        title: \"업데이트 실패\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl mx-auto max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <span className=\"text-2xl\">⚙️</span>\n            <span>{membership.club.name} 관리</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"identity\" data-testid=\"tab-club-identity\">\n              클럽 정체성\n            </TabsTrigger>\n            <TabsTrigger value=\"fees\" data-testid=\"tab-club-fees\">\n              회비 관리\n            </TabsTrigger>\n            <TabsTrigger value=\"meetings\" data-testid=\"tab-club-meetings\">\n              정기 모임\n            </TabsTrigger>\n            <TabsTrigger value=\"matches\" data-testid=\"tab-club-inter-matches\">\n              교류전\n            </TabsTrigger>\n          </TabsList>\n\n          {/* 클럽 정체성 탭 */}\n          <TabsContent value=\"identity\" className=\"space-y-6\">\n            <div className=\"text-sm text-muted-foreground\">\n              클럽의 로고, 배너, 색상, 소개글을 설정하여 클럽만의 개성을 표현하세요.\n            </div>\n            \n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmitSettings)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>클럽명</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"클럽 이름\" data-testid=\"input-club-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>클럽 소개글</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"클럽을 소개하는 글을 작성해주세요...\" \n                          className=\"min-h-[100px]\"\n                          data-testid=\"textarea-club-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"primaryColor\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>대표 색상</FormLabel>\n                      <FormControl>\n                        <div className=\"flex items-center space-x-2\">\n                          <Input \n                            {...field} \n                            type=\"color\" \n                            className=\"w-16 h-10 p-1 border rounded\"\n                            data-testid=\"input-club-color\"\n                          />\n                          <Input \n                            {...field} \n                            placeholder=\"#22c55e\"\n                            className=\"flex-1\"\n                            data-testid=\"input-club-color-hex\"\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"logoUrl\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>로고 URL (선택사항)</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"https://example.com/logo.png\"\n                          data-testid=\"input-club-logo-url\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"bannerUrl\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>배너 URL (선택사항)</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"https://example.com/banner.png\"\n                          data-testid=\"input-club-banner-url\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={isUpdating}\n                  data-testid=\"button-save-club-settings\"\n                >\n                  {isUpdating ? (\n                    <>\n                      <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                      업데이트 중...\n                    </>\n                  ) : (\n                    \"설정 저장\"\n                  )}\n                </Button>\n              </form>\n            </Form>\n          </TabsContent>\n\n          {/* 회비 관리 탭 */}\n          <TabsContent value=\"fees\" className=\"space-y-6\">\n            <div className=\"text-sm text-muted-foreground\">\n              클럽 회비를 관리하고 납부 현황을 확인하세요. (MVP: 수동 확인 방식)\n            </div>\n            \n            <div className=\"bg-muted rounded-lg p-4\">\n              <h4 className=\"font-semibold mb-3 flex items-center\">\n                <i className=\"fas fa-credit-card mr-2 text-primary\" />\n                회비 설정\n              </h4>\n              \n              <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">월 회비</label>\n                  <Input \n                    placeholder=\"30,000\" \n                    className=\"mt-1\"\n                    data-testid=\"input-monthly-fee\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">계좌 정보</label>\n                  <Input \n                    placeholder=\"하나은행 123-456789-01234\" \n                    className=\"mt-1\"\n                    data-testid=\"input-account-info\"\n                  />\n                </div>\n              </div>\n              \n              <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-save-fee-settings\">\n                <i className=\"fas fa-save mr-2\" />\n                회비 설정 저장\n              </Button>\n            </div>\n\n            <div className=\"bg-muted rounded-lg p-4\">\n              <h4 className=\"font-semibold mb-3 flex items-center\">\n                <i className=\"fas fa-check-circle mr-2 text-green-600\" />\n                납부 현황 (수동 확인)\n              </h4>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between p-2 bg-background rounded\">\n                  <span>김테니스 (2024년 12월)</span>\n                  <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                    납부 완료\n                  </Badge>\n                </div>\n                <div className=\"flex items-center justify-between p-2 bg-background rounded\">\n                  <span>이스매시 (2024년 12월)</span>\n                  <Badge variant=\"outline\" className=\"text-red-600 border-red-600\">\n                    미납\n                  </Badge>\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* 정기 모임 탭 */}\n          <TabsContent value=\"meetings\" className=\"space-y-6\">\n            <div className=\"text-sm text-muted-foreground\">\n              정기 모임을 등록하고 회원들의 참석 현황을 관리하세요.\n            </div>\n            \n            <div className=\"bg-muted rounded-lg p-4\">\n              <h4 className=\"font-semibold mb-3 flex items-center\">\n                <i className=\"fas fa-calendar-plus mr-2 text-primary\" />\n                새 모임 등록\n              </h4>\n              \n              <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">모임 제목</label>\n                  <Input \n                    placeholder=\"12월 정기 모임\" \n                    className=\"mt-1\"\n                    data-testid=\"input-meeting-title\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">날짜</label>\n                  <Input \n                    type=\"datetime-local\" \n                    className=\"mt-1\"\n                    data-testid=\"input-meeting-date\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"mb-4\">\n                <label className=\"text-sm font-medium\">장소</label>\n                <Input \n                  placeholder=\"테니스파크 코트 1-2번\" \n                  className=\"mt-1\"\n                  data-testid=\"input-meeting-location\"\n                />\n              </div>\n              \n              <Button className=\"w-full\" data-testid=\"button-create-meeting\">\n                <i className=\"fas fa-plus mr-2\" />\n                모임 등록\n              </Button>\n            </div>\n\n            <div className=\"bg-muted rounded-lg p-4\">\n              <h4 className=\"font-semibold mb-3 flex items-center\">\n                <i className=\"fas fa-users mr-2 text-green-600\" />\n                다가오는 모임\n              </h4>\n              \n              <div className=\"space-y-3\">\n                <div className=\"bg-background rounded-lg p-3\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h5 className=\"font-medium\">12월 정기 모임</h5>\n                    <Badge variant=\"outline\">진행 예정</Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    📅 2024년 12월 25일 오후 2시<br />\n                    📍 테니스파크 코트 1-2번\n                  </p>\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span>참석 현황: 8명 참석, 2명 불참, 3명 미응답</span>\n                    <Button size=\"sm\" variant=\"outline\" data-testid=\"button-send-reminder\">\n                      <i className=\"fas fa-bell mr-1\" />\n                      알림 발송\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* 교류전 탭 */}\n          <TabsContent value=\"matches\" className=\"space-y-6\">\n            <div className=\"text-sm text-muted-foreground\">\n              다른 클럽과의 교류전을 신청하고 관리하세요.\n            </div>\n            \n            <div className=\"bg-muted rounded-lg p-4\">\n              <h4 className=\"font-semibold mb-3 flex items-center\">\n                <i className=\"fas fa-handshake mr-2 text-primary\" />\n                교류전 신청\n              </h4>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">상대 클럽</label>\n                  <Input \n                    placeholder=\"클럽 검색...\" \n                    className=\"mt-1\"\n                    data-testid=\"input-opponent-club\"\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">희망 일시</label>\n                    <Input \n                      type=\"datetime-local\" \n                      className=\"mt-1\"\n                      data-testid=\"input-match-datetime\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">경기 장소</label>\n                    <Input \n                      placeholder=\"테니스 코트명\" \n                      className=\"mt-1\"\n                      data-testid=\"input-match-location\"\n                    />\n                  </div>\n                </div>\n                \n                <Button className=\"w-full\" data-testid=\"button-request-match\">\n                  <i className=\"fas fa-paper-plane mr-2\" />\n                  교류전 신청\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"bg-muted rounded-lg p-4\">\n              <h4 className=\"font-semibold mb-3 flex items-center\">\n                <i className=\"fas fa-trophy mr-2 text-amber-600\" />\n                교류전 내역\n              </h4>\n              \n              <div className=\"space-y-3\">\n                <div className=\"bg-background rounded-lg p-3\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"font-medium\">vs 서울테니스클럽</span>\n                    <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                      승리\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    📅 2024년 11월 15일<br />\n                    📍 올림픽 테니스장<br />\n                    🏆 3-1 승리 (+15 ELO)\n                  </p>\n                </div>\n                \n                <div className=\"bg-background rounded-lg p-3\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"font-medium\">vs 강남라켓클럽</span>\n                    <Badge variant=\"outline\" className=\"text-red-600 border-red-600\">\n                      패배\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    📅 2024년 10월 28일<br />\n                    📍 강남 스포츠센터<br />\n                    💔 1-3 패배 (-12 ELO)\n                  </p>\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":18313},"client/src/hooks/use-geolocation.tsx":{"content":"import { useState, useEffect } from 'react';\n\ninterface GeolocationPosition {\n  latitude: number;\n  longitude: number;\n  timestamp: number;\n}\n\ninterface UseGeolocationReturn {\n  position: GeolocationPosition | null;\n  error: string | null;\n  isLoading: boolean;\n  requestPermission: () => Promise<void>;\n  hasPermission: boolean;\n}\n\nexport function useGeolocation(): UseGeolocationReturn {\n  const [position, setPosition] = useState<GeolocationPosition | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasPermission, setHasPermission] = useState(false);\n\n  // Check for cached position on mount\n  useEffect(() => {\n    const cached = localStorage.getItem('user-location');\n    if (cached) {\n      try {\n        const parsed = JSON.parse(cached);\n        // Check if cached position is less than 24 hours old\n        if (Date.now() - parsed.timestamp < 24 * 60 * 60 * 1000) {\n          setPosition(parsed);\n          setHasPermission(true);\n        } else {\n          localStorage.removeItem('user-location');\n        }\n      } catch (e) {\n        localStorage.removeItem('user-location');\n      }\n    }\n  }, []);\n\n  const requestPermission = async (): Promise<void> => {\n    if (!navigator.geolocation) {\n      setError('위치 서비스가 지원되지 않는 브라우저입니다.');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const position = await new Promise<GeolocationPosition>((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(\n          (pos) => {\n            const locationData: GeolocationPosition = {\n              latitude: pos.coords.latitude,\n              longitude: pos.coords.longitude,\n              timestamp: Date.now(),\n            };\n            resolve(locationData);\n          },\n          (error) => {\n            switch (error.code) {\n              case error.PERMISSION_DENIED:\n                reject(new Error('위치 권한이 거부되었습니다.'));\n                break;\n              case error.POSITION_UNAVAILABLE:\n                reject(new Error('위치 정보를 사용할 수 없습니다.'));\n                break;\n              case error.TIMEOUT:\n                reject(new Error('위치 요청 시간이 초과되었습니다.'));\n                break;\n              default:\n                reject(new Error('알 수 없는 오류가 발생했습니다.'));\n                break;\n            }\n          },\n          {\n            enableHighAccuracy: true,\n            timeout: 10000,\n            maximumAge: 300000, // 5 minutes\n          }\n        );\n      });\n\n      setPosition(position);\n      setHasPermission(true);\n      \n      // Cache position for 24 hours\n      localStorage.setItem('user-location', JSON.stringify(position));\n    } catch (err) {\n      setError(err instanceof Error ? err.message : '위치를 가져올 수 없습니다.');\n      setHasPermission(false);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    position,\n    error,\n    isLoading,\n    requestPermission,\n    hasPermission,\n  };\n}\n\n// Haversine distance calculation\nexport function calculateDistance(\n  lat1: number,\n  lon1: number,\n  lat2: number,\n  lon2: number\n): number {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = toRadians(lat2 - lat1);\n  const dLon = toRadians(lon2 - lon1);\n  \n  const a = \n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *\n    Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  \n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distance = R * c;\n  \n  return Math.round(distance * 10) / 10; // Round to 1 decimal place\n}\n\nfunction toRadians(degrees: number): number {\n  return degrees * (Math.PI / 180);\n}","size_bytes":3825},"server/elo-calculator.ts":{"content":"/**\n * ELO Rating System Calculator for Tennis Club Rankings\n * \n * Based on standard ELO algorithm with tennis-specific adaptations:\n * - Singles matches: Direct ELO calculation between two players\n * - Doubles matches: Average team ELO vs Average team ELO, then distribute points\n */\n\nexport interface ELOResult {\n  winnerChange: number;\n  loserChange: number;\n  newWinnerRating: number;\n  newLoserRating: number;\n}\n\nexport interface TeamELOResult {\n  player1Change: number;\n  player2Change: number;\n  newPlayer1Rating: number;\n  newPlayer2Rating: number;\n}\n\n/**\n * Standard ELO calculation for singles matches\n * @param winnerRating Current rating of winner\n * @param loserRating Current rating of loser\n * @param kFactor K-factor (rating volatility, default 32 for club play)\n * @returns ELO changes and new ratings\n */\nexport function calculateSinglesELO(\n  winnerRating: number, \n  loserRating: number, \n  kFactor: number = 32\n): ELOResult {\n  // Expected scores based on ELO difference\n  const expectedWinner = 1 / (1 + Math.pow(10, (loserRating - winnerRating) / 400));\n  const expectedLoser = 1 / (1 + Math.pow(10, (winnerRating - loserRating) / 400));\n  \n  // Actual scores: 1 for winner, 0 for loser\n  const winnerChange = Math.round(kFactor * (1 - expectedWinner));\n  const loserChange = Math.round(kFactor * (0 - expectedLoser));\n  \n  return {\n    winnerChange,\n    loserChange,\n    newWinnerRating: winnerRating + winnerChange,\n    newLoserRating: loserRating + loserChange\n  };\n}\n\n/**\n * ELO calculation for doubles matches\n * Calculates team average ELO, applies standard ELO, then distributes points\n * @param winningTeam Array of [player1Rating, player2Rating] \n * @param losingTeam Array of [player1Rating, player2Rating]\n * @param kFactor K-factor for doubles (typically lower than singles)\n * @returns Individual ELO changes for all 4 players\n */\nexport function calculateDoublesELO(\n  winningTeam: [number, number],\n  losingTeam: [number, number],\n  kFactor: number = 24\n): { \n  winningTeam: TeamELOResult; \n  losingTeam: TeamELOResult; \n} {\n  const [winPlayer1, winPlayer2] = winningTeam;\n  const [losePlayer1, losePlayer2] = losingTeam;\n  \n  // Calculate team average ratings\n  const winningAvg = (winPlayer1 + winPlayer2) / 2;\n  const losingAvg = (losePlayer1 + losePlayer2) / 2;\n  \n  // Apply standard ELO calculation to team averages\n  const teamELO = calculateSinglesELO(winningAvg, losingAvg, kFactor);\n  \n  // Distribute points based on individual contribution to team strength\n  // Higher-rated players get slightly more points when winning, lose more when losing\n  const winPlayer1Share = winPlayer1 / (winPlayer1 + winPlayer2);\n  const winPlayer2Share = winPlayer2 / (winPlayer1 + winPlayer2);\n  const losePlayer1Share = losePlayer1 / (losePlayer1 + losePlayer2);\n  const losePlayer2Share = losePlayer2 / (losePlayer1 + losePlayer2);\n  \n  // Calculate individual changes (ensure integers)\n  const winPlayer1Change = Math.round(teamELO.winnerChange * winPlayer1Share);\n  const winPlayer2Change = Math.round(teamELO.winnerChange * winPlayer2Share);\n  const losePlayer1Change = Math.round(teamELO.loserChange * losePlayer1Share);\n  const losePlayer2Change = Math.round(teamELO.loserChange * losePlayer2Share);\n  \n  return {\n    winningTeam: {\n      player1Change: winPlayer1Change,\n      player2Change: winPlayer2Change,\n      newPlayer1Rating: winPlayer1 + winPlayer1Change,\n      newPlayer2Rating: winPlayer2 + winPlayer2Change\n    },\n    losingTeam: {\n      player1Change: losePlayer1Change,\n      player2Change: losePlayer2Change,\n      newPlayer1Rating: losePlayer1 + losePlayer1Change,\n      newPlayer2Rating: losePlayer2 + losePlayer2Change\n    }\n  };\n}\n\n/**\n * Calculate ELO changes for a match based on game format\n * @param gameFormat Type of tennis match\n * @param winnerRatings Array of winner ratings [player1, player2?]\n * @param loserRatings Array of loser ratings [player1, player2?] \n * @param kFactor Optional K-factor override\n * @returns ELO changes for all participants\n */\nexport function calculateMatchELO(\n  gameFormat: 'mens_singles' | 'womens_singles' | 'mens_doubles' | 'womens_doubles' | 'mixed_doubles',\n  winnerRatings: number[],\n  loserRatings: number[],\n  kFactor?: number\n): {\n  winners: number[];\n  losers: number[];\n  winnerChanges: number[];\n  loserChanges: number[];\n} {\n  const isSingles = gameFormat.includes('singles');\n  \n  if (isSingles) {\n    if (winnerRatings.length !== 1 || loserRatings.length !== 1) {\n      throw new Error('Singles matches require exactly 1 player per side');\n    }\n    \n    const result = calculateSinglesELO(winnerRatings[0], loserRatings[0], kFactor);\n    return {\n      winners: [result.newWinnerRating],\n      losers: [result.newLoserRating],\n      winnerChanges: [result.winnerChange],\n      loserChanges: [result.loserChange]\n    };\n  } else {\n    if (winnerRatings.length !== 2 || loserRatings.length !== 2) {\n      throw new Error('Doubles matches require exactly 2 players per side');\n    }\n    \n    const result = calculateDoublesELO(\n      [winnerRatings[0], winnerRatings[1]], \n      [loserRatings[0], loserRatings[1]], \n      kFactor\n    );\n    \n    return {\n      winners: [result.winningTeam.newPlayer1Rating, result.winningTeam.newPlayer2Rating],\n      losers: [result.losingTeam.newPlayer1Rating, result.losingTeam.newPlayer2Rating],\n      winnerChanges: [result.winningTeam.player1Change, result.winningTeam.player2Change],\n      loserChanges: [result.losingTeam.player1Change, result.losingTeam.player2Change]\n    };\n  }\n}\n\n/**\n * Get recommended K-factor based on player experience\n * @param gamesPlayed Number of games played by player\n * @returns Appropriate K-factor\n */\nexport function getKFactor(gamesPlayed: number): number {\n  if (gamesPlayed < 10) return 40; // New players - higher volatility\n  if (gamesPlayed < 30) return 32; // Regular players\n  return 24; // Experienced players - lower volatility\n}\n\n/**\n * Calculate expected win probability based on ELO difference\n * @param playerRating Player's current rating\n * @param opponentRating Opponent's current rating\n * @returns Win probability (0.0 to 1.0)\n */\nexport function getWinProbability(playerRating: number, opponentRating: number): number {\n  return 1 / (1 + Math.pow(10, (opponentRating - playerRating) / 400));\n}","size_bytes":6302},"server/routes/rankings.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { verifyFirebaseToken } from \"../firebase-admin.js\";\nimport { storage } from \"../storage.js\";\nimport { calculateMatchELO, getKFactor } from \"../elo-calculator.js\";\n\ninterface AuthenticatedRequest extends Request {\n  user: {\n    uid: string;\n  };\n}\n\nexport function registerRankingRoutes(app: Express): void {\n  \n  // Get user's ranking points for all game formats in a club\n  app.get('/api/clubs/:clubId/rankings/user/:userId', verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const clubId = parseInt(req.params.clubId);\n      const userId = req.params.userId;\n      \n      if (isNaN(clubId)) {\n        return res.status(400).json({ error: 'Invalid club ID' });\n      }\n      \n      const rankings = await storage.getUserRankingPoints(userId, clubId);\n      res.json({ rankings });\n      \n    } catch (error) {\n      console.error('Get user rankings error:', error);\n      res.status(500).json({ error: '랭킹 정보를 가져올 수 없습니다.' });\n    }\n  });\n\n  // Get club rankings by game format\n  app.get('/api/clubs/:clubId/rankings/:gameFormat', verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const clubId = parseInt(req.params.clubId);\n      const { gameFormat } = req.params;\n      \n      if (isNaN(clubId)) {\n        return res.status(400).json({ error: 'Invalid club ID' });\n      }\n      \n      const validFormats = ['mens_singles', 'womens_singles', 'mens_doubles', 'womens_doubles', 'mixed_doubles'];\n      if (!validFormats.includes(gameFormat)) {\n        return res.status(400).json({ error: 'Invalid game format' });\n      }\n      \n      const rankings = await storage.getClubRankingsByFormat(clubId, gameFormat);\n      res.json({ rankings });\n      \n    } catch (error) {\n      console.error('Get club rankings error:', error);\n      res.status(500).json({ error: '클럽 랭킹을 가져올 수 없습니다.' });\n    }\n  });\n\n  // Get user's match history and statistics by game format\n  app.get('/api/clubs/:clubId/user/:userId/stats', verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const clubId = parseInt(req.params.clubId);\n      const userId = req.params.userId;\n      \n      if (isNaN(clubId)) {\n        return res.status(400).json({ error: 'Invalid club ID' });\n      }\n      \n      // Get user's match history for this club\n      const matchHistory = await storage.getUserMatchHistory(userId, clubId);\n      \n      // Get user's rankings by format\n      const rankings = await storage.getUserRankingPoints(userId, clubId);\n      \n      // Calculate statistics by game format\n      const statsByFormat: { [key: string]: any } = {};\n      \n      for (const ranking of rankings) {\n        statsByFormat[ranking.gameFormat] = {\n          rankingPoints: ranking.rankingPoints,\n          wins: ranking.wins,\n          losses: ranking.losses,\n          draws: ranking.draws,\n          gamesPlayed: ranking.wins + ranking.losses + ranking.draws,\n          winRate: ranking.wins + ranking.losses + ranking.draws > 0 \n            ? (ranking.wins / (ranking.wins + ranking.losses + ranking.draws) * 100).toFixed(1)\n            : 0\n        };\n      }\n      \n      res.json({\n        matchHistory,\n        statsByFormat,\n        totalMatches: matchHistory.length\n      });\n      \n    } catch (error) {\n      console.error('Get user stats error:', error);\n      res.status(500).json({ error: '사용자 통계를 가져올 수 없습니다.' });\n    }\n  });\n\n  // Get partnership compatibility analysis\n  app.get('/api/clubs/:clubId/user/:userId/partnerships', verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const clubId = parseInt(req.params.clubId);\n      const userId = req.params.userId;\n      \n      if (isNaN(clubId)) {\n        return res.status(400).json({ error: 'Invalid club ID' });\n      }\n      \n      const partnershipStats = await storage.getPartnershipStats(userId, clubId);\n      \n      // Fetch partner user information (this would ideally come from Firebase)\n      // For now, we'll return partner IDs and stats\n      const partnerships = partnershipStats.map(stat => ({\n        partnerId: stat.partnerId,\n        wins: stat.wins,\n        losses: stat.losses,\n        draws: stat.draws,\n        gamesPlayed: stat.gamesPlayed,\n        winRate: stat.winRate.toFixed(1)\n      }));\n      \n      res.json({ partnerships });\n      \n    } catch (error) {\n      console.error('Get partnerships error:', error);\n      res.status(500).json({ error: '파트너십 분석을 가져올 수 없습니다.' });\n    }\n  });\n\n  // Complete a club match and update ELO ratings\n  app.post('/api/clubs/matches/:matchId/complete', verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const matchId = parseInt(req.params.matchId);\n      const { \n        result, \n        requestingScore, \n        receivingScore,\n        requestingTeamPlayer1,\n        requestingTeamPlayer2,\n        receivingTeamPlayer1,\n        receivingTeamPlayer2\n      } = req.body;\n      \n      if (isNaN(matchId)) {\n        return res.status(400).json({ error: 'Invalid match ID' });\n      }\n      \n      if (!result || !['requesting_won', 'receiving_won', 'draw'].includes(result)) {\n        return res.status(400).json({ error: 'Valid result is required' });\n      }\n      \n      // Get the specific match to determine game format and clubs\n      const match = await storage.getMatchById(matchId);\n      \n      if (!match) {\n        return res.status(404).json({ error: 'Match not found' });\n      }\n      \n      if (match.status === 'completed') {\n        return res.status(400).json({ error: 'Match already completed' });\n      }\n      \n      const gameFormat = match.gameFormat || 'mens_doubles';\n      const isSingles = gameFormat.includes('singles');\n      \n      // Validate player assignments\n      if (isSingles) {\n        if (!requestingTeamPlayer1 || !receivingTeamPlayer1) {\n          return res.status(400).json({ error: 'Singles matches require one player per team' });\n        }\n        if (requestingTeamPlayer2 || receivingTeamPlayer2) {\n          return res.status(400).json({ error: 'Singles matches cannot have second players' });\n        }\n      } else {\n        if (!requestingTeamPlayer1 || !requestingTeamPlayer2 || !receivingTeamPlayer1 || !receivingTeamPlayer2) {\n          return res.status(400).json({ error: 'Doubles matches require two players per team' });\n        }\n      }\n      \n      // Get current ratings for all players\n      const players = isSingles \n        ? [requestingTeamPlayer1, receivingTeamPlayer1]\n        : [requestingTeamPlayer1, requestingTeamPlayer2, receivingTeamPlayer1, receivingTeamPlayer2];\n      \n      const playerRatings = await Promise.all(\n        players.map(async (playerId) => {\n          const clubId = match.requestingClubId; // Assuming same club for simplicity\n          const rating = await storage.getUserRankingPointsByFormat(playerId, clubId, gameFormat);\n          return rating?.rankingPoints ?? 1200; // Default rating for new players\n        })\n      );\n      \n      // Calculate ELO changes based on match result\n      let eloResults;\n      if (result === 'draw') {\n        // Handle draws - minimal rating changes\n        eloResults = {\n          winners: playerRatings,\n          losers: [],\n          winnerChanges: playerRatings.map(() => 0),\n          loserChanges: []\n        };\n      } else {\n        const isRequestingWon = result === 'requesting_won';\n        const winnerRatings = isSingles \n          ? [playerRatings[isRequestingWon ? 0 : 1]]\n          : [playerRatings[isRequestingWon ? 0 : 2], playerRatings[isRequestingWon ? 1 : 3]];\n        const loserRatings = isSingles\n          ? [playerRatings[isRequestingWon ? 1 : 0]]\n          : [playerRatings[isRequestingWon ? 2 : 0], playerRatings[isRequestingWon ? 3 : 1]];\n        \n        // Get average games played for K-factor calculation\n        const avgGamesPlayed = 15; // Simplified for MVP - would calculate from actual history\n        const kFactor = getKFactor(avgGamesPlayed);\n        \n        eloResults = calculateMatchELO(gameFormat as any, winnerRatings, loserRatings, kFactor);\n      }\n      \n      // Update match result\n      const updatedMatch = await storage.updateMatchResult(matchId, {\n        result: result as any,\n        requestingScore: requestingScore || 0,\n        receivingScore: receivingScore || 0,\n        eloChange: 0 // Will be calculated\n      });\n      \n      // Create match participants and update ratings\n      const participants = [];\n      \n      if (isSingles) {\n        const reqPlayerId = requestingTeamPlayer1;\n        const recPlayerId = receivingTeamPlayer1;\n        const reqRatingBefore = playerRatings[0];\n        const recRatingBefore = playerRatings[1];\n        const reqChange = result === 'requesting_won' ? eloResults.winnerChanges[0] : eloResults.loserChanges[0];\n        const recChange = result === 'receiving_won' ? eloResults.winnerChanges[0] : eloResults.loserChanges[0];\n        \n        participants.push({\n          matchId,\n          userId: reqPlayerId,\n          team: 'requesting' as const,\n          partnerId: null,\n          rpBefore: reqRatingBefore,\n          rpAfter: reqRatingBefore + reqChange,\n          rpChange: reqChange\n        });\n        \n        participants.push({\n          matchId,\n          userId: recPlayerId,\n          team: 'receiving' as const,\n          partnerId: null,\n          rpBefore: recRatingBefore,\n          rpAfter: recRatingBefore + recChange,\n          rpChange: recChange\n        });\n        \n        // Update individual ratings - increment existing stats\n        const reqCurrentStats = await storage.getUserRankingPointsByFormat(reqPlayerId, match.requestingClubId, gameFormat);\n        const recCurrentStats = await storage.getUserRankingPointsByFormat(recPlayerId, match.receivingClubId, gameFormat);\n        \n        await storage.createOrUpdateUserRankingPoints({\n          userId: reqPlayerId,\n          clubId: match.requestingClubId,\n          gameFormat,\n          rankingPoints: reqRatingBefore + reqChange,\n          wins: (reqCurrentStats?.wins || 0) + (result === 'requesting_won' ? 1 : 0),\n          losses: (reqCurrentStats?.losses || 0) + (result === 'receiving_won' ? 1 : 0),\n          draws: (reqCurrentStats?.draws || 0) + (result === 'draw' ? 1 : 0)\n        });\n        \n        await storage.createOrUpdateUserRankingPoints({\n          userId: recPlayerId,\n          clubId: match.receivingClubId,\n          gameFormat,\n          rankingPoints: recRatingBefore + recChange,\n          wins: (recCurrentStats?.wins || 0) + (result === 'receiving_won' ? 1 : 0),\n          losses: (recCurrentStats?.losses || 0) + (result === 'requesting_won' ? 1 : 0),\n          draws: (recCurrentStats?.draws || 0) + (result === 'draw' ? 1 : 0)\n        });\n        \n      } else {\n        // Doubles logic would be similar but more complex\n        // Implementation omitted for brevity but follows same pattern\n      }\n      \n      // Save participants\n      await storage.addMatchParticipants(participants);\n      \n      res.json({ \n        match: updatedMatch, \n        participants,\n        eloChanges: eloResults\n      });\n      \n    } catch (error) {\n      console.error('Complete match error:', error);\n      res.status(500).json({ error: '경기 완료 처리 중 오류가 발생했습니다.' });\n    }\n  });\n}","size_bytes":11542}},"version":1}