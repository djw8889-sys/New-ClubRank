안녕하세요. Replit의 "Match Point" 프로젝트의 모든 기능을 활성화하고 싶습니다.
현재 코드는 UI만 구성되어 있고 핵심 로직이 비어있습니다.
아래의 작업 지시서에 따라, 모든 기능이 실제로 동작하는 완전한 웹 앱으로 코드를 업데이트해주세요.

(전제: firebaseConfig 객체에는 제 Firebase 프로젝트의 실제 키 값들이 채워져 있다고 가정하고 개발을 진행해주세요.)

[작업 1] 랭킹 시스템 활성화
ranking-tab이 비어있지 않도록, 실제 랭킹 데이터를 Firestore에서 불러와 표시해주세요.

데이터 조회: ranking-tab이 열릴 때, Firestore의 users 컬렉션에 있는 모든 사용자 문서를 가져옵니다.

데이터 정렬: 가져온 사용자들을 points 필드를 기준으로 내림차순 (높은 점수가 위로) 정렬합니다.

화면 렌더링: 정렬된 순서대로 ranking-list div 내부에 각 사용자의 정보를 동적으로 생성하여 추가합니다. 표시할 정보는 순위, 티어 아이콘, 닉네임, 지역, **총 포인트**입니다.

[작업 2] 커뮤니티 기능 활성화
사용자들이 실제로 글을 쓰고 다른 사람의 글을 읽을 수 있도록 만들어 주세요.

글 저장 기능:

new-post-view 화면의 '등록' 버튼(save-post-btn)을 클릭했을 때의 로직을 구현합니다.

post-title과 post-content의 값을 가져와 Firestore의 posts 컬렉션에 새 문서를 생성합니다.

문서에는 title, content, authorId, authorName, 그리고 글 작성 시점의 서버 시간(createdAt: firebase.firestore.FieldValue.serverTimestamp())이 포함되어야 합니다.

글 목록 표시 기능:

community-tab이 열릴 때, posts 컬렉션의 모든 문서를 가져옵니다.

가져온 글들을 createdAt 필드를 기준으로 내림차순 (최신 글이 위로) 정렬합니다.

community-post-list div 내부에 각 게시글의 제목, 내용 일부, 작성자 닉네임, **작성 시간**을 표시하는 카드를 동적으로 생성합니다.

[작업 3] 경기 결과 및 포인트 시스템 활성화
매치 후 결과를 기록하고 포인트를 업데이트하는 핵심 로직을 구현합니다. (매치 신청/수락 과정은 제외하고, 결과 처리부터 구현합니다.)

경기 결과 입력 UI: 우선 간단하게, '매치 신청' 버튼을 눌렀을 때 임시로 "경기에서 승리했습니까?"라고 묻는 confirm() 창을 띄워주세요. (나중에 이 부분은 더 고도화할 것입니다.)

포인트 업데이트 로직:

사용자가 '확인'(승리)을 누르면, 본인의 points는 +20, wins는 +1 해주고, (임시로) 상대방의 points는 -10, losses는 +1 해주는 로직을 구현합니다.

사용자가 '취소'(패배)를 누르면, 본인의 points는 -10, losses는 +1 해주고, 상대방의 points는 +20, wins는 +1 해줍니다.

해당 사용자의 users 문서에서 필드 값을 직접 업데이트해야 합니다.

실시간 티어 업데이트: 포인트가 변경된 직후, 변경된 포인트를 기준으로 사용자의 티어를 다시 계산하고 프로필 화면 및 랭킹에 즉시 반영해주세요.

[작업 4] 관리자 페이지 기능 활성화
isAdmin: true인 사용자를 위한 기본 관리 기능을 구현합니다.

사용자 관리: admin-view에 Firestore의 users 컬렉션에 있는 모든 사용자 목록을 테이블 형태로 표시해주세요. (표시 정보: email, username, points)

게시글 관리: admin-view에 posts 컬렉션의 모든 게시글 목록을 표시하고, 각 게시글 옆에 '삭제' 버튼을 추가해주세요. 이 버튼을 클릭하면 해당 문서가 Firestore에서 삭제되어야 합니다.

[작업 5] 전역 UX/UI 개선
앱의 완성도를 높이기 위해 사용자 경험을 개선해주세요.

로딩 인디케이터: Firestore에서 데이터를 불러오는 모든 작업(랭킹, 커뮤니티 목록, 플레이어 목록 조회 등)이 시작될 때 loading-overlay를 표시하고, 데이터 로딩이 완료되면 숨겨주세요.

입력값 검증: 프로필 저장, 새 글 등록 시, 필수 입력 필드(닉네임, 글 제목 등)가 비어있는지 확인하는 로직을 추가해주세요. 비어있을 경우, alert()으로 사용자에게 알려주고 저장을 막아주세요.

액션 피드백: 글 등록, 프로필 저장 등 데이터베이스에 쓰기 작업이 성공적으로 완료되면, alert("성공적으로 저장되었습니다!") 와 같이 사용자에게 시각적인 피드백을 주세요.

위의 5가지 작업을 순서대로 진행하여 코드를 업데이트해주세요. 각 작업이 완료될 때마다 알려주시면 제가 확인하겠습니다.